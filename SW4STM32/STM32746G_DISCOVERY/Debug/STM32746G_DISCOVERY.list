
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a28c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006acc  0800a460  0800a460  0000b460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010f2c  08010f2c  00011f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010f34  08010f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010f38  08010f38  00011f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000404  20000000  08010f3c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00024550  20000420  08011340  00012420  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  20024970  08011340  00012970  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00012404  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002563f  00000000  00000000  00012434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005503  00000000  00000000  00037a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000d781  00000000  00000000  0003cf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015e0  00000000  00000000  0004a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000015f0  00000000  00000000  0004bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002cf2f  00000000  00000000  0004d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029c8f  00000000  00000000  0007a1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00111011  00000000  00000000  000a3e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001b4e97  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000050b8  00000000  00000000  001b4edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a0  00000000  00000000  001b9f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000420 	.word	0x20000420
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a444 	.word	0x0800a444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000424 	.word	0x20000424
 800020c:	0800a444 	.word	0x0800a444

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8000f78:	2901      	cmp	r1, #1
{
 8000f7a:	b510      	push	{r4, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000f7c:	b2c4      	uxtb	r4, r0
  switch (Output) 
 8000f7e:	d00f      	beq.n	8000fa0 <wm8994_SetOutputMode+0x28>
 8000f80:	2903      	cmp	r1, #3
 8000f82:	d12d      	bne.n	8000fe0 <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f84:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000f88:	2105      	movs	r1, #5
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 fd9e 	bl	8001acc <AUDIO_IO_Write>
 8000f90:	2201      	movs	r2, #1
 8000f92:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f96:	4620      	mov	r0, r4
 8000f98:	f000 fd98 	bl	8001acc <AUDIO_IO_Write>
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	e00c      	b.n	8000fba <wm8994_SetOutputMode+0x42>
 8000fa0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000fa4:	2105      	movs	r1, #5
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f000 fd90 	bl	8001acc <AUDIO_IO_Write>
 8000fac:	2200      	movs	r2, #0
 8000fae:	f240 6101 	movw	r1, #1537	@ 0x601
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 fd8a 	bl	8001acc <AUDIO_IO_Write>
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f240 6102 	movw	r1, #1538	@ 0x602
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f000 fd84 	bl	8001acc <AUDIO_IO_Write>
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f240 6104 	movw	r1, #1540	@ 0x604
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f000 fd7e 	bl	8001acc <AUDIO_IO_Write>
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f240 6105 	movw	r1, #1541	@ 0x605
 8000fd8:	f000 fd78 	bl	8001acc <AUDIO_IO_Write>
}
 8000fdc:	2000      	movs	r0, #0
 8000fde:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000fe0:	f240 3203 	movw	r2, #771	@ 0x303
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f000 fd70 	bl	8001acc <AUDIO_IO_Write>
 8000fec:	2201      	movs	r2, #1
 8000fee:	f240 6101 	movw	r1, #1537	@ 0x601
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f000 fd6a 	bl	8001acc <AUDIO_IO_Write>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f240 6102 	movw	r1, #1538	@ 0x602
 8000ffe:	4620      	mov	r0, r4
 8001000:	f000 fd64 	bl	8001acc <AUDIO_IO_Write>
 8001004:	2200      	movs	r2, #0
 8001006:	f240 6104 	movw	r1, #1540	@ 0x604
 800100a:	4620      	mov	r0, r4
 800100c:	f000 fd5e 	bl	8001acc <AUDIO_IO_Write>
 8001010:	2200      	movs	r2, #0
 8001012:	e7de      	b.n	8000fd2 <wm8994_SetOutputMode+0x5a>

08001014 <wm8994_SetFrequency>:
{
 8001014:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8001016:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800101a:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 800101c:	4299      	cmp	r1, r3
 800101e:	d025      	beq.n	800106c <wm8994_SetFrequency+0x58>
 8001020:	d80b      	bhi.n	800103a <wm8994_SetFrequency+0x26>
 8001022:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001026:	4299      	cmp	r1, r3
 8001028:	d01e      	beq.n	8001068 <wm8994_SetFrequency+0x54>
 800102a:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 800102e:	d017      	beq.n	8001060 <wm8994_SetFrequency+0x4c>
 8001030:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 8001034:	d00d      	beq.n	8001052 <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001036:	2283      	movs	r2, #131	@ 0x83
 8001038:	e00c      	b.n	8001054 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 800103a:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800103e:	4299      	cmp	r1, r3
 8001040:	d016      	beq.n	8001070 <wm8994_SetFrequency+0x5c>
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <wm8994_SetFrequency+0x60>)
 8001044:	4299      	cmp	r1, r3
 8001046:	d00d      	beq.n	8001064 <wm8994_SetFrequency+0x50>
 8001048:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 800104c:	d1f3      	bne.n	8001036 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 800104e:	2263      	movs	r2, #99	@ 0x63
 8001050:	e000      	b.n	8001054 <wm8994_SetFrequency+0x40>
 8001052:	2203      	movs	r2, #3
 8001054:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001058:	f000 fd38 	bl	8001acc <AUDIO_IO_Write>
}
 800105c:	2000      	movs	r0, #0
 800105e:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001060:	2233      	movs	r2, #51	@ 0x33
 8001062:	e7f7      	b.n	8001054 <wm8994_SetFrequency+0x40>
 8001064:	22a3      	movs	r2, #163	@ 0xa3
 8001066:	e7f5      	b.n	8001054 <wm8994_SetFrequency+0x40>
 8001068:	2213      	movs	r2, #19
 800106a:	e7f3      	b.n	8001054 <wm8994_SetFrequency+0x40>
 800106c:	2243      	movs	r2, #67	@ 0x43
 800106e:	e7f1      	b.n	8001054 <wm8994_SetFrequency+0x40>
 8001070:	2273      	movs	r2, #115	@ 0x73
 8001072:	e7ef      	b.n	8001054 <wm8994_SetFrequency+0x40>
 8001074:	00017700 	.word	0x00017700

08001078 <wm8994_Reset>:
 8001078:	2200      	movs	r2, #0
 800107a:	b2c0      	uxtb	r0, r0
{
 800107c:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 800107e:	4611      	mov	r1, r2
 8001080:	f000 fd24 	bl	8001acc <AUDIO_IO_Write>
  outputEnabled = 0;
 8001084:	4b02      	ldr	r3, [pc, #8]	@ (8001090 <wm8994_Reset+0x18>)
 8001086:	2000      	movs	r0, #0
  inputEnabled=0;
 8001088:	e9c3 0000 	strd	r0, r0, [r3]
}
 800108c:	bd08      	pop	{r3, pc}
 800108e:	bf00      	nop
 8001090:	2000043c 	.word	0x2000043c

08001094 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8001094:	f000 bd18 	b.w	8001ac8 <AUDIO_IO_DeInit>

08001098 <wm8994_ReadID>:
{
 8001098:	b510      	push	{r4, lr}
 800109a:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 800109c:	f000 fd0e 	bl	8001abc <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80010a0:	2100      	movs	r1, #0
 80010a2:	b2e0      	uxtb	r0, r4
 80010a4:	f000 fd26 	bl	8001af4 <AUDIO_IO_Read>
}
 80010a8:	bd10      	pop	{r4, pc}
	...

080010ac <wm8994_SetMute>:
  if (outputEnabled != 0)
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <wm8994_SetMute+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
{
 80010b0:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 80010b2:	b183      	cbz	r3, 80010d6 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 80010b4:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80010b6:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 80010b8:	d10f      	bne.n	80010da <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80010ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80010c2:	4620      	mov	r0, r4
 80010c4:	f000 fd02 	bl	8001acc <AUDIO_IO_Write>
 80010c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010cc:	f240 4122 	movw	r1, #1058	@ 0x422
 80010d0:	4620      	mov	r0, r4
 80010d2:	f000 fcfb 	bl	8001acc <AUDIO_IO_Write>
}
 80010d6:	2000      	movs	r0, #0
 80010d8:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 80010da:	2210      	movs	r2, #16
 80010dc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80010e0:	4620      	mov	r0, r4
 80010e2:	f000 fcf3 	bl	8001acc <AUDIO_IO_Write>
 80010e6:	2210      	movs	r2, #16
 80010e8:	e7f0      	b.n	80010cc <wm8994_SetMute+0x20>
 80010ea:	bf00      	nop
 80010ec:	2000043c 	.word	0x2000043c

080010f0 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010f0:	2100      	movs	r1, #0
 80010f2:	f7ff bfdb 	b.w	80010ac <wm8994_SetMute>

080010f6 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010f6:	2100      	movs	r1, #0
 80010f8:	f7ff bfd8 	b.w	80010ac <wm8994_SetMute>

080010fc <wm8994_Pause>:
{  
 80010fc:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010fe:	2101      	movs	r1, #1
{  
 8001100:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001102:	f7ff ffd3 	bl	80010ac <wm8994_SetMute>
 8001106:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001108:	2201      	movs	r2, #1
 800110a:	b2e8      	uxtb	r0, r5
 800110c:	2102      	movs	r1, #2
 800110e:	f000 fcdd 	bl	8001acc <AUDIO_IO_Write>
}
 8001112:	4620      	mov	r0, r4
 8001114:	bd38      	pop	{r3, r4, r5, pc}
	...

08001118 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001118:	2964      	cmp	r1, #100	@ 0x64
{
 800111a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800111e:	f04f 0764 	mov.w	r7, #100	@ 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001122:	bf98      	it	ls
 8001124:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
  if (outputEnabled != 0)
 8001128:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8001218 <wm8994_SetVolume+0x100>
{
 800112c:	4605      	mov	r5, r0
 800112e:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 8001130:	f8d9 6000 	ldr.w	r6, [r9]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001134:	bf9c      	itt	ls
 8001136:	fbb3 f3f7 	udivls	r3, r3, r7
 800113a:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
 800113c:	b326      	cbz	r6, 8001188 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 800113e:	2f3e      	cmp	r7, #62	@ 0x3e
 8001140:	d91d      	bls.n	800117e <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001142:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001144:	2100      	movs	r1, #0
 8001146:	f7ff ffb1 	bl	80010ac <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 800114a:	f240 127f 	movw	r2, #383	@ 0x17f
 800114e:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001150:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001152:	4638      	mov	r0, r7
 8001154:	f000 fcba 	bl	8001acc <AUDIO_IO_Write>
 8001158:	f240 127f 	movw	r2, #383	@ 0x17f
 800115c:	211d      	movs	r1, #29
 800115e:	4638      	mov	r0, r7
 8001160:	f000 fcb4 	bl	8001acc <AUDIO_IO_Write>
 8001164:	f240 127f 	movw	r2, #383	@ 0x17f
 8001168:	2126      	movs	r1, #38	@ 0x26
 800116a:	4638      	mov	r0, r7
 800116c:	f000 fcae 	bl	8001acc <AUDIO_IO_Write>
 8001170:	f240 127f 	movw	r2, #383	@ 0x17f
 8001174:	2127      	movs	r1, #39	@ 0x27
 8001176:	4638      	mov	r0, r7
 8001178:	f000 fca8 	bl	8001acc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800117c:	e004      	b.n	8001188 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 800117e:	bb79      	cbnz	r1, 80011e0 <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001180:	2101      	movs	r1, #1
 8001182:	f7ff ff93 	bl	80010ac <wm8994_SetMute>
 8001186:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 8001188:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800118c:	b32b      	cbz	r3, 80011da <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800118e:	2c63      	cmp	r4, #99	@ 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001190:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8001192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001196:	bf9a      	itte	ls
 8001198:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 800119c:	2364      	movls	r3, #100	@ 0x64
 800119e:	24ef      	movhi	r4, #239	@ 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 80011a0:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80011a2:	bf9e      	ittt	ls
 80011a4:	0124      	lslls	r4, r4, #4
 80011a6:	fbb4 f4f3 	udivls	r4, r4, r3
 80011aa:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80011ac:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 80011b0:	4622      	mov	r2, r4
 80011b2:	f000 fc8b 	bl	8001acc <AUDIO_IO_Write>
 80011b6:	4622      	mov	r2, r4
 80011b8:	f240 4101 	movw	r1, #1025	@ 0x401
 80011bc:	4628      	mov	r0, r5
 80011be:	f000 fc85 	bl	8001acc <AUDIO_IO_Write>
 80011c2:	4622      	mov	r2, r4
 80011c4:	f240 4104 	movw	r1, #1028	@ 0x404
 80011c8:	4628      	mov	r0, r5
 80011ca:	f000 fc7f 	bl	8001acc <AUDIO_IO_Write>
 80011ce:	4622      	mov	r2, r4
 80011d0:	f240 4105 	movw	r1, #1029	@ 0x405
 80011d4:	4628      	mov	r0, r5
 80011d6:	f000 fc79 	bl	8001acc <AUDIO_IO_Write>
}
 80011da:	4630      	mov	r0, r6
 80011dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80011e0:	fa5f f885 	uxtb.w	r8, r5
 80011e4:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80011e8:	2100      	movs	r1, #0
 80011ea:	f7ff ff5f 	bl	80010ac <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 80011ee:	463a      	mov	r2, r7
 80011f0:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80011f2:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80011f4:	4640      	mov	r0, r8
 80011f6:	f000 fc69 	bl	8001acc <AUDIO_IO_Write>
 80011fa:	463a      	mov	r2, r7
 80011fc:	211d      	movs	r1, #29
 80011fe:	4640      	mov	r0, r8
 8001200:	f000 fc64 	bl	8001acc <AUDIO_IO_Write>
 8001204:	463a      	mov	r2, r7
 8001206:	2126      	movs	r1, #38	@ 0x26
 8001208:	4640      	mov	r0, r8
 800120a:	f000 fc5f 	bl	8001acc <AUDIO_IO_Write>
 800120e:	463a      	mov	r2, r7
 8001210:	2127      	movs	r1, #39	@ 0x27
 8001212:	4640      	mov	r0, r8
 8001214:	e7b0      	b.n	8001178 <wm8994_SetVolume+0x60>
 8001216:	bf00      	nop
 8001218:	2000043c 	.word	0x2000043c

0800121c <wm8994_Init>:
{
 800121c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001220:	4681      	mov	r9, r0
 8001222:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001224:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
{
 8001228:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800122a:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 800122e:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8001230:	f000 fc44 	bl	8001abc <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001234:	2203      	movs	r2, #3
 8001236:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800123a:	4620      	mov	r0, r4
 800123c:	f000 fc46 	bl	8001acc <AUDIO_IO_Write>
 8001240:	2200      	movs	r2, #0
 8001242:	f640 0117 	movw	r1, #2071	@ 0x817
 8001246:	4620      	mov	r0, r4
 8001248:	f000 fc40 	bl	8001acc <AUDIO_IO_Write>
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001252:	4620      	mov	r0, r4
 8001254:	f000 fc3a 	bl	8001acc <AUDIO_IO_Write>
 8001258:	226c      	movs	r2, #108	@ 0x6c
 800125a:	2139      	movs	r1, #57	@ 0x39
 800125c:	4620      	mov	r0, r4
 800125e:	f000 fc35 	bl	8001acc <AUDIO_IO_Write>
  if (input_device > 0)
 8001262:	2d00      	cmp	r5, #0
 8001264:	d062      	beq.n	800132c <wm8994_Init+0x110>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001266:	2213      	movs	r2, #19
 8001268:	2101      	movs	r1, #1
 800126a:	4620      	mov	r0, r4
 800126c:	f000 fc2e 	bl	8001acc <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8001270:	2032      	movs	r0, #50	@ 0x32
 8001272:	f8df b504 	ldr.w	fp, [pc, #1284]	@ 8001778 <wm8994_Init+0x55c>
 8001276:	f000 fc55 	bl	8001b24 <AUDIO_IO_Delay>
  if (output_device > 0)
 800127a:	2e00      	cmp	r6, #0
 800127c:	f000 80ce 	beq.w	800141c <wm8994_Init+0x200>
    outputEnabled = 1;
 8001280:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 8001284:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 8001286:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 800128a:	f000 80ad 	beq.w	80013e8 <wm8994_Init+0x1cc>
 800128e:	2e03      	cmp	r6, #3
 8001290:	d04e      	beq.n	8001330 <wm8994_Init+0x114>
 8001292:	4546      	cmp	r6, r8
 8001294:	f040 80a8 	bne.w	80013e8 <wm8994_Init+0x1cc>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001298:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800129c:	2105      	movs	r1, #5
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 fc14 	bl	8001acc <AUDIO_IO_Write>
 80012a4:	2200      	movs	r2, #0
 80012a6:	f240 6101 	movw	r1, #1537	@ 0x601
 80012aa:	4620      	mov	r0, r4
 80012ac:	f000 fc0e 	bl	8001acc <AUDIO_IO_Write>
 80012b0:	2200      	movs	r2, #0
 80012b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80012b6:	4620      	mov	r0, r4
 80012b8:	f000 fc08 	bl	8001acc <AUDIO_IO_Write>
 80012bc:	2202      	movs	r2, #2
 80012be:	f240 6104 	movw	r1, #1540	@ 0x604
 80012c2:	4620      	mov	r0, r4
 80012c4:	f000 fc02 	bl	8001acc <AUDIO_IO_Write>
 80012c8:	2202      	movs	r2, #2
 80012ca:	f240 6105 	movw	r1, #1541	@ 0x605
 80012ce:	4620      	mov	r0, r4
 80012d0:	f000 fbfc 	bl	8001acc <AUDIO_IO_Write>
  if (input_device > 0)
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	f000 8101 	beq.w	80014dc <wm8994_Init+0x2c0>
    inputEnabled = 1;
 80012da:	f04f 0801 	mov.w	r8, #1
    switch (input_device)
 80012de:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
    inputEnabled = 1;
 80012e2:	f8cb 8004 	str.w	r8, [fp, #4]
    switch (input_device)
 80012e6:	f000 80c7 	beq.w	8001478 <wm8994_Init+0x25c>
 80012ea:	f200 809a 	bhi.w	8001422 <wm8994_Init+0x206>
 80012ee:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80012f2:	f000 80f0 	beq.w	80014d6 <wm8994_Init+0x2ba>
 80012f6:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80012fa:	f000 8096 	beq.w	800142a <wm8994_Init+0x20e>
  switch (AudioFreq)
 80012fe:	f5b7 4ffa 	cmp.w	r7, #32000	@ 0x7d00
 8001302:	f000 81f8 	beq.w	80016f6 <wm8994_Init+0x4da>
 8001306:	f200 80f3 	bhi.w	80014f0 <wm8994_Init+0x2d4>
 800130a:	f5b7 5f7a 	cmp.w	r7, #16000	@ 0x3e80
 800130e:	f000 81f0 	beq.w	80016f2 <wm8994_Init+0x4d6>
 8001312:	f200 80e6 	bhi.w	80014e2 <wm8994_Init+0x2c6>
 8001316:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 800131a:	f000 80f9 	beq.w	8001510 <wm8994_Init+0x2f4>
 800131e:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001322:	429f      	cmp	r7, r3
 8001324:	f000 81eb 	beq.w	80016fe <wm8994_Init+0x4e2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001328:	2283      	movs	r2, #131	@ 0x83
 800132a:	e0f2      	b.n	8001512 <wm8994_Init+0x2f6>
 800132c:	2203      	movs	r2, #3
 800132e:	e79b      	b.n	8001268 <wm8994_Init+0x4c>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001330:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001334:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001338:	f04f 0105 	mov.w	r1, #5
 800133c:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800133e:	d149      	bne.n	80013d4 <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001340:	f000 fbc4 	bl	8001acc <AUDIO_IO_Write>
 8001344:	4632      	mov	r2, r6
 8001346:	f240 6101 	movw	r1, #1537	@ 0x601
 800134a:	4620      	mov	r0, r4
 800134c:	f000 fbbe 	bl	8001acc <AUDIO_IO_Write>
 8001350:	4632      	mov	r2, r6
 8001352:	f240 6102 	movw	r1, #1538	@ 0x602
 8001356:	4620      	mov	r0, r4
 8001358:	f000 fbb8 	bl	8001acc <AUDIO_IO_Write>
 800135c:	4632      	mov	r2, r6
 800135e:	f240 6104 	movw	r1, #1540	@ 0x604
 8001362:	4620      	mov	r0, r4
 8001364:	f000 fbb2 	bl	8001acc <AUDIO_IO_Write>
 8001368:	4632      	mov	r2, r6
 800136a:	f240 6105 	movw	r1, #1541	@ 0x605
 800136e:	4620      	mov	r0, r4
 8001370:	f000 fbac 	bl	8001acc <AUDIO_IO_Write>
    inputEnabled = 1;
 8001374:	f8cb 8004 	str.w	r8, [fp, #4]
 AUDIO_IO_Write(Addr, Reg, Value);
 8001378:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800137c:	2104      	movs	r1, #4
 800137e:	4620      	mov	r0, r4
 8001380:	f000 fba4 	bl	8001acc <AUDIO_IO_Write>
 8001384:	22db      	movs	r2, #219	@ 0xdb
 8001386:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800138a:	4620      	mov	r0, r4
 800138c:	f000 fb9e 	bl	8001acc <AUDIO_IO_Write>
 8001390:	22db      	movs	r2, #219	@ 0xdb
 8001392:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8001396:	4620      	mov	r0, r4
 8001398:	f000 fb98 	bl	8001acc <AUDIO_IO_Write>
 800139c:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80013a0:	2102      	movs	r1, #2
 80013a2:	4620      	mov	r0, r4
 80013a4:	f000 fb92 	bl	8001acc <AUDIO_IO_Write>
 80013a8:	2202      	movs	r2, #2
 80013aa:	f240 6106 	movw	r1, #1542	@ 0x606
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 fb8c 	bl	8001acc <AUDIO_IO_Write>
 80013b4:	2202      	movs	r2, #2
 80013b6:	f240 6107 	movw	r1, #1543	@ 0x607
 80013ba:	4620      	mov	r0, r4
 80013bc:	f000 fb86 	bl	8001acc <AUDIO_IO_Write>
 80013c0:	2202      	movs	r2, #2
 80013c2:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80013c6:	4620      	mov	r0, r4
 80013c8:	f000 fb80 	bl	8001acc <AUDIO_IO_Write>
 80013cc:	2202      	movs	r2, #2
 80013ce:	f240 6109 	movw	r1, #1545	@ 0x609
 80013d2:	e07b      	b.n	80014cc <wm8994_Init+0x2b0>
 80013d4:	f000 fb7a 	bl	8001acc <AUDIO_IO_Write>
 80013d8:	4642      	mov	r2, r8
 80013da:	f240 6101 	movw	r1, #1537	@ 0x601
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 fb74 	bl	8001acc <AUDIO_IO_Write>
 80013e4:	4642      	mov	r2, r8
 80013e6:	e764      	b.n	80012b2 <wm8994_Init+0x96>
 80013e8:	f240 3203 	movw	r2, #771	@ 0x303
 80013ec:	2105      	movs	r1, #5
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 fb6c 	bl	8001acc <AUDIO_IO_Write>
 80013f4:	4642      	mov	r2, r8
 80013f6:	f240 6101 	movw	r1, #1537	@ 0x601
 80013fa:	4620      	mov	r0, r4
 80013fc:	f000 fb66 	bl	8001acc <AUDIO_IO_Write>
 8001400:	4642      	mov	r2, r8
 8001402:	f240 6102 	movw	r1, #1538	@ 0x602
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fb60 	bl	8001acc <AUDIO_IO_Write>
 800140c:	2200      	movs	r2, #0
 800140e:	f240 6104 	movw	r1, #1540	@ 0x604
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fb5a 	bl	8001acc <AUDIO_IO_Write>
 8001418:	2200      	movs	r2, #0
 800141a:	e756      	b.n	80012ca <wm8994_Init+0xae>
    outputEnabled = 0;
 800141c:	f8cb 6000 	str.w	r6, [fp]
 8001420:	e758      	b.n	80012d4 <wm8994_Init+0xb8>
    switch (input_device)
 8001422:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001426:	d0a7      	beq.n	8001378 <wm8994_Init+0x15c>
 8001428:	e769      	b.n	80012fe <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 800142a:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800142e:	2104      	movs	r1, #4
 8001430:	4620      	mov	r0, r4
 8001432:	f000 fb4b 	bl	8001acc <AUDIO_IO_Write>
 8001436:	22db      	movs	r2, #219	@ 0xdb
 8001438:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800143c:	4620      	mov	r0, r4
 800143e:	f000 fb45 	bl	8001acc <AUDIO_IO_Write>
 8001442:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8001446:	2102      	movs	r1, #2
 8001448:	4620      	mov	r0, r4
 800144a:	f000 fb3f 	bl	8001acc <AUDIO_IO_Write>
 800144e:	2202      	movs	r2, #2
 8001450:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001454:	4620      	mov	r0, r4
 8001456:	f000 fb39 	bl	8001acc <AUDIO_IO_Write>
 800145a:	2202      	movs	r2, #2
 800145c:	f240 6109 	movw	r1, #1545	@ 0x609
 8001460:	4620      	mov	r0, r4
 8001462:	f000 fb33 	bl	8001acc <AUDIO_IO_Write>
 8001466:	220e      	movs	r2, #14
 8001468:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800146c:	4620      	mov	r0, r4
 800146e:	f000 fb2d 	bl	8001acc <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001472:	f04f 0800 	mov.w	r8, #0
 8001476:	e742      	b.n	80012fe <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001478:	2211      	movs	r2, #17
 800147a:	2128      	movs	r1, #40	@ 0x28
 800147c:	4620      	mov	r0, r4
 800147e:	f000 fb25 	bl	8001acc <AUDIO_IO_Write>
 8001482:	2235      	movs	r2, #53	@ 0x35
 8001484:	2129      	movs	r1, #41	@ 0x29
 8001486:	4620      	mov	r0, r4
 8001488:	f000 fb20 	bl	8001acc <AUDIO_IO_Write>
 800148c:	2235      	movs	r2, #53	@ 0x35
 800148e:	212a      	movs	r1, #42	@ 0x2a
 8001490:	4620      	mov	r0, r4
 8001492:	f000 fb1b 	bl	8001acc <AUDIO_IO_Write>
 8001496:	f240 3203 	movw	r2, #771	@ 0x303
 800149a:	2104      	movs	r1, #4
 800149c:	4620      	mov	r0, r4
 800149e:	f000 fb15 	bl	8001acc <AUDIO_IO_Write>
 80014a2:	22db      	movs	r2, #219	@ 0xdb
 80014a4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80014a8:	4620      	mov	r0, r4
 80014aa:	f000 fb0f 	bl	8001acc <AUDIO_IO_Write>
 80014ae:	f246 3250 	movw	r2, #25424	@ 0x6350
 80014b2:	2102      	movs	r1, #2
 80014b4:	4620      	mov	r0, r4
 80014b6:	f000 fb09 	bl	8001acc <AUDIO_IO_Write>
 80014ba:	2202      	movs	r2, #2
 80014bc:	f240 6106 	movw	r1, #1542	@ 0x606
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 fb03 	bl	8001acc <AUDIO_IO_Write>
 80014c6:	2202      	movs	r2, #2
 80014c8:	f240 6107 	movw	r1, #1543	@ 0x607
 80014cc:	4620      	mov	r0, r4
 80014ce:	f000 fafd 	bl	8001acc <AUDIO_IO_Write>
 80014d2:	220d      	movs	r2, #13
 80014d4:	e7c8      	b.n	8001468 <wm8994_Init+0x24c>
 80014d6:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80014da:	e7de      	b.n	800149a <wm8994_Init+0x27e>
    inputEnabled = 0;
 80014dc:	f8cb 5004 	str.w	r5, [fp, #4]
 80014e0:	e7c7      	b.n	8001472 <wm8994_Init+0x256>
  switch (AudioFreq)
 80014e2:	f245 6322 	movw	r3, #22050	@ 0x5622
 80014e6:	429f      	cmp	r7, r3
 80014e8:	f47f af1e 	bne.w	8001328 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 80014ec:	2243      	movs	r2, #67	@ 0x43
 80014ee:	e010      	b.n	8001512 <wm8994_Init+0x2f6>
  switch (AudioFreq)
 80014f0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80014f4:	429f      	cmp	r7, r3
 80014f6:	f43f af17 	beq.w	8001328 <wm8994_Init+0x10c>
 80014fa:	4b9d      	ldr	r3, [pc, #628]	@ (8001770 <wm8994_Init+0x554>)
 80014fc:	429f      	cmp	r7, r3
 80014fe:	f000 80fc 	beq.w	80016fa <wm8994_Init+0x4de>
 8001502:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001506:	429f      	cmp	r7, r3
 8001508:	f47f af0e 	bne.w	8001328 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 800150c:	2273      	movs	r2, #115	@ 0x73
 800150e:	e000      	b.n	8001512 <wm8994_Init+0x2f6>
 8001510:	2203      	movs	r2, #3
 8001512:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001516:	4620      	mov	r0, r4
 8001518:	f000 fad8 	bl	8001acc <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800151c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001520:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001524:	4620      	mov	r0, r4
 8001526:	bf0c      	ite	eq
 8001528:	f244 0218 	movweq	r2, #16408	@ 0x4018
 800152c:	f244 0210 	movwne	r2, #16400	@ 0x4010
 8001530:	f000 facc 	bl	8001acc <AUDIO_IO_Write>
 8001534:	2200      	movs	r2, #0
 8001536:	f240 3102 	movw	r1, #770	@ 0x302
 800153a:	4620      	mov	r0, r4
 800153c:	f000 fac6 	bl	8001acc <AUDIO_IO_Write>
 8001540:	220a      	movs	r2, #10
 8001542:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001546:	4620      	mov	r0, r4
 8001548:	f000 fac0 	bl	8001acc <AUDIO_IO_Write>
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001552:	4620      	mov	r0, r4
 8001554:	f000 faba 	bl	8001acc <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8001558:	2e00      	cmp	r6, #0
 800155a:	f000 80a9 	beq.w	80016b0 <wm8994_Init+0x494>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800155e:	2e02      	cmp	r6, #2
 8001560:	d123      	bne.n	80015aa <wm8994_Init+0x38e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001566:	212d      	movs	r1, #45	@ 0x2d
 8001568:	4620      	mov	r0, r4
      if(ColdStartup)
 800156a:	4e82      	ldr	r6, [pc, #520]	@ (8001774 <wm8994_Init+0x558>)
 AUDIO_IO_Write(Addr, Reg, Value);
 800156c:	f000 faae 	bl	8001acc <AUDIO_IO_Write>
 8001570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001574:	212e      	movs	r1, #46	@ 0x2e
 8001576:	4620      	mov	r0, r4
 8001578:	f000 faa8 	bl	8001acc <AUDIO_IO_Write>
      if(ColdStartup)
 800157c:	7833      	ldrb	r3, [r6, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80bf 	beq.w	8001702 <wm8994_Init+0x4e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001584:	4620      	mov	r0, r4
 8001586:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 800158a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800158e:	f000 fa9d 	bl	8001acc <AUDIO_IO_Write>
        ColdStartup=0;
 8001592:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 8001594:	f44f 7096 	mov.w	r0, #300	@ 0x12c
        ColdStartup=0;
 8001598:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 800159a:	f000 fac3 	bl	8001b24 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80015a4:	4620      	mov	r0, r4
 80015a6:	f000 fa91 	bl	8001acc <AUDIO_IO_Write>
 80015aa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015ae:	2103      	movs	r1, #3
 80015b0:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80015b2:	f243 3603 	movw	r6, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 80015b6:	f000 fa89 	bl	8001acc <AUDIO_IO_Write>
 80015ba:	2200      	movs	r2, #0
 80015bc:	2122      	movs	r1, #34	@ 0x22
 80015be:	4620      	mov	r0, r4
 80015c0:	f000 fa84 	bl	8001acc <AUDIO_IO_Write>
 80015c4:	2200      	movs	r2, #0
 80015c6:	2123      	movs	r1, #35	@ 0x23
 80015c8:	4620      	mov	r0, r4
 80015ca:	f000 fa7f 	bl	8001acc <AUDIO_IO_Write>
 80015ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015d2:	2136      	movs	r1, #54	@ 0x36
 80015d4:	4620      	mov	r0, r4
 80015d6:	f000 fa79 	bl	8001acc <AUDIO_IO_Write>
 80015da:	f243 0203 	movw	r2, #12291	@ 0x3003
 80015de:	2101      	movs	r1, #1
 80015e0:	4620      	mov	r0, r4
 80015e2:	f000 fa73 	bl	8001acc <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80015e6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 80015ea:	f04f 0151 	mov.w	r1, #81	@ 0x51
 80015ee:	4620      	mov	r0, r4
 80015f0:	bf0c      	ite	eq
 80015f2:	f240 2205 	movweq	r2, #517	@ 0x205
 80015f6:	2205      	movne	r2, #5
 80015f8:	f000 fa68 	bl	8001acc <AUDIO_IO_Write>
 80015fc:	f243 3203 	movw	r2, #13059	@ 0x3303
 8001600:	2101      	movs	r1, #1
 8001602:	4620      	mov	r0, r4
 8001604:	f000 fa62 	bl	8001acc <AUDIO_IO_Write>
 8001608:	2222      	movs	r2, #34	@ 0x22
 800160a:	2160      	movs	r1, #96	@ 0x60
 800160c:	4620      	mov	r0, r4
 800160e:	f000 fa5d 	bl	8001acc <AUDIO_IO_Write>
 8001612:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001616:	214c      	movs	r1, #76	@ 0x4c
 8001618:	4620      	mov	r0, r4
 800161a:	f000 fa57 	bl	8001acc <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 800161e:	200f      	movs	r0, #15
 8001620:	f000 fa80 	bl	8001b24 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001624:	2201      	movs	r2, #1
 8001626:	212d      	movs	r1, #45	@ 0x2d
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fa4f 	bl	8001acc <AUDIO_IO_Write>
 800162e:	2201      	movs	r2, #1
 8001630:	212e      	movs	r1, #46	@ 0x2e
 8001632:	4620      	mov	r0, r4
 8001634:	f000 fa4a 	bl	8001acc <AUDIO_IO_Write>
 8001638:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800163c:	2103      	movs	r1, #3
 800163e:	4620      	mov	r0, r4
 8001640:	f000 fa44 	bl	8001acc <AUDIO_IO_Write>
 8001644:	2233      	movs	r2, #51	@ 0x33
 8001646:	2154      	movs	r1, #84	@ 0x54
 8001648:	4620      	mov	r0, r4
 800164a:	f000 fa3f 	bl	8001acc <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 800164e:	f240 1001 	movw	r0, #257	@ 0x101
 8001652:	f000 fa67 	bl	8001b24 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001656:	22ee      	movs	r2, #238	@ 0xee
 8001658:	2160      	movs	r1, #96	@ 0x60
 800165a:	4620      	mov	r0, r4
 800165c:	f000 fa36 	bl	8001acc <AUDIO_IO_Write>
 8001660:	22c0      	movs	r2, #192	@ 0xc0
 8001662:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001666:	4620      	mov	r0, r4
 8001668:	f000 fa30 	bl	8001acc <AUDIO_IO_Write>
 800166c:	22c0      	movs	r2, #192	@ 0xc0
 800166e:	f240 6111 	movw	r1, #1553	@ 0x611
 8001672:	4620      	mov	r0, r4
 8001674:	f000 fa2a 	bl	8001acc <AUDIO_IO_Write>
 8001678:	2210      	movs	r2, #16
 800167a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800167e:	4620      	mov	r0, r4
 8001680:	f000 fa24 	bl	8001acc <AUDIO_IO_Write>
 8001684:	22c0      	movs	r2, #192	@ 0xc0
 8001686:	f240 6112 	movw	r1, #1554	@ 0x612
 800168a:	4620      	mov	r0, r4
 800168c:	f000 fa1e 	bl	8001acc <AUDIO_IO_Write>
 8001690:	22c0      	movs	r2, #192	@ 0xc0
 8001692:	f240 6113 	movw	r1, #1555	@ 0x613
 8001696:	4620      	mov	r0, r4
 8001698:	f000 fa18 	bl	8001acc <AUDIO_IO_Write>
 800169c:	2210      	movs	r2, #16
 800169e:	f240 4122 	movw	r1, #1058	@ 0x422
 80016a2:	4620      	mov	r0, r4
 80016a4:	f000 fa12 	bl	8001acc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80016a8:	4651      	mov	r1, sl
 80016aa:	4648      	mov	r0, r9
 80016ac:	f7ff fd34 	bl	8001118 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 80016b0:	b1e5      	cbz	r5, 80016ec <wm8994_Init+0x4d0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80016b2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80016b6:	d002      	beq.n	80016be <wm8994_Init+0x4a2>
 80016b8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80016bc:	d12a      	bne.n	8001714 <wm8994_Init+0x4f8>
 AUDIO_IO_Write(Addr, Reg, Value);
 80016be:	f046 0213 	orr.w	r2, r6, #19
 80016c2:	2101      	movs	r1, #1
 80016c4:	4620      	mov	r0, r4
 80016c6:	f000 fa01 	bl	8001acc <AUDIO_IO_Write>
 80016ca:	2202      	movs	r2, #2
 80016cc:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80016d0:	4620      	mov	r0, r4
 80016d2:	f000 f9fb 	bl	8001acc <AUDIO_IO_Write>
 80016d6:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80016da:	f240 4111 	movw	r1, #1041	@ 0x411
 80016de:	4620      	mov	r0, r4
 80016e0:	f000 f9f4 	bl	8001acc <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80016e4:	4651      	mov	r1, sl
 80016e6:	4648      	mov	r0, r9
 80016e8:	f7ff fd16 	bl	8001118 <wm8994_SetVolume>
}
 80016ec:	4640      	mov	r0, r8
 80016ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 80016f2:	2233      	movs	r2, #51	@ 0x33
 80016f4:	e70d      	b.n	8001512 <wm8994_Init+0x2f6>
 80016f6:	2263      	movs	r2, #99	@ 0x63
 80016f8:	e70b      	b.n	8001512 <wm8994_Init+0x2f6>
 80016fa:	22a3      	movs	r2, #163	@ 0xa3
 80016fc:	e709      	b.n	8001512 <wm8994_Init+0x2f6>
 80016fe:	2213      	movs	r2, #19
 8001700:	e707      	b.n	8001512 <wm8994_Init+0x2f6>
 8001702:	4620      	mov	r0, r4
 8001704:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001708:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800170c:	f000 f9de 	bl	8001acc <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8001710:	2032      	movs	r0, #50	@ 0x32
 8001712:	e742      	b.n	800159a <wm8994_Init+0x37e>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001714:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001718:	d115      	bne.n	8001746 <wm8994_Init+0x52a>
 AUDIO_IO_Write(Addr, Reg, Value);
 800171a:	f046 0213 	orr.w	r2, r6, #19
 800171e:	2101      	movs	r1, #1
 8001720:	4620      	mov	r0, r4
 8001722:	f000 f9d3 	bl	8001acc <AUDIO_IO_Write>
 8001726:	2202      	movs	r2, #2
 8001728:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800172c:	4620      	mov	r0, r4
 800172e:	f000 f9cd 	bl	8001acc <AUDIO_IO_Write>
 8001732:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001736:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800173a:	4620      	mov	r0, r4
 800173c:	f000 f9c6 	bl	8001acc <AUDIO_IO_Write>
 8001740:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001744:	e7c9      	b.n	80016da <wm8994_Init+0x4be>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001746:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 800174a:	d002      	beq.n	8001752 <wm8994_Init+0x536>
 800174c:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8001750:	d1c8      	bne.n	80016e4 <wm8994_Init+0x4c8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001752:	220b      	movs	r2, #11
 8001754:	2118      	movs	r1, #24
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f9b8 	bl	8001acc <AUDIO_IO_Write>
 800175c:	220b      	movs	r2, #11
 800175e:	211a      	movs	r1, #26
 8001760:	4620      	mov	r0, r4
 8001762:	f000 f9b3 	bl	8001acc <AUDIO_IO_Write>
 8001766:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800176a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800176e:	e7b6      	b.n	80016de <wm8994_Init+0x4c2>
 8001770:	00017700 	.word	0x00017700
 8001774:	20000000 	.word	0x20000000
 8001778:	2000043c 	.word	0x2000043c

0800177c <wm8994_Stop>:
{
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 800177e:	4f19      	ldr	r7, [pc, #100]	@ (80017e4 <wm8994_Stop+0x68>)
{
 8001780:	4604      	mov	r4, r0
 8001782:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8001784:	683d      	ldr	r5, [r7, #0]
 8001786:	b355      	cbz	r5, 80017de <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001788:	2101      	movs	r1, #1
 800178a:	f7ff fc8f 	bl	80010ac <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 800178e:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001790:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001792:	d024      	beq.n	80017de <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001794:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001796:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800179a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800179e:	4620      	mov	r0, r4
 80017a0:	f000 f994 	bl	8001acc <AUDIO_IO_Write>
 80017a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a8:	f240 4122 	movw	r1, #1058	@ 0x422
 80017ac:	4620      	mov	r0, r4
 80017ae:	f000 f98d 	bl	8001acc <AUDIO_IO_Write>
 80017b2:	2200      	movs	r2, #0
 80017b4:	212d      	movs	r1, #45	@ 0x2d
 80017b6:	4620      	mov	r0, r4
 80017b8:	f000 f988 	bl	8001acc <AUDIO_IO_Write>
 80017bc:	2200      	movs	r2, #0
 80017be:	212e      	movs	r1, #46	@ 0x2e
 80017c0:	4620      	mov	r0, r4
 80017c2:	f000 f983 	bl	8001acc <AUDIO_IO_Write>
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	4620      	mov	r0, r4
 80017cc:	f000 f97e 	bl	8001acc <AUDIO_IO_Write>
 80017d0:	2200      	movs	r2, #0
 80017d2:	4620      	mov	r0, r4
 80017d4:	4611      	mov	r1, r2
 80017d6:	f000 f979 	bl	8001acc <AUDIO_IO_Write>
      outputEnabled = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
}
 80017de:	4628      	mov	r0, r5
 80017e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000043c 	.word	0x2000043c

080017e8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	b08a      	sub	sp, #40	@ 0x28
 80017ec:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80017ee:	f002 fdaf 	bl	8004350 <HAL_I2C_GetState>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	f040 8096 	bne.w	8001924 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80017f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 80017fa:	2600      	movs	r6, #0
 80017fc:	4c4b      	ldr	r4, [pc, #300]	@ (800192c <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80017fe:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001800:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001802:	bf0c      	ite	eq
 8001804:	4a4a      	ldreq	r2, [pc, #296]	@ (8001930 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001806:	4a4b      	ldrne	r2, [pc, #300]	@ (8001934 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001808:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800180a:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 800180c:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <I2Cx_Init+0x150>)
 800180e:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001812:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001816:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800181a:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800181e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001820:	d143      	bne.n	80018aa <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001826:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001828:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800182c:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800182e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001830:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001832:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001842:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001844:	483d      	ldr	r0, [pc, #244]	@ (800193c <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001846:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800184a:	f002 f921 	bl	8003a90 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800184e:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001852:	a905      	add	r1, sp, #20
 8001854:	4839      	ldr	r0, [pc, #228]	@ (800193c <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001856:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001858:	f002 f91a 	bl	8003a90 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800185c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800185e:	4632      	mov	r2, r6
 8001860:	210f      	movs	r1, #15
 8001862:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001868:	6423      	str	r3, [r4, #64]	@ 0x40
 800186a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800186c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001874:	6a23      	ldr	r3, [r4, #32]
 8001876:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800187a:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800187c:	6a23      	ldr	r3, [r4, #32]
 800187e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001882:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001884:	f001 fc96 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001888:	2048      	movs	r0, #72	@ 0x48
 800188a:	f001 fcc5 	bl	8003218 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800188e:	2049      	movs	r0, #73	@ 0x49
 8001890:	4632      	mov	r2, r6
 8001892:	210f      	movs	r1, #15
 8001894:	f001 fc8e 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001898:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800189a:	f001 fcbd 	bl	8003218 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 800189e:	4628      	mov	r0, r5
  }
}
 80018a0:	b00a      	add	sp, #40	@ 0x28
 80018a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 80018a6:	f002 bb2b 	b.w	8003f00 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018aa:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80018b2:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018b4:	4822      	ldr	r0, [pc, #136]	@ (8001940 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80018b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80018ba:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	9303      	str	r3, [sp, #12]
 80018c2:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80018ca:	2304      	movs	r3, #4
 80018cc:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018d0:	a905      	add	r1, sp, #20
 80018d2:	f002 f8dd 	bl	8003a90 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80018d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018da:	a905      	add	r1, sp, #20
 80018dc:	4818      	ldr	r0, [pc, #96]	@ (8001940 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80018de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018e0:	f002 f8d6 	bl	8003a90 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80018e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80018e6:	4632      	mov	r2, r6
 80018e8:	210f      	movs	r1, #15
 80018ea:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018f0:	6423      	str	r3, [r4, #64]	@ 0x40
 80018f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f8:	9304      	str	r3, [sp, #16]
 80018fa:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80018fc:	6a23      	ldr	r3, [r4, #32]
 80018fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001902:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001904:	6a23      	ldr	r3, [r4, #32]
 8001906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800190a:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800190c:	f001 fc52 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001910:	201f      	movs	r0, #31
 8001912:	f001 fc81 	bl	8003218 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001916:	2020      	movs	r0, #32
 8001918:	4632      	mov	r2, r6
 800191a:	210f      	movs	r1, #15
 800191c:	f001 fc4a 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001920:	2020      	movs	r0, #32
 8001922:	e7ba      	b.n	800189a <I2Cx_Init+0xb2>
}
 8001924:	b00a      	add	sp, #40	@ 0x28
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	20000444 	.word	0x20000444
 800192c:	40023800 	.word	0x40023800
 8001930:	40005c00 	.word	0x40005c00
 8001934:	40005400 	.word	0x40005400
 8001938:	40912732 	.word	0x40912732
 800193c:	40021c00 	.word	0x40021c00
 8001940:	40020400 	.word	0x40020400

08001944 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001944:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001946:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 800194a:	b085      	sub	sp, #20
 800194c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800194e:	9402      	str	r4, [sp, #8]
 8001950:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001954:	9401      	str	r4, [sp, #4]
 8001956:	9c08      	ldr	r4, [sp, #32]
 8001958:	9400      	str	r4, [sp, #0]
 800195a:	f002 fb41 	bl	8003fe0 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800195e:	4604      	mov	r4, r0
 8001960:	b128      	cbz	r0, 800196e <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001962:	4628      	mov	r0, r5
 8001964:	f002 fb22 	bl	8003fac <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001968:	4628      	mov	r0, r5
 800196a:	f7ff ff3d 	bl	80017e8 <I2Cx_Init>
}
 800196e:	4620      	mov	r0, r4
 8001970:	b005      	add	sp, #20
 8001972:	bd30      	pop	{r4, r5, pc}

08001974 <I2Cx_ReadMultiple>:
{
 8001974:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001976:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 800197a:	b085      	sub	sp, #20
 800197c:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800197e:	9402      	str	r4, [sp, #8]
 8001980:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001984:	9401      	str	r4, [sp, #4]
 8001986:	9c08      	ldr	r4, [sp, #32]
 8001988:	9400      	str	r4, [sp, #0]
 800198a:	f002 fc03 	bl	8004194 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800198e:	4604      	mov	r4, r0
 8001990:	b128      	cbz	r0, 800199e <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8001992:	4628      	mov	r0, r5
 8001994:	f002 fb0a 	bl	8003fac <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001998:	4628      	mov	r0, r5
 800199a:	f7ff ff25 	bl	80017e8 <I2Cx_Init>
}
 800199e:	4620      	mov	r0, r4
 80019a0:	b005      	add	sp, #20
 80019a2:	bd30      	pop	{r4, r5, pc}

080019a4 <BSP_LED_Init>:
{
 80019a4:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 80019a6:	4604      	mov	r4, r0
{
 80019a8:	b087      	sub	sp, #28
  if (Led == LED1)
 80019aa:	b9c8      	cbnz	r0, 80019e0 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 80019ac:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80019b0:	a901      	add	r1, sp, #4
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 80019b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80019cc:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80019d2:	f002 f85d 	bl	8003a90 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 80019d6:	4622      	mov	r2, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <BSP_LED_Init+0x44>)
 80019dc:	f002 f942 	bl	8003c64 <HAL_GPIO_WritePin>
}
 80019e0:	b007      	add	sp, #28
 80019e2:	bd30      	pop	{r4, r5, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40022000 	.word	0x40022000

080019ec <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 80019ec:	b918      	cbnz	r0, 80019f6 <BSP_LED_Toggle+0xa>
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 80019ee:	2102      	movs	r1, #2
 80019f0:	4801      	ldr	r0, [pc, #4]	@ (80019f8 <BSP_LED_Toggle+0xc>)
 80019f2:	f002 b93c 	b.w	8003c6e <HAL_GPIO_TogglePin>
}
 80019f6:	4770      	bx	lr
 80019f8:	40022000 	.word	0x40022000

080019fc <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <BSP_PB_Init+0x98>)
 80019fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8001a04:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8001a08:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a12:	b990      	cbnz	r0, 8001a3a <BSP_PB_Init+0x3e>
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a18:	b9b9      	cbnz	r1, 8001a4a <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001a1c:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001a1e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a22:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a26:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a28:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a2a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <BSP_PB_Init+0xa0>)
 8001a2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001a32:	f002 f82d 	bl	8003a90 <HAL_GPIO_Init>
}
 8001a36:	b008      	add	sp, #32
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a3a:	2801      	cmp	r0, #1
 8001a3c:	d102      	bne.n	8001a44 <BSP_PB_Init+0x48>
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	9b01      	ldr	r3, [sp, #4]
 8001a42:	e7e9      	b.n	8001a18 <BSP_PB_Init+0x1c>
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	9b02      	ldr	r3, [sp, #8]
 8001a48:	e7e6      	b.n	8001a18 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001a4a:	2901      	cmp	r1, #1
 8001a4c:	d1f3      	bne.n	8001a36 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001a4e:	4d12      	ldr	r5, [pc, #72]	@ (8001a98 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a50:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a52:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001a54:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001a58:	42b4      	cmp	r4, r6
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001a5a:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001a5e:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a60:	f04f 0302 	mov.w	r3, #2
 8001a64:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001a68:	bf0c      	ite	eq
 8001a6a:	f44f 1388 	moveq.w	r3, #1114112	@ 0x110000
 8001a6e:	f44f 1304 	movne.w	r3, #2162688	@ 0x210000
 8001a72:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a74:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <BSP_PB_Init+0xa0>)
 8001a76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001a7a:	f002 f809 	bl	8003a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001a7e:	f995 4006 	ldrsb.w	r4, [r5, #6]
 8001a82:	4632      	mov	r2, r6
 8001a84:	210f      	movs	r1, #15
 8001a86:	4620      	mov	r0, r4
 8001a88:	f001 fb94 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f001 fbc3 	bl	8003218 <HAL_NVIC_EnableIRQ>
}
 8001a92:	e7d0      	b.n	8001a36 <BSP_PB_Init+0x3a>
 8001a94:	40023800 	.word	0x40023800
 8001a98:	0800a460 	.word	0x0800a460
 8001a9c:	20000034 	.word	0x20000034

08001aa0 <BSP_PB_GetState>:
{
 8001aa0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001aa2:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <BSP_PB_GetState+0x14>)
 8001aa4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <BSP_PB_GetState+0x18>)
 8001aaa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001aae:	f002 f8d3 	bl	8003c58 <HAL_GPIO_ReadPin>
}
 8001ab2:	bd08      	pop	{r3, pc}
 8001ab4:	0800a460 	.word	0x0800a460
 8001ab8:	20000034 	.word	0x20000034

08001abc <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8001abc:	4801      	ldr	r0, [pc, #4]	@ (8001ac4 <AUDIO_IO_Init+0x8>)
 8001abe:	f7ff be93 	b.w	80017e8 <I2Cx_Init>
 8001ac2:	bf00      	nop
 8001ac4:	20000444 	.word	0x20000444

08001ac8 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8001ac8:	4770      	bx	lr
	...

08001acc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001ace:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001ad0:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001ad2:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001ad6:	f10d 020e 	add.w	r2, sp, #14
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	9200      	str	r2, [sp, #0]
 8001ade:	460a      	mov	r2, r1
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <AUDIO_IO_Write+0x24>)
 8001ae4:	f7ff ff2e 	bl	8001944 <I2Cx_WriteMultiple>
}
 8001ae8:	b005      	add	sp, #20
 8001aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aee:	bf00      	nop
 8001af0:	20000444 	.word	0x20000444

08001af4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001af4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001af6:	2300      	movs	r3, #0
{
 8001af8:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001afa:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 8001afe:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001b02:	2302      	movs	r3, #2
 8001b04:	9100      	str	r1, [sp, #0]
 8001b06:	4601      	mov	r1, r0
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <AUDIO_IO_Read+0x2c>)
 8001b0c:	f7ff ff32 	bl	8001974 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001b10:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001b14:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8001b16:	b280      	uxth	r0, r0
 8001b18:	b005      	add	sp, #20
 8001b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b1e:	bf00      	nop
 8001b20:	20000444 	.word	0x20000444

08001b24 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001b24:	f001 b8ee 	b.w	8002d04 <HAL_Delay>

08001b28 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <SAIx_Out_DeInit+0x1c>)
 8001b2e:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001b30:	6853      	ldr	r3, [r2, #4]
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b36:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001b38:	f003 bc9d 	b.w	8005476 <HAL_SAI_DeInit>
 8001b3c:	40015c04 	.word	0x40015c04
 8001b40:	40015c00 	.word	0x40015c00
 8001b44:	200004ec 	.word	0x200004ec

08001b48 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b4a:	4a06      	ldr	r2, [pc, #24]	@ (8001b64 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b4c:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <SAIx_In_DeInit+0x20>)
 8001b4e:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b52:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b58:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8001b5a:	f003 bc8c 	b.w	8005476 <HAL_SAI_DeInit>
 8001b5e:	bf00      	nop
 8001b60:	40015c24 	.word	0x40015c24
 8001b64:	40015c00 	.word	0x40015c00
 8001b68:	200004ec 	.word	0x200004ec

08001b6c <SAIx_In_Init>:
{
 8001b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b70:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001b72:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b74:	4c35      	ldr	r4, [pc, #212]	@ (8001c4c <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b76:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001b78:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8001c54 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b7c:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001b80:	6023      	str	r3, [r4, #0]
{
 8001b82:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001b84:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b88:	f44f 2a80 	mov.w	sl, #262144	@ 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001b8c:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b94:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b98:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001b9a:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001b9c:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001b9e:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8001ba0:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001ba2:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001ba4:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ba6:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ba8:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001baa:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001bac:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bae:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bb0:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb8:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001bba:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001bbc:	e9c4 9117 	strd	r9, r1, [r4, #92]	@ 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001bc0:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bc4:	e9c4 b512 	strd	fp, r5, [r4, #72]	@ 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001bc8:	e9c4 a514 	strd	sl, r5, [r4, #80]	@ 0x50
  HAL_SAI_Init(&haudio_out_sai);
 8001bcc:	f003 fb76 	bl	80052bc <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001bd0:	481f      	ldr	r0, [pc, #124]	@ (8001c50 <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001bd2:	2380      	movs	r3, #128	@ 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001bd4:	2240      	movs	r2, #64	@ 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001bd6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001bda:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001bde:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001be0:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8001be4:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001be8:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001bea:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bee:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  HAL_SAI_Init(&haudio_in_sai);
 8001bf2:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001bf6:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bfa:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001bfe:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8001c02:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8001c06:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001c0a:	f8c4 609c 	str.w	r6, [r4, #156]	@ 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001c0e:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c12:	e9c4 352e 	strd	r3, r5, [r4, #184]	@ 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001c16:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c18:	e9c4 b533 	strd	fp, r5, [r4, #204]	@ 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001c1c:	e9c4 2331 	strd	r2, r3, [r4, #196]	@ 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001c20:	e9c4 a535 	strd	sl, r5, [r4, #212]	@ 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8001c24:	e9c4 5937 	strd	r5, r9, [r4, #220]	@ 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8001c28:	f003 fb48 	bl	80052bc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	ea43 030b 	orr.w	r3, r3, fp
 8001c34:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8001c36:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	ea43 030b 	orr.w	r3, r3, fp
 8001c40:	6013      	str	r3, [r2, #0]
}
 8001c42:	b003      	add	sp, #12
 8001c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c48:	40015c04 	.word	0x40015c04
 8001c4c:	200004ec 	.word	0x200004ec
 8001c50:	40015c24 	.word	0x40015c24
 8001c54:	40015c00 	.word	0x40015c00

08001c58 <BSP_AUDIO_OUT_Play>:
{
 8001c58:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <BSP_AUDIO_OUT_Play+0x38>)
{
 8001c5c:	4605      	mov	r5, r0
 8001c5e:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001c60:	b28a      	uxth	r2, r1
 8001c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c66:	4601      	mov	r1, r0
 8001c68:	2034      	movs	r0, #52	@ 0x34
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4798      	blx	r3
 8001c6e:	b960      	cbnz	r0, 8001c8a <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001c70:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 8001c74:	4629      	mov	r1, r5
 8001c76:	4806      	ldr	r0, [pc, #24]	@ (8001c90 <BSP_AUDIO_OUT_Play+0x38>)
 8001c78:	bf34      	ite	cc
 8001c7a:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001c7e:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 8001c82:	f003 fc5f 	bl	8005544 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8001c86:	2000      	movs	r0, #0
}
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	e7fc      	b.n	8001c88 <BSP_AUDIO_OUT_Play+0x30>
 8001c8e:	bf00      	nop
 8001c90:	200004ec 	.word	0x200004ec

08001c94 <BSP_AUDIO_OUT_Stop>:
{
 8001c94:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001c96:	4d0a      	ldr	r5, [pc, #40]	@ (8001cc0 <BSP_AUDIO_OUT_Stop+0x2c>)
{
 8001c98:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f003 fc09 	bl	80054b2 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001ca0:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	2034      	movs	r0, #52	@ 0x34
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4798      	blx	r3
 8001cac:	b930      	cbnz	r0, 8001cbc <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8001cae:	2c01      	cmp	r4, #1
 8001cb0:	d102      	bne.n	8001cb8 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f001 f826 	bl	8002d04 <HAL_Delay>
    return AUDIO_OK;
 8001cb8:	2000      	movs	r0, #0
}
 8001cba:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e7fc      	b.n	8001cba <BSP_AUDIO_OUT_Stop+0x26>
 8001cc0:	200004ec 	.word	0x200004ec

08001cc4 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 8001cc4:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001cc6:	4c08      	ldr	r4, [pc, #32]	@ (8001ce8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8001cd2:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	f003 faf1 	bl	80052bc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001cda:	6822      	ldr	r2, [r4, #0]
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200004ec 	.word	0x200004ec

08001cec <HAL_SAI_TxCpltCallback>:
{
 8001cec:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001cee:	f003 ff3d 	bl	8005b6c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001cf2:	bd08      	pop	{r3, pc}

08001cf4 <HAL_SAI_TxHalfCpltCallback>:
{
 8001cf4:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001cf6:	f003 ff43 	bl	8005b80 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001cfa:	bd08      	pop	{r3, pc}

08001cfc <BSP_AUDIO_OUT_MspInit>:
{ 
 8001cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001d00:	4c4d      	ldr	r4, [pc, #308]	@ (8001e38 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 8001d02:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d04:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d08:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001d0a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d0c:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001d0e:	f04f 080a 	mov.w	r8, #10
{ 
 8001d12:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001d14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001d18:	a905      	add	r1, sp, #20
 8001d1a:	4848      	ldr	r0, [pc, #288]	@ (8001e3c <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001d1c:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001d20:	6463      	str	r3, [r4, #68]	@ 0x44
 8001d22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001d2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001d3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d44:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001d50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001d5a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d66:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d68:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d6c:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001d70:	f001 fe8e 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001d74:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001d76:	a905      	add	r1, sp, #20
 8001d78:	4830      	ldr	r0, [pc, #192]	@ (8001e3c <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001d7a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d7e:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d82:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001d86:	f001 fe83 	bl	8003a90 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001d8a:	a905      	add	r1, sp, #20
 8001d8c:	482b      	ldr	r0, [pc, #172]	@ (8001e3c <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001d8e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d92:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001d96:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001d9a:	f001 fe79 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001d9e:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001da0:	a905      	add	r1, sp, #20
 8001da2:	4826      	ldr	r0, [pc, #152]	@ (8001e3c <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001da4:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001da8:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001dac:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001db0:	f001 fe6e 	bl	8003a90 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001db4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001db6:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001db8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8001dbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc4:	9304      	str	r3, [sp, #16]
 8001dc6:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <BSP_AUDIO_OUT_MspInit+0x144>)
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d129      	bne.n	8001e22 <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <BSP_AUDIO_OUT_MspInit+0x148>)
 8001dd0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001dd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001dd8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001ddc:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001de0:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001de4:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001de8:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001dec:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001df0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df4:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001df8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfc:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001e00:	2204      	movs	r2, #4
 8001e02:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e06:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001e0c:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001e0e:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001e10:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e14:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001e18:	f001 fafe 	bl	8003418 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f001 fa7d 	bl	800331c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210e      	movs	r1, #14
 8001e26:	203c      	movs	r0, #60	@ 0x3c
 8001e28:	f001 f9c4 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001e2c:	203c      	movs	r0, #60	@ 0x3c
 8001e2e:	f001 f9f3 	bl	8003218 <HAL_NVIC_EnableIRQ>
}
 8001e32:	b00a      	add	sp, #40	@ 0x28
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40015c04 	.word	0x40015c04
 8001e44:	200004ec 	.word	0x200004ec
 8001e48:	40026470 	.word	0x40026470

08001e4c <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	b0a2      	sub	sp, #136	@ 0x88
 8001e50:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001e52:	a801      	add	r0, sp, #4
 8001e54:	f003 f8ea 	bl	800502c <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001e58:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	d007      	beq.n	8001e70 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001e60:	f245 6322 	movw	r3, #22050	@ 0x5622
 8001e64:	429c      	cmp	r4, r3
 8001e66:	d003      	beq.n	8001e70 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001e68:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001e6c:	429c      	cmp	r4, r3
 8001e6e:	d111      	bne.n	8001e94 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001e70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e74:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e7a:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001e7c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8001e80:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001e86:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001e88:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001e8a:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001e8c:	f002 fe44 	bl	8004b18 <HAL_RCCEx_PeriphCLKConfig>
}
 8001e90:	b022      	add	sp, #136	@ 0x88
 8001e92:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001e94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e98:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e9e:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001ea0:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8001ea4:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e7ec      	b.n	8001e88 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08001eb0 <BSP_AUDIO_OUT_Init>:
{ 
 8001eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb4:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001eb6:	4c2f      	ldr	r4, [pc, #188]	@ (8001f74 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 8001eb8:	4681      	mov	r9, r0
 8001eba:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ebc:	4d2e      	ldr	r5, [pc, #184]	@ (8001f78 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 8001ebe:	f7ff fe33 	bl	8001b28 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff ffc0 	bl	8001e4c <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001ecc:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ece:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001ed0:	f003 fc54 	bl	800577c <HAL_SAI_GetState>
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	b910      	cbnz	r0, 8001ede <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff ff0f 	bl	8001cfc <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ede:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001ee0:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ee2:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ee4:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ee6:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ee8:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001ef0:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8001f80 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ef4:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001ef6:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001ef8:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001efa:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001efc:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001efe:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f00:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001f02:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f04:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001f06:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f08:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f0a:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001f0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f12:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001f1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f1e:	e9c4 3512 	strd	r3, r5, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001f22:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001f26:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8001f30:	f003 f9c4 	bl	80052bc <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001f34:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f36:	2034      	movs	r0, #52	@ 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f44:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001f46:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001f4a:	4298      	cmp	r0, r3
 8001f4c:	d10f      	bne.n	8001f6e <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001f4e:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8001f52:	2034      	movs	r0, #52	@ 0x34
 8001f54:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8001f56:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	f8d8 4000 	ldr.w	r4, [r8]
 8001f60:	4652      	mov	r2, sl
 8001f62:	4649      	mov	r1, r9
 8001f64:	2034      	movs	r0, #52	@ 0x34
 8001f66:	47a0      	blx	r4
    ret = AUDIO_OK;
 8001f68:	4628      	mov	r0, r5
}
 8001f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 8001f6e:	4630      	mov	r0, r6
 8001f70:	e7fb      	b.n	8001f6a <BSP_AUDIO_OUT_Init+0xba>
 8001f72:	bf00      	nop
 8001f74:	200004ec 	.word	0x200004ec
 8001f78:	40015c04 	.word	0x40015c04
 8001f7c:	40015c00 	.word	0x40015c00
 8001f80:	20000004 	.word	0x20000004

08001f84 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001f84:	b28a      	uxth	r2, r1
 8001f86:	4601      	mov	r1, r0
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <BSP_AUDIO_IN_Record+0x10>)
{
 8001f8a:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001f8c:	f003 fb46 	bl	800561c <HAL_SAI_Receive_DMA>
}
 8001f90:	2000      	movs	r0, #0
 8001f92:	bd08      	pop	{r3, pc}
 8001f94:	20000570 	.word	0x20000570

08001f98 <BSP_AUDIO_IN_Stop>:
{
 8001f98:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001f9a:	4d0b      	ldr	r5, [pc, #44]	@ (8001fc8 <BSP_AUDIO_IN_Stop+0x30>)
{
 8001f9c:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001f9e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8001fa2:	f003 fa86 	bl	80054b2 <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001fa6:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8001faa:	4621      	mov	r1, r4
 8001fac:	2034      	movs	r0, #52	@ 0x34
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4798      	blx	r3
 8001fb2:	b930      	cbnz	r0, 8001fc2 <BSP_AUDIO_IN_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 8001fb4:	2c01      	cmp	r4, #1
 8001fb6:	d102      	bne.n	8001fbe <BSP_AUDIO_IN_Stop+0x26>
      HAL_Delay(1);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f000 fea3 	bl	8002d04 <HAL_Delay>
    return AUDIO_OK;
 8001fbe:	2000      	movs	r0, #0
}
 8001fc0:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	e7fc      	b.n	8001fc0 <BSP_AUDIO_IN_Stop+0x28>
 8001fc6:	bf00      	nop
 8001fc8:	200004ec 	.word	0x200004ec

08001fcc <HAL_SAI_RxCpltCallback>:
{
 8001fcc:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001fce:	f003 ff65 	bl	8005e9c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001fd2:	bd08      	pop	{r3, pc}

08001fd4 <HAL_SAI_RxHalfCpltCallback>:
{
 8001fd4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001fd6:	f003 ff67 	bl	8005ea8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001fda:	bd08      	pop	{r3, pc}

08001fdc <HAL_SAI_ErrorCallback>:
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001fde:	480a      	ldr	r0, [pc, #40]	@ (8002008 <HAL_SAI_ErrorCallback+0x2c>)
 8001fe0:	f003 fbcc 	bl	800577c <HAL_SAI_GetState>
 8001fe4:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001fe6:	4809      	ldr	r0, [pc, #36]	@ (800200c <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001fe8:	f005 05ef 	and.w	r5, r5, #239	@ 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001fec:	f003 fbc6 	bl	800577c <HAL_SAI_GetState>
 8001ff0:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001ff2:	2d02      	cmp	r5, #2
 8001ff4:	d101      	bne.n	8001ffa <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 8001ff6:	f003 fdcf 	bl	8005b98 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001ffa:	f004 04df 	and.w	r4, r4, #223	@ 0xdf
 8001ffe:	2c02      	cmp	r4, #2
 8002000:	d101      	bne.n	8002006 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 8002002:	f003 ff57 	bl	8005eb4 <BSP_AUDIO_IN_Error_CallBack>
}
 8002006:	bd38      	pop	{r3, r4, r5, pc}
 8002008:	200004ec 	.word	0x200004ec
 800200c:	20000570 	.word	0x20000570

08002010 <BSP_AUDIO_IN_MspInit>:
{
 8002010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002014:	4c3d      	ldr	r4, [pc, #244]	@ (800210c <BSP_AUDIO_IN_MspInit+0xfc>)
{
 8002016:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002018:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 800201a:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 800201c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800201e:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 8002022:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002024:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002026:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800202a:	4839      	ldr	r0, [pc, #228]	@ (8002110 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 800202c:	6463      	str	r3, [r4, #68]	@ 0x44
 800202e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002030:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8002038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800203a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800203e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002040:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800204a:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800204c:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002050:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002052:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002056:	f001 fd1b 	bl	8003a90 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 800205a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800205c:	a905      	add	r1, sp, #20
 800205e:	482d      	ldr	r0, [pc, #180]	@ (8002114 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 8002060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002064:	6323      	str	r3, [r4, #48]	@ 0x30
 8002066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206c:	9303      	str	r3, [sp, #12]
 800206e:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002074:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002078:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800207c:	f001 fd08 	bl	8003a90 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002080:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002082:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002084:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002088:	6323      	str	r3, [r4, #48]	@ 0x30
 800208a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800208c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002090:	9304      	str	r3, [sp, #16]
 8002092:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <BSP_AUDIO_IN_MspInit+0x108>)
 8002096:	429a      	cmp	r2, r3
 8002098:	d125      	bne.n	80020e6 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800209c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80020a4:	f44f 7080 	mov.w	r0, #256	@ 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80020a8:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80020ac:	f8c3 5190 	str.w	r5, [r3, #400]	@ 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80020b0:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80020b4:	6734      	str	r4, [r6, #112]	@ 0x70
 80020b6:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80020ba:	e9c3 1260 	strd	r1, r2, [r3, #384]	@ 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80020be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020c2:	e9c3 0262 	strd	r0, r2, [r3, #392]	@ 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80020c6:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 80020c8:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80020ca:	e9c3 2565 	strd	r2, r5, [r3, #404]	@ 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80020ce:	4a14      	ldr	r2, [pc, #80]	@ (8002120 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80020d0:	e9c3 555c 	strd	r5, r5, [r3, #368]	@ 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80020d4:	e9c3 585e 	strd	r5, r8, [r3, #376]	@ 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80020d8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
 80020dc:	f001 f99c 	bl	8003418 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f001 f91b 	bl	800331c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	210f      	movs	r1, #15
 80020ea:	2046      	movs	r0, #70	@ 0x46
 80020ec:	f001 f862 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80020f0:	2046      	movs	r0, #70	@ 0x46
 80020f2:	f001 f891 	bl	8003218 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	210f      	movs	r1, #15
 80020fa:	2028      	movs	r0, #40	@ 0x28
 80020fc:	f001 f85a 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002100:	2028      	movs	r0, #40	@ 0x28
 8002102:	f001 f889 	bl	8003218 <HAL_NVIC_EnableIRQ>
}
 8002106:	b00a      	add	sp, #40	@ 0x28
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40021800 	.word	0x40021800
 8002114:	40021c00 	.word	0x40021c00
 8002118:	40015c24 	.word	0x40015c24
 800211c:	200004ec 	.word	0x200004ec
 8002120:	400264b8 	.word	0x400264b8

08002124 <BSP_AUDIO_IN_InitEx>:
{
 8002124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8002126:	f420 7380 	bic.w	r3, r0, #256	@ 0x100
{
 800212a:	4604      	mov	r4, r0
 800212c:	460d      	mov	r5, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 800212e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002132:	d001      	beq.n	8002138 <BSP_AUDIO_IN_InitEx+0x14>
    ret = AUDIO_ERROR;
 8002134:	2001      	movs	r0, #1
}
 8002136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002138:	4e1c      	ldr	r6, [pc, #112]	@ (80021ac <BSP_AUDIO_IN_InitEx+0x88>)
    SAIx_In_DeInit();
 800213a:	f7ff fd05 	bl	8001b48 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800213e:	2200      	movs	r2, #0
 8002140:	4629      	mov	r1, r5
 8002142:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8002146:	f7ff fe81 	bl	8001e4c <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800214a:	4630      	mov	r0, r6
 800214c:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <BSP_AUDIO_IN_InitEx+0x8c>)
 800214e:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002152:	f003 fb13 	bl	800577c <HAL_SAI_GetState>
 8002156:	4607      	mov	r7, r0
 8002158:	b948      	cbnz	r0, 800216e <BSP_AUDIO_IN_InitEx+0x4a>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 800215a:	4601      	mov	r1, r0
 800215c:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8002160:	f7ff fdcc 	bl	8001cfc <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002164:	4639      	mov	r1, r7
 8002166:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 800216a:	f7ff ff51 	bl	8002010 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800216e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002172:	4f10      	ldr	r7, [pc, #64]	@ (80021b4 <BSP_AUDIO_IN_InitEx+0x90>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8002174:	462a      	mov	r2, r5
 8002176:	f04f 0001 	mov.w	r0, #1
 800217a:	bf0c      	ite	eq
 800217c:	210a      	moveq	r1, #10
 800217e:	2105      	movne	r1, #5
 8002180:	f7ff fcf4 	bl	8001b6c <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2034      	movs	r0, #52	@ 0x34
 8002188:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 800218a:	f648 1394 	movw	r3, #35220	@ 0x8994
 800218e:	4298      	cmp	r0, r3
 8002190:	d1d0      	bne.n	8002134 <BSP_AUDIO_IN_InitEx+0x10>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002194:	2034      	movs	r0, #52	@ 0x34
 8002196:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8002198:	f8c6 7108 	str.w	r7, [r6, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 800219c:	462b      	mov	r3, r5
 800219e:	683e      	ldr	r6, [r7, #0]
 80021a0:	2264      	movs	r2, #100	@ 0x64
 80021a2:	4621      	mov	r1, r4
 80021a4:	2034      	movs	r0, #52	@ 0x34
 80021a6:	47b0      	blx	r6
      ret = AUDIO_OK;
 80021a8:	2000      	movs	r0, #0
 80021aa:	e7c4      	b.n	8002136 <BSP_AUDIO_IN_InitEx+0x12>
 80021ac:	200004ec 	.word	0x200004ec
 80021b0:	40015c24 	.word	0x40015c24
 80021b4:	20000004 	.word	0x20000004

080021b8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80021b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80021bc:	4c1a      	ldr	r4, [pc, #104]	@ (8002228 <LL_FillBuffer+0x70>)
{
 80021be:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80021c0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 80021c4:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021c6:	2234      	movs	r2, #52	@ 0x34
{
 80021c8:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80021ca:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80021cc:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 80021d2:	460e      	mov	r6, r1
 80021d4:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021d8:	fb02 4303 	mla	r3, r2, r3, r4
 80021dc:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80021e0:	1eab      	subs	r3, r5, #2
 80021e2:	425d      	negs	r5, r3
 80021e4:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80021e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80021e8:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80021ea:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <LL_FillBuffer+0x74>)
 80021ee:	60a5      	str	r5, [r4, #8]
 80021f0:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80021f2:	f001 fab8 	bl	8003766 <HAL_DMA2D_Init>
 80021f6:	b9a0      	cbnz	r0, 8002222 <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80021f8:	4649      	mov	r1, r9
 80021fa:	4620      	mov	r0, r4
 80021fc:	f001 fc02 	bl	8003a04 <HAL_DMA2D_ConfigLayer>
 8002200:	b978      	cbnz	r0, 8002222 <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002202:	463b      	mov	r3, r7
 8002204:	4632      	mov	r2, r6
 8002206:	4651      	mov	r1, sl
 8002208:	4620      	mov	r0, r4
 800220a:	f8cd 8000 	str.w	r8, [sp]
 800220e:	f001 fad6 	bl	80037be <HAL_DMA2D_Start>
 8002212:	b930      	cbnz	r0, 8002222 <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002214:	210a      	movs	r1, #10
 8002216:	4620      	mov	r0, r4
      }
    }
  } 
}
 8002218:	b002      	add	sp, #8
 800221a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800221e:	f001 bae8 	b.w	80037f2 <HAL_DMA2D_PollForTransfer>
}
 8002222:	b002      	add	sp, #8
 8002224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002228:	20000764 	.word	0x20000764
 800222c:	4002b000 	.word	0x4002b000

08002230 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <BSP_LCD_GetXSize+0x14>)
 8002232:	2134      	movs	r1, #52	@ 0x34
 8002234:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002238:	fb01 3302 	mla	r3, r1, r2, r3
}
 800223c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000764 	.word	0x20000764

08002248 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <BSP_LCD_GetYSize+0x14>)
 800224a:	2134      	movs	r1, #52	@ 0x34
 800224c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002250:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002254:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000764 	.word	0x20000764

08002260 <BSP_LCD_LayerDefaultInit>:
{     
 8002260:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8002262:	2400      	movs	r4, #0
{     
 8002264:	b08e      	sub	sp, #56	@ 0x38
 8002266:	460e      	mov	r6, r1
 8002268:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 800226a:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800226c:	f7ff ffe0 	bl	8002230 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8002270:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002274:	f7ff ffe8 	bl	8002248 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8002278:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800227a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 800227e:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 8002282:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8002286:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 8002288:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800228c:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002290:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002292:	4c0f      	ldr	r4, [pc, #60]	@ (80022d0 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002294:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002298:	f7ff ffca 	bl	8002230 <BSP_LCD_GetXSize>
 800229c:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800229e:	f7ff ffd3 	bl	8002248 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80022a2:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80022a4:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80022a6:	a901      	add	r1, sp, #4
 80022a8:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80022ac:	f002 f946 	bl	800453c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80022b0:	230c      	movs	r3, #12
 80022b2:	fb03 4005 	mla	r0, r3, r5, r4
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <BSP_LCD_LayerDefaultInit+0x74>)
 80022c0:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80022c4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80022c8:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 80022cc:	b00e      	add	sp, #56	@ 0x38
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
 80022d0:	20000764 	.word	0x20000764
 80022d4:	2000004c 	.word	0x2000004c

080022d8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80022d8:	4b01      	ldr	r3, [pc, #4]	@ (80022e0 <BSP_LCD_SelectLayer+0x8>)
 80022da:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 80022de:	4770      	bx	lr
 80022e0:	20000764 	.word	0x20000764

080022e4 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <BSP_LCD_SetTextColor+0x14>)
 80022e6:	210c      	movs	r1, #12
 80022e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80022ec:	fb01 3302 	mla	r3, r1, r2, r3
 80022f0:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000764 	.word	0x20000764

080022fc <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <BSP_LCD_SetBackColor+0x14>)
 80022fe:	210c      	movs	r1, #12
 8002300:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002304:	fb01 3302 	mla	r3, r1, r2, r3
 8002308:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000764 	.word	0x20000764

08002314 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <BSP_LCD_SetFont+0x14>)
 8002316:	210c      	movs	r1, #12
 8002318:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800231c:	fb01 3302 	mla	r3, r1, r2, r3
 8002320:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000764 	.word	0x20000764

0800232c <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <BSP_LCD_GetFont+0x14>)
 800232e:	210c      	movs	r1, #12
 8002330:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002334:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002338:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000764 	.word	0x20000764

08002344 <BSP_LCD_Clear>:
{ 
 8002344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002346:	4c0c      	ldr	r4, [pc, #48]	@ (8002378 <BSP_LCD_Clear+0x34>)
{ 
 8002348:	4606      	mov	r6, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800234a:	f7ff ff71 	bl	8002230 <BSP_LCD_GetXSize>
 800234e:	4605      	mov	r5, r0
 8002350:	f8d4 70e8 	ldr.w	r7, [r4, #232]	@ 0xe8
 8002354:	f7ff ff78 	bl	8002248 <BSP_LCD_GetYSize>
 8002358:	2234      	movs	r2, #52	@ 0x34
 800235a:	4603      	mov	r3, r0
 800235c:	9601      	str	r6, [sp, #4]
 800235e:	4638      	mov	r0, r7
 8002360:	fb02 4407 	mla	r4, r2, r7, r4
 8002364:	2200      	movs	r2, #0
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	462a      	mov	r2, r5
 800236a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800236e:	f7ff ff23 	bl	80021b8 <LL_FillBuffer>
}
 8002372:	b003      	add	sp, #12
 8002374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002376:	bf00      	nop
 8002378:	20000764 	.word	0x20000764

0800237c <BSP_LCD_DrawHLine>:
{
 800237c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002380:	4e14      	ldr	r6, [pc, #80]	@ (80023d4 <BSP_LCD_DrawHLine+0x58>)
 8002382:	2334      	movs	r3, #52	@ 0x34
{
 8002384:	4689      	mov	r9, r1
 8002386:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002388:	f8d6 70e8 	ldr.w	r7, [r6, #232]	@ 0xe8
{
 800238c:	4690      	mov	r8, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800238e:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002392:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002396:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800239a:	f7ff ff49 	bl	8002230 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800239e:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023a0:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023a4:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80023a8:	4642      	mov	r2, r8
 80023aa:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023ae:	bf08      	it	eq
 80023b0:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80023b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023b8:	bf18      	it	ne
 80023ba:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80023be:	4638      	mov	r0, r7
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	2300      	movs	r3, #0
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	f7ff fef6 	bl	80021b8 <LL_FillBuffer>
}
 80023cc:	b002      	add	sp, #8
 80023ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d2:	bf00      	nop
 80023d4:	20000764 	.word	0x20000764

080023d8 <BSP_LCD_DrawVLine>:
{
 80023d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023dc:	4d15      	ldr	r5, [pc, #84]	@ (8002434 <BSP_LCD_DrawVLine+0x5c>)
 80023de:	2334      	movs	r3, #52	@ 0x34
{
 80023e0:	4617      	mov	r7, r2
 80023e2:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023e4:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 80023e8:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023ea:	fb03 5306 	mla	r3, r3, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023ee:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023f2:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023f6:	f7ff ff1b 	bl	8002230 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80023fa:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023fc:	fb00 8109 	mla	r1, r0, r9, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002400:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002404:	f100 30ff 	add.w	r0, r0, #4294967295
 8002408:	fb03 5506 	mla	r5, r3, r6, r5
 800240c:	f04f 0201 	mov.w	r2, #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002410:	bf08      	it	eq
 8002412:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002416:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800241a:	bf18      	it	ne
 800241c:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	4630      	mov	r0, r6
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	463b      	mov	r3, r7
 8002428:	f7ff fec6 	bl	80021b8 <LL_FillBuffer>
}
 800242c:	b002      	add	sp, #8
 800242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002432:	bf00      	nop
 8002434:	20000764 	.word	0x20000764

08002438 <BSP_LCD_DrawRect>:
{
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	461e      	mov	r6, r3
 800243c:	460d      	mov	r5, r1
 800243e:	4604      	mov	r4, r0
 8002440:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8002442:	f7ff ff9b 	bl	800237c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002446:	19a9      	adds	r1, r5, r6
 8002448:	463a      	mov	r2, r7
 800244a:	4620      	mov	r0, r4
 800244c:	b289      	uxth	r1, r1
 800244e:	f7ff ff95 	bl	800237c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8002452:	4632      	mov	r2, r6
 8002454:	4629      	mov	r1, r5
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff ffbe 	bl	80023d8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800245c:	19e0      	adds	r0, r4, r7
 800245e:	4632      	mov	r2, r6
 8002460:	4629      	mov	r1, r5
 8002462:	b280      	uxth	r0, r0
}
 8002464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002468:	f7ff bfb6 	b.w	80023d8 <BSP_LCD_DrawVLine>

0800246c <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800246c:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <BSP_LCD_DrawPixel+0x3c>)
{
 800246e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002472:	460e      	mov	r6, r1
 8002474:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002476:	2134      	movs	r1, #52	@ 0x34
 8002478:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 800247c:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800247e:	fb01 3302 	mla	r3, r1, r2, r3
 8002482:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002486:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 800248a:	f7ff fed1 	bl	8002230 <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800248e:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002492:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002496:	d104      	bne.n	80024a2 <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002498:	b2a4      	uxth	r4, r4
 800249a:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 800249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80024a2:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 80024a6:	e7fa      	b.n	800249e <BSP_LCD_DrawPixel+0x32>
 80024a8:	20000764 	.word	0x20000764

080024ac <BSP_LCD_DisplayChar>:
{
 80024ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b0:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024b2:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 80024b4:	f04f 0800 	mov.w	r8, #0
{
 80024b8:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024bc:	4928      	ldr	r1, [pc, #160]	@ (8002560 <BSP_LCD_DisplayChar+0xb4>)
 80024be:	200c      	movs	r0, #12
 80024c0:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 80024c4:	fb00 110b 	mla	r1, r0, fp, r1
 80024c8:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024cc:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80024d0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80024d4:	f109 0607 	add.w	r6, r9, #7
 80024d8:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024da:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024de:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80024e0:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 80024e4:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 80024e8:	f109 32ff 	add.w	r2, r9, #4294967295
 80024ec:	fa52 f380 	uxtab	r3, r2, r0
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 80024f4:	45d0      	cmp	r8, sl
 80024f6:	eb03 0208 	add.w	r2, r3, r8
 80024fa:	b293      	uxth	r3, r2
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	d302      	bcc.n	8002506 <BSP_LCD_DisplayChar+0x5a>
}
 8002500:	b005      	add	sp, #20
 8002502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8002506:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8002508:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 800250a:	d004      	beq.n	8002516 <BSP_LCD_DisplayChar+0x6a>
 800250c:	2e02      	cmp	r6, #2
 800250e:	d109      	bne.n	8002524 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002510:	882c      	ldrh	r4, [r5, #0]
 8002512:	ba64      	rev16	r4, r4
 8002514:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8002516:	2700      	movs	r7, #0
 8002518:	45b9      	cmp	r9, r7
 800251a:	d80a      	bhi.n	8002532 <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 800251c:	f108 0801 	add.w	r8, r8, #1
 8002520:	4435      	add	r5, r6
 8002522:	e7e6      	b.n	80024f2 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002524:	786a      	ldrb	r2, [r5, #1]
 8002526:	0424      	lsls	r4, r4, #16
 8002528:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800252c:	78aa      	ldrb	r2, [r5, #2]
 800252e:	4314      	orrs	r4, r2
      break;
 8002530:	e7f1      	b.n	8002516 <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002532:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8002534:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002536:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <BSP_LCD_DisplayChar+0xb4>)
 800253e:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8002540:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8002542:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002544:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 8002546:	4222      	tst	r2, r4
 8002548:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800254c:	fb02 320b 	mla	r2, r2, fp, r3
 8002550:	bf14      	ite	ne
 8002552:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002556:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 800255a:	f7ff ff87 	bl	800246c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800255e:	e7db      	b.n	8002518 <BSP_LCD_DisplayChar+0x6c>
 8002560:	20000764 	.word	0x20000764

08002564 <BSP_LCD_DisplayStringAt>:
{
 8002564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002568:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 800256a:	4610      	mov	r0, r2
{
 800256c:	469a      	mov	sl, r3
 800256e:	460e      	mov	r6, r1
 8002570:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8002572:	f7fd fe9d 	bl	80002b0 <strlen>
 8002576:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002578:	f7ff fe5a 	bl	8002230 <BSP_LCD_GetXSize>
 800257c:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <BSP_LCD_DisplayStringAt+0xa4>)
 800257e:	210c      	movs	r1, #12
  switch (Mode)
 8002580:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002584:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002588:	fb01 3302 	mla	r3, r1, r2, r3
 800258c:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 8002590:	88bb      	ldrh	r3, [r7, #4]
 8002592:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 8002596:	d01e      	beq.n	80025d6 <BSP_LCD_DisplayStringAt+0x72>
 8002598:	f1ba 0f02 	cmp.w	sl, #2
 800259c:	d023      	beq.n	80025e6 <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800259e:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 80025a2:	2400      	movs	r4, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bfd8      	it	le
 80025a8:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80025ac:	f7ff fe40 	bl	8002230 <BSP_LCD_GetXSize>
 80025b0:	88bb      	ldrh	r3, [r7, #4]
 80025b2:	b2a2      	uxth	r2, r4
 80025b4:	f815 9004 	ldrb.w	r9, [r5, r4]
 80025b8:	3401      	adds	r4, #1
 80025ba:	fb03 0012 	mls	r0, r3, r2, r0
 80025be:	b280      	uxth	r0, r0
 80025c0:	4298      	cmp	r0, r3
 80025c2:	bf34      	ite	cc
 80025c4:	2000      	movcc	r0, #0
 80025c6:	2001      	movcs	r0, #1
 80025c8:	f1b9 0f00 	cmp.w	r9, #0
 80025cc:	bf08      	it	eq
 80025ce:	2000      	moveq	r0, #0
 80025d0:	b980      	cbnz	r0, 80025f4 <BSP_LCD_DisplayStringAt+0x90>
}
 80025d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80025d6:	eba4 0409 	sub.w	r4, r4, r9
 80025da:	435c      	muls	r4, r3
 80025dc:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80025e0:	fa1f f880 	uxth.w	r8, r0
      break;
 80025e4:	e7db      	b.n	800259e <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80025e6:	eba4 0409 	sub.w	r4, r4, r9
 80025ea:	fb14 f403 	smulbb	r4, r4, r3
 80025ee:	eba4 0008 	sub.w	r0, r4, r8
 80025f2:	e7f5      	b.n	80025e0 <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80025f4:	4640      	mov	r0, r8
 80025f6:	464a      	mov	r2, r9
 80025f8:	4631      	mov	r1, r6
 80025fa:	f7ff ff57 	bl	80024ac <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	4443      	add	r3, r8
 8002602:	fa1f f883 	uxth.w	r8, r3
    i++;
 8002606:	e7d1      	b.n	80025ac <BSP_LCD_DisplayStringAt+0x48>
 8002608:	20000764 	.word	0x20000764

0800260c <BSP_LCD_DisplayStringAtLine>:
{  
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	460c      	mov	r4, r1
 8002610:	4605      	mov	r5, r0
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002612:	f7ff fe8b 	bl	800232c <BSP_LCD_GetFont>
 8002616:	88c3      	ldrh	r3, [r0, #6]
 8002618:	4622      	mov	r2, r4
 800261a:	2000      	movs	r0, #0
 800261c:	fb13 f105 	smulbb	r1, r3, r5
 8002620:	2303      	movs	r3, #3
 8002622:	b289      	uxth	r1, r1
}
 8002624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002628:	f7ff bf9c 	b.w	8002564 <BSP_LCD_DisplayStringAt>

0800262c <BSP_LCD_DrawBitmap>:
{
 800262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002630:	4d32      	ldr	r5, [pc, #200]	@ (80026fc <BSP_LCD_DrawBitmap+0xd0>)
{
 8002632:	4614      	mov	r4, r2
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002634:	8b97      	ldrh	r7, [r2, #28]
{
 8002636:	b085      	sub	sp, #20
 8002638:	f8d2 b00a 	ldr.w	fp, [r2, #10]
 800263c:	4681      	mov	r9, r0
 800263e:	f8d2 a012 	ldr.w	sl, [r2, #18]
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002642:	f8d2 8016 	ldr.w	r8, [r2, #22]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002646:	2234      	movs	r2, #52	@ 0x34
 8002648:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
{
 800264c:	9103      	str	r1, [sp, #12]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800264e:	fb02 5303 	mla	r3, r2, r3, r5
 8002652:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8002656:	f7ff fdeb 	bl	8002230 <BSP_LCD_GetXSize>
 800265a:	9903      	ldr	r1, [sp, #12]
  if ((bit_pixel/8) == 4)
 800265c:	f1a7 0320 	sub.w	r3, r7, #32
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002660:	fb01 9900 	mla	r9, r1, r0, r9
  if ((bit_pixel/8) == 4)
 8002664:	2b07      	cmp	r3, #7
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002666:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  if ((bit_pixel/8) == 4)
 800266a:	d919      	bls.n	80026a0 <BSP_LCD_DrawBitmap+0x74>
  else if ((bit_pixel/8) == 2)
 800266c:	f1a7 0310 	sub.w	r3, r7, #16
    input_color_mode = CM_RGB888;
 8002670:	2b08      	cmp	r3, #8
 8002672:	bf34      	ite	cc
 8002674:	f04f 0902 	movcc.w	r9, #2
 8002678:	f04f 0901 	movcs.w	r9, #1
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800267c:	08ff      	lsrs	r7, r7, #3
 800267e:	f108 33ff 	add.w	r3, r8, #4294967295
 8002682:	fb0a f707 	mul.w	r7, sl, r7
 8002686:	fb07 bb03 	mla	fp, r7, r3, fp
    pbmp -= width*(bit_pixel/8);
 800268a:	427b      	negs	r3, r7
  for(index=0; index < height; index++)
 800268c:	2700      	movs	r7, #0
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800268e:	445c      	add	r4, fp
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
  
  hDma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002690:	f8df b068 	ldr.w	fp, [pc, #104]	@ 80026fc <BSP_LCD_DrawBitmap+0xd0>
    pbmp -= width*(bit_pixel/8);
 8002694:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
 8002696:	4547      	cmp	r7, r8
 8002698:	d105      	bne.n	80026a6 <BSP_LCD_DrawBitmap+0x7a>
}
 800269a:	b005      	add	sp, #20
 800269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = CM_ARGB8888;
 80026a0:	f04f 0900 	mov.w	r9, #0
 80026a4:	e7ea      	b.n	800267c <BSP_LCD_DrawBitmap+0x50>
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80026ac:	4658      	mov	r0, fp
  hDma2dHandler.Init.OutputOffset = 0;     
 80026ae:	60eb      	str	r3, [r5, #12]
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80026b0:	632b      	str	r3, [r5, #48]	@ 0x30
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026b2:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80026b6:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026ba:	22ff      	movs	r2, #255	@ 0xff
  hDma2dHandler.Instance = DMA2D; 
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <BSP_LCD_DrawBitmap+0xd4>)
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026be:	636a      	str	r2, [r5, #52]	@ 0x34
  hDma2dHandler.Instance = DMA2D; 
 80026c0:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80026c2:	f001 f850 	bl	8003766 <HAL_DMA2D_Init>
 80026c6:	b988      	cbnz	r0, 80026ec <BSP_LCD_DrawBitmap+0xc0>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80026c8:	2101      	movs	r1, #1
 80026ca:	4658      	mov	r0, fp
 80026cc:	f001 f99a 	bl	8003a04 <HAL_DMA2D_ConfigLayer>
 80026d0:	b960      	cbnz	r0, 80026ec <BSP_LCD_DrawBitmap+0xc0>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80026d2:	2301      	movs	r3, #1
 80026d4:	4632      	mov	r2, r6
 80026d6:	4621      	mov	r1, r4
 80026d8:	4808      	ldr	r0, [pc, #32]	@ (80026fc <BSP_LCD_DrawBitmap+0xd0>)
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4653      	mov	r3, sl
 80026de:	f001 f86e 	bl	80037be <HAL_DMA2D_Start>
 80026e2:	b918      	cbnz	r0, 80026ec <BSP_LCD_DrawBitmap+0xc0>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80026e4:	210a      	movs	r1, #10
 80026e6:	4805      	ldr	r0, [pc, #20]	@ (80026fc <BSP_LCD_DrawBitmap+0xd0>)
 80026e8:	f001 f883 	bl	80037f2 <HAL_DMA2D_PollForTransfer>
    address+=  (BSP_LCD_GetXSize()*4);
 80026ec:	f7ff fda0 	bl	8002230 <BSP_LCD_GetXSize>
    pbmp -= width*(bit_pixel/8);
 80026f0:	9b03      	ldr	r3, [sp, #12]
    address+=  (BSP_LCD_GetXSize()*4);
 80026f2:	eb06 0680 	add.w	r6, r6, r0, lsl #2
  for(index=0; index < height; index++)
 80026f6:	3701      	adds	r7, #1
    pbmp -= width*(bit_pixel/8);
 80026f8:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 80026fa:	e7cc      	b.n	8002696 <BSP_LCD_DrawBitmap+0x6a>
 80026fc:	20000764 	.word	0x20000764
 8002700:	4002b000 	.word	0x4002b000

08002704 <BSP_LCD_FillRect>:
{
 8002704:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002708:	4d1b      	ldr	r5, [pc, #108]	@ (8002778 <BSP_LCD_FillRect+0x74>)
{
 800270a:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800270c:	230c      	movs	r3, #12
{
 800270e:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002710:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8002714:	4617      	mov	r7, r2
 8002716:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002718:	fb03 5306 	mla	r3, r3, r6, r5
 800271c:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8002720:	f7ff fde0 	bl	80022e4 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002724:	2334      	movs	r3, #52	@ 0x34
 8002726:	fb03 5306 	mla	r3, r3, r6, r5
 800272a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800272e:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8002732:	2a02      	cmp	r2, #2
 8002734:	d118      	bne.n	8002768 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002736:	f7ff fd7b 	bl	8002230 <BSP_LCD_GetXSize>
 800273a:	fb00 4009 	mla	r0, r0, r9, r4
 800273e:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002742:	f7ff fd75 	bl	8002230 <BSP_LCD_GetXSize>
 8002746:	230c      	movs	r3, #12
 8002748:	1bc0      	subs	r0, r0, r7
 800274a:	463a      	mov	r2, r7
 800274c:	fb03 5106 	mla	r1, r3, r6, r5
 8002750:	f8d1 30ec 	ldr.w	r3, [r1, #236]	@ 0xec
 8002754:	4651      	mov	r1, sl
 8002756:	9000      	str	r0, [sp, #0]
 8002758:	4630      	mov	r0, r6
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	4643      	mov	r3, r8
 800275e:	f7ff fd2b 	bl	80021b8 <LL_FillBuffer>
}
 8002762:	b002      	add	sp, #8
 8002764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002768:	f7ff fd62 	bl	8002230 <BSP_LCD_GetXSize>
 800276c:	fb00 4409 	mla	r4, r0, r9, r4
 8002770:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8002774:	e7e5      	b.n	8002742 <BSP_LCD_FillRect+0x3e>
 8002776:	bf00      	nop
 8002778:	20000764 	.word	0x20000764

0800277c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 800277c:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800277e:	484c      	ldr	r0, [pc, #304]	@ (80028b0 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002782:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 8002786:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
{
 800278a:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 800278c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800278e:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002790:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002792:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002794:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002798:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800279c:	4e45      	ldr	r6, [pc, #276]	@ (80028b4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80027a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ac:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b6:	f042 0210 	orr.w	r2, r2, #16
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80027bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027be:	f002 0210 	and.w	r2, r2, #16
 80027c2:	9202      	str	r2, [sp, #8]
 80027c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027d0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80027d4:	9203      	str	r2, [sp, #12]
 80027d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80027e6:	9204      	str	r2, [sp, #16]
 80027e8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80027f8:	9205      	str	r2, [sp, #20]
 80027fa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
 8002804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002806:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800280a:	9206      	str	r2, [sp, #24]
 800280c:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 800280e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002814:	631a      	str	r2, [r3, #48]	@ 0x30
 8002816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002818:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800281c:	9207      	str	r2, [sp, #28]
 800281e:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002820:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002822:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800282a:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800282c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002830:	9308      	str	r3, [sp, #32]
 8002832:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002834:	2310      	movs	r3, #16
 8002836:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800283c:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002840:	f001 f926 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002844:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002846:	a909      	add	r1, sp, #36	@ 0x24
 8002848:	481b      	ldr	r0, [pc, #108]	@ (80028b8 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800284a:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800284c:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002850:	f001 f91e 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002854:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002858:	a909      	add	r1, sp, #36	@ 0x24
 800285a:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800285c:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800285e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002862:	f001 f915 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002866:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800286a:	a909      	add	r1, sp, #36	@ 0x24
 800286c:	4813      	ldr	r0, [pc, #76]	@ (80028bc <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800286e:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002870:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002874:	f001 f90c 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002878:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800287a:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800287c:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800287e:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002880:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002884:	4c0e      	ldr	r4, [pc, #56]	@ (80028c0 <BSP_LCD_MspInit+0x144>)
 8002886:	4620      	mov	r0, r4
 8002888:	f001 f902 	bl	8003a90 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800288c:	a909      	add	r1, sp, #36	@ 0x24
 800288e:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002890:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002892:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002894:	f001 f8fc 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002898:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800289a:	a909      	add	r1, sp, #36	@ 0x24
 800289c:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800289e:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80028a2:	f001 f8f5 	bl	8003a90 <HAL_GPIO_Init>
}
 80028a6:	b00f      	add	sp, #60	@ 0x3c
 80028a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40022400 	.word	0x40022400
 80028c0:	40022800 	.word	0x40022800

080028c4 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028c4:	4807      	ldr	r0, [pc, #28]	@ (80028e4 <BSP_LCD_ClockConfig+0x20>)
 80028c6:	2308      	movs	r3, #8
 80028c8:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80028cc:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80028ce:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80028d2:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80028d4:	2305      	movs	r3, #5
 80028d6:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80028d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80028de:	f002 b91b 	b.w	8004b18 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	bf00      	nop
 80028e4:	20000764 	.word	0x20000764

080028e8 <BSP_LCD_Init>:
{    
 80028e8:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80028ea:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80028ec:	4c24      	ldr	r4, [pc, #144]	@ (8002980 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80028ee:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028f0:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028f2:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80028f6:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80028fa:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028fe:	230b      	movs	r3, #11
 8002900:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002904:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002908:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800290a:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800290e:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002912:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002916:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800291a:	f7ff ffd3 	bl	80028c4 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800291e:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 8002922:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 8002926:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002928:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002932:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002936:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800293a:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 800293e:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <BSP_LCD_Init+0x9c>)
 8002940:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002944:	f001 fe27 	bl	8004596 <HAL_LTDC_GetState>
 8002948:	4601      	mov	r1, r0
 800294a:	b918      	cbnz	r0, 8002954 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800294c:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8002950:	f7ff ff14 	bl	800277c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002954:	480c      	ldr	r0, [pc, #48]	@ (8002988 <BSP_LCD_Init+0xa0>)
 8002956:	f001 fd85 	bl	8004464 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800295a:	2201      	movs	r2, #1
 800295c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002960:	480a      	ldr	r0, [pc, #40]	@ (800298c <BSP_LCD_Init+0xa4>)
 8002962:	f001 f97f 	bl	8003c64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002966:	2201      	movs	r2, #1
 8002968:	2108      	movs	r1, #8
 800296a:	4809      	ldr	r0, [pc, #36]	@ (8002990 <BSP_LCD_Init+0xa8>)
 800296c:	f001 f97a 	bl	8003c64 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002970:	f000 f918 	bl	8002ba4 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002974:	4807      	ldr	r0, [pc, #28]	@ (8002994 <BSP_LCD_Init+0xac>)
 8002976:	f7ff fccd 	bl	8002314 <BSP_LCD_SetFont>
}
 800297a:	2000      	movs	r0, #0
 800297c:	bd10      	pop	{r4, pc}
 800297e:	bf00      	nop
 8002980:	20000764 	.word	0x20000764
 8002984:	40016800 	.word	0x40016800
 8002988:	200007a4 	.word	0x200007a4
 800298c:	40022000 	.word	0x40022000
 8002990:	40022800 	.word	0x40022800
 8002994:	2000004c 	.word	0x2000004c

08002998 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800299c:	4c21      	ldr	r4, [pc, #132]	@ (8002a24 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800299e:	2710      	movs	r7, #16
 80029a0:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 80029a2:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029a6:	19e5      	adds	r5, r4, r7
 80029a8:	4621      	mov	r1, r4
{
 80029aa:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029b0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80029b2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029b6:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80029ba:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029be:	f002 ff01 	bl	80057c4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80029c2:	4630      	mov	r0, r6
 80029c4:	f000 f99e 	bl	8002d04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80029c8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80029ca:	4621      	mov	r1, r4
 80029cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d0:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029d2:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80029d6:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80029da:	f002 fef3 	bl	80057c4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80029de:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029e0:	4621      	mov	r1, r4
 80029e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029e6:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029e8:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80029ec:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80029ee:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029f2:	f002 fee7 	bl	80057c4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80029f6:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80029fa:	4621      	mov	r1, r4
 80029fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002a00:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002a02:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a04:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8002a06:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a08:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002a0c:	9b01      	ldr	r3, [sp, #4]
 8002a0e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002a10:	f002 fed8 	bl	80057c4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002a14:	4649      	mov	r1, r9
 8002a16:	4628      	mov	r0, r5
}
 8002a18:	b003      	add	sp, #12
 8002a1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002a1e:	f002 bef0 	b.w	8005802 <HAL_SDRAM_ProgramRefreshRate>
 8002a22:	bf00      	nop
 8002a24:	200008ec 	.word	0x200008ec

08002a28 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a28:	4b55      	ldr	r3, [pc, #340]	@ (8002b80 <BSP_SDRAM_MspInit+0x158>)
 8002a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
{  
 8002a30:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 8002a34:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 8002a38:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002a3a:	a909      	add	r1, sp, #36	@ 0x24
 8002a3c:	4851      	ldr	r0, [pc, #324]	@ (8002b84 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a3e:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a42:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a44:	9201      	str	r2, [sp, #4]
 8002a46:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002a4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a52:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8002a56:	9202      	str	r2, [sp, #8]
 8002a58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a5c:	f042 0204 	orr.w	r2, r2, #4
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a64:	f002 0204 	and.w	r2, r2, #4
 8002a68:	9203      	str	r2, [sp, #12]
 8002a6a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6e:	f042 0208 	orr.w	r2, r2, #8
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a76:	f002 0208 	and.w	r2, r2, #8
 8002a7a:	9204      	str	r2, [sp, #16]
 8002a7c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a80:	f042 0210 	orr.w	r2, r2, #16
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a88:	f002 0210 	and.w	r2, r2, #16
 8002a8c:	9205      	str	r2, [sp, #20]
 8002a8e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9a:	f002 0220 	and.w	r2, r2, #32
 8002a9e:	9206      	str	r2, [sp, #24]
 8002aa0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002ab0:	9207      	str	r2, [sp, #28]
 8002ab2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ab6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002abc:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac4:	9308      	str	r3, [sp, #32]
 8002ac6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ace:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002ad0:	230c      	movs	r3, #12
 8002ad2:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002ad4:	2308      	movs	r3, #8
 8002ad6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002ad8:	f000 ffda 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002adc:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ae0:	a909      	add	r1, sp, #36	@ 0x24
 8002ae2:	4829      	ldr	r0, [pc, #164]	@ (8002b88 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002ae4:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002ae6:	f000 ffd3 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002aea:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002aee:	a909      	add	r1, sp, #36	@ 0x24
 8002af0:	4826      	ldr	r0, [pc, #152]	@ (8002b8c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002af2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002af4:	f000 ffcc 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002af8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002afc:	a909      	add	r1, sp, #36	@ 0x24
 8002afe:	4824      	ldr	r0, [pc, #144]	@ (8002b90 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002b00:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002b02:	f000 ffc5 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002b06:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b0a:	a909      	add	r1, sp, #36	@ 0x24
 8002b0c:	4821      	ldr	r0, [pc, #132]	@ (8002b94 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002b0e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b10:	f000 ffbe 	bl	8003a90 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002b14:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002b16:	a909      	add	r1, sp, #36	@ 0x24
 8002b18:	481f      	ldr	r0, [pc, #124]	@ (8002b98 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002b1a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002b1c:	f000 ffb8 	bl	8003a90 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b22:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002b24:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002b2c:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002b2e:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002b30:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b32:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b3a:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b42:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002b4a:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b4e:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b50:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002b54:	4a12      	ldr	r2, [pc, #72]	@ (8002ba0 <BSP_SDRAM_MspInit+0x178>)
 8002b56:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002b5a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002b5c:	6335      	str	r5, [r6, #48]	@ 0x30
 8002b5e:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8002b60:	f000 fc5a 	bl	8003418 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002b64:	4628      	mov	r0, r5
 8002b66:	f000 fbd9 	bl	800331c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	210f      	movs	r1, #15
 8002b6e:	2038      	movs	r0, #56	@ 0x38
 8002b70:	f000 fb20 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002b74:	2038      	movs	r0, #56	@ 0x38
 8002b76:	f000 fb4f 	bl	8003218 <HAL_NVIC_EnableIRQ>
}
 8002b7a:	b00e      	add	sp, #56	@ 0x38
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	200008ec 	.word	0x200008ec
 8002ba0:	40026410 	.word	0x40026410

08002ba4 <BSP_SDRAM_Init>:
{ 
 8002ba4:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002ba6:	4c1b      	ldr	r4, [pc, #108]	@ (8002c14 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8002ba8:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002baa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002bac:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bae:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002bb0:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002bb4:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8002bb6:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bb8:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8002bba:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8002bbe:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 8002bc2:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bc6:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 8002bc8:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bcc:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002bd0:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002bd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bd6:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002bde:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002be0:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002be4:	f104 0510 	add.w	r5, r4, #16
 8002be8:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002bea:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002bee:	f7ff ff1b 	bl	8002a28 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002bf2:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	4c08      	ldr	r4, [pc, #32]	@ (8002c1c <BSP_SDRAM_Init+0x78>)
 8002bfa:	f002 fdc3 	bl	8005784 <HAL_SDRAM_Init>
 8002bfe:	3800      	subs	r0, #0
 8002c00:	bf18      	it	ne
 8002c02:	2001      	movne	r0, #1
 8002c04:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c06:	f240 6003 	movw	r0, #1539	@ 0x603
 8002c0a:	f7ff fec5 	bl	8002998 <BSP_SDRAM_Initialization_sequence>
}
 8002c0e:	7820      	ldrb	r0, [r4, #0]
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
 8002c12:	bf00      	nop
 8002c14:	200008ec 	.word	0x200008ec
 8002c18:	a0000140 	.word	0xa0000140
 8002c1c:	20000074 	.word	0x20000074

08002c20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c20:	490f      	ldr	r1, [pc, #60]	@ (8002c60 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c22:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <SystemInit+0x44>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002c3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8002c42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c48:	4a07      	ldr	r2, [pc, #28]	@ (8002c68 <SystemInit+0x48>)
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c5a:	608b      	str	r3, [r1, #8]
#endif
}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	40023800 	.word	0x40023800
 8002c68:	24003010 	.word	0x24003010

08002c6c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c72:	4e0e      	ldr	r6, [pc, #56]	@ (8002cac <HAL_InitTick+0x3c>)
 8002c74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8002c78:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c7a:	7832      	ldrb	r2, [r6, #0]
 8002c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c80:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <HAL_InitTick+0x40>)
 8002c82:	6810      	ldr	r0, [r2, #0]
 8002c84:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c88:	f000 fad4 	bl	8003234 <HAL_SYSTICK_Config>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	b950      	cbnz	r0, 8002ca6 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c90:	2d0f      	cmp	r5, #15
 8002c92:	d808      	bhi.n	8002ca6 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c94:	4602      	mov	r2, r0
 8002c96:	4629      	mov	r1, r5
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f000 fa8a 	bl	80031b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	e7fc      	b.n	8002ca4 <HAL_InitTick+0x34>
 8002caa:	bf00      	nop
 8002cac:	2000007c 	.word	0x2000007c
 8002cb0:	20000078 	.word	0x20000078

08002cb4 <HAL_Init>:
{
 8002cb4:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cca:	f000 fa61 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f7ff ffce 	bl	8002c70 <HAL_InitTick>
  HAL_MspInit();
 8002cd4:	f7ff ffca 	bl	8002c6c <HAL_MspInit>
}
 8002cd8:	2000      	movs	r0, #0
 8002cda:	bd08      	pop	{r3, pc}
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ce0:	4a03      	ldr	r2, [pc, #12]	@ (8002cf0 <HAL_IncTick+0x10>)
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <HAL_IncTick+0x14>)
 8002ce4:	6811      	ldr	r1, [r2, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	440b      	add	r3, r1
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000a0c 	.word	0x20000a0c
 8002cf4:	2000007c 	.word	0x2000007c

08002cf8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002cf8:	4b01      	ldr	r3, [pc, #4]	@ (8002d00 <HAL_GetTick+0x8>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000a0c 	.word	0x20000a0c

08002d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d08:	f7ff fff6 	bl	8002cf8 <HAL_GetTick>
 8002d0c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002d10:	bf1e      	ittt	ne
 8002d12:	4b04      	ldrne	r3, [pc, #16]	@ (8002d24 <HAL_Delay+0x20>)
 8002d14:	781b      	ldrbne	r3, [r3, #0]
 8002d16:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	1b43      	subs	r3, r0, r5
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	d3fa      	bcc.n	8002d18 <HAL_Delay+0x14>
  {
  }
}
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	2000007c 	.word	0x2000007c

08002d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if(hadc == NULL)
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f000 809b 	beq.w	8002e68 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d32:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8002d34:	b925      	cbnz	r5, 8002d40 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d36:	f003 fe63 	bl	8006a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d3c:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d42:	06db      	lsls	r3, r3, #27
 8002d44:	f100 808e 	bmi.w	8002e64 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d4e:	f023 0302 	bic.w	r3, r3, #2
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d58:	4b44      	ldr	r3, [pc, #272]	@ (8002e6c <HAL_ADC_Init+0x144>)
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002d60:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	6861      	ldr	r1, [r4, #4]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d6a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d6c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d7c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d7e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d86:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	430a      	orrs	r2, r1

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d8c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9c:	4934      	ldr	r1, [pc, #208]	@ (8002e70 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d9e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002da0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002da2:	428a      	cmp	r2, r1
 8002da4:	d052      	beq.n	8002e4c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da6:	6899      	ldr	r1, [r3, #8]
 8002da8:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8002dac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	430a      	orrs	r2, r1

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002db2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dc6:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc8:	f022 0202 	bic.w	r2, r2, #2
 8002dcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002dd4:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dd6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002dda:	2a00      	cmp	r2, #0
 8002ddc:	d03e      	beq.n	8002e5c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dde:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002de0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002de6:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002df0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002df8:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfa:	2000      	movs	r0, #0
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dfe:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e00:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e04:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e0a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8002e1e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e22:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002e34:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002e36:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8002e44:	2300      	movs	r3, #0
 8002e46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e5a:	e7b2      	b.n	8002dc2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e62:	e7c9      	b.n	8002df8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7ed      	b.n	8002e44 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
 8002e6a:	e7ee      	b.n	8002e4a <HAL_ADC_Init+0x122>
 8002e6c:	40012300 	.word	0x40012300
 8002e70:	0f000001 	.word	0x0f000001

08002e74 <HAL_ADC_Start_DMA>:
{
 8002e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e76:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 8002e78:	2200      	movs	r2, #0
{
 8002e7a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8002e7c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002e7e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	d07b      	beq.n	8002f7e <HAL_ADC_Start_DMA+0x10a>
 8002e86:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e88:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8002e8a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e8e:	68aa      	ldr	r2, [r5, #8]
 8002e90:	07d0      	lsls	r0, r2, #31
 8002e92:	d50b      	bpl.n	8002eac <HAL_ADC_Start_DMA+0x38>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e94:	68aa      	ldr	r2, [r5, #8]
 8002e96:	07d2      	lsls	r2, r2, #31
 8002e98:	d41b      	bmi.n	8002ed2 <HAL_ADC_Start_DMA+0x5e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e9c:	f043 0310 	orr.w	r3, r3, #16
 8002ea0:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6463      	str	r3, [r4, #68]	@ 0x44
 8002eaa:	e065      	b.n	8002f78 <HAL_ADC_Start_DMA+0x104>
    __HAL_ADC_ENABLE(hadc);
 8002eac:	68aa      	ldr	r2, [r5, #8]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002eb4:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <HAL_ADC_Start_DMA+0x110>)
 8002eb6:	6810      	ldr	r0, [r2, #0]
 8002eb8:	4a33      	ldr	r2, [pc, #204]	@ (8002f88 <HAL_ADC_Start_DMA+0x114>)
 8002eba:	fbb0 f0f2 	udiv	r0, r0, r2
 8002ebe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ec2:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 8002ec4:	9a01      	ldr	r2, [sp, #4]
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d0e4      	beq.n	8002e94 <HAL_ADC_Start_DMA+0x20>
      counter--;
 8002eca:	9a01      	ldr	r2, [sp, #4]
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	9201      	str	r2, [sp, #4]
 8002ed0:	e7f8      	b.n	8002ec4 <HAL_ADC_Start_DMA+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002ed4:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8002ed8:	f020 0001 	bic.w	r0, r0, #1
 8002edc:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002ee0:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ee2:	686a      	ldr	r2, [r5, #4]
 8002ee4:	0550      	lsls	r0, r2, #21
 8002ee6:	d505      	bpl.n	8002ef4 <HAL_ADC_Start_DMA+0x80>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ee8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002eea:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8002eee:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8002ef2:	6420      	str	r0, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002ef6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002efa:	d002      	beq.n	8002f02 <HAL_ADC_Start_DMA+0x8e>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002efc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002efe:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002f02:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8002f04:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f06:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    __HAL_UNLOCK(hadc);
 8002f08:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f8c <HAL_ADC_Start_DMA+0x118>)
 8002f0e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_ADC_Start_DMA+0x11c>)
 8002f12:	6402      	str	r2, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f14:	4a1f      	ldr	r2, [pc, #124]	@ (8002f94 <HAL_ADC_Start_DMA+0x120>)
 8002f16:	64c2      	str	r2, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f18:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f1c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f1e:	686a      	ldr	r2, [r5, #4]
 8002f20:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002f24:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f26:	68aa      	ldr	r2, [r5, #8]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f2c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f2e:	460a      	mov	r2, r1
 8002f30:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
 8002f34:	f000 fa9a 	bl	800346c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002f38:	4917      	ldr	r1, [pc, #92]	@ (8002f98 <HAL_ADC_Start_DMA+0x124>)
 8002f3a:	684b      	ldr	r3, [r1, #4]
 8002f3c:	f013 0f1f 	tst.w	r3, #31
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	d108      	bne.n	8002f56 <HAL_ADC_Start_DMA+0xe2>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002f4a:	d115      	bne.n	8002f78 <HAL_ADC_Start_DMA+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e010      	b.n	8002f78 <HAL_ADC_Start_DMA+0x104>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <HAL_ADC_Start_DMA+0x128>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADC_Start_DMA+0xf8>
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002f62:	d103      	bne.n	8002f6c <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f6a:	609a      	str	r2, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002f6c:	684a      	ldr	r2, [r1, #4]
 8002f6e:	06d2      	lsls	r2, r2, #27
 8002f70:	d402      	bmi.n	8002f78 <HAL_ADC_Start_DMA+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f72:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa0 <HAL_ADC_Start_DMA+0x12c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d0e5      	beq.n	8002f44 <HAL_ADC_Start_DMA+0xd0>
  return HAL_OK;
 8002f78:	2000      	movs	r0, #0
}
 8002f7a:	b003      	add	sp, #12
 8002f7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8002f7e:	2002      	movs	r0, #2
 8002f80:	e7fb      	b.n	8002f7a <HAL_ADC_Start_DMA+0x106>
 8002f82:	bf00      	nop
 8002f84:	20000078 	.word	0x20000078
 8002f88:	000f4240 	.word	0x000f4240
 8002f8c:	08002fc9 	.word	0x08002fc9
 8002f90:	08002fa7 	.word	0x08002fa7
 8002f94:	08002fb3 	.word	0x08002fb3
 8002f98:	40012300 	.word	0x40012300
 8002f9c:	40012000 	.word	0x40012000
 8002fa0:	40012200 	.word	0x40012200

08002fa4 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 8002fa4:	4770      	bx	lr

08002fa6 <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002fa8:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002faa:	f7ff fffb 	bl	8002fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fae:	bd08      	pop	{r3, pc}

08002fb0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002fb0:	4770      	bx	lr

08002fb2 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002fb4:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fb6:	2340      	movs	r3, #64	@ 0x40
 8002fb8:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fc2:	f7ff fff5 	bl	8002fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc6:	bd08      	pop	{r3, pc}

08002fc8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fcc:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8002fd2:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fd4:	d123      	bne.n	800301e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	6891      	ldr	r1, [r2, #8]
 8002fe0:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
 8002fe4:	d117      	bne.n	8003016 <ADC_DMAConvCplt+0x4e>
 8002fe6:	6999      	ldr	r1, [r3, #24]
 8002fe8:	b9a9      	cbnz	r1, 8003016 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fec:	f411 0f70 	tst.w	r1, #15728640	@ 0xf00000
 8002ff0:	d002      	beq.n	8002ff8 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ff2:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ff4:	0548      	lsls	r0, r1, #21
 8002ff6:	d40e      	bmi.n	8003016 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ff8:	6851      	ldr	r1, [r2, #4]
 8002ffa:	f021 0120 	bic.w	r1, r1, #32
 8002ffe:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800300a:	04d1      	lsls	r1, r2, #19
 800300c:	d403      	bmi.n	8003016 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fc12 	bl	8006840 <HAL_ADC_ConvCpltCallback>
}
 800301c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800301e:	06d2      	lsls	r2, r2, #27
 8003020:	d503      	bpl.n	800302a <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffc4 	bl	8002fb0 <HAL_ADC_ErrorCallback>
 8003028:	e7f8      	b.n	800301c <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	4718      	bx	r3

08003034 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8003034:	2300      	movs	r3, #0
{
 8003036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8003038:	9301      	str	r3, [sp, #4]
{
 800303a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800303c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003040:	2b01      	cmp	r3, #1
 8003042:	f000 8098 	beq.w	8003176 <HAL_ADC_ConfigChannel+0x142>
 8003046:	2301      	movs	r3, #1
 8003048:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800304c:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	b285      	uxth	r5, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003052:	2809      	cmp	r0, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003054:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003056:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800305a:	d939      	bls.n	80030d0 <HAL_ADC_ConfigChannel+0x9c>
 800305c:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8003060:	d036      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003062:	3a1e      	subs	r2, #30
 8003064:	f04f 0c07 	mov.w	ip, #7
 8003068:	68df      	ldr	r7, [r3, #12]
 800306a:	fa0c fc02 	lsl.w	ip, ip, r2
 800306e:	ea27 070c 	bic.w	r7, r7, ip
 8003072:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003074:	4f41      	ldr	r7, [pc, #260]	@ (800317c <HAL_ADC_ConfigChannel+0x148>)
 8003076:	42b8      	cmp	r0, r7
 8003078:	d125      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003080:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 8003082:	6849      	ldr	r1, [r1, #4]
 8003084:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003086:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 800308a:	d82e      	bhi.n	80030ea <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800308c:	3a05      	subs	r2, #5
 800308e:	261f      	movs	r6, #31
 8003090:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003092:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003094:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003098:	ea21 0106 	bic.w	r1, r1, r6
 800309c:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800309e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030a0:	430a      	orrs	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030a4:	4a36      	ldr	r2, [pc, #216]	@ (8003180 <HAL_ADC_ConfigChannel+0x14c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x88>
 80030aa:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80030ae:	d137      	bne.n	8003120 <HAL_ADC_ConfigChannel+0xec>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030b0:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 80030b4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030b8:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  __HAL_UNLOCK(hadc);
 80030bc:	2000      	movs	r0, #0
 80030be:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 80030c2:	b003      	add	sp, #12
 80030c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030c6:	68df      	ldr	r7, [r3, #12]
 80030c8:	fa06 f202 	lsl.w	r2, r6, r2
 80030cc:	433a      	orrs	r2, r7
 80030ce:	e7d7      	b.n	8003080 <HAL_ADC_ConfigChannel+0x4c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d0:	f04f 0c07 	mov.w	ip, #7
 80030d4:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030d6:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80030dc:	ea27 070c 	bic.w	r7, r7, ip
 80030e0:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030e2:	691f      	ldr	r7, [r3, #16]
 80030e4:	433e      	orrs	r6, r7
 80030e6:	611e      	str	r6, [r3, #16]
 80030e8:	e7cb      	b.n	8003082 <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13)
 80030ea:	290c      	cmp	r1, #12
 80030ec:	f04f 011f 	mov.w	r1, #31
 80030f0:	d80b      	bhi.n	800310a <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030f2:	3a23      	subs	r2, #35	@ 0x23
 80030f4:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80030f6:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030f8:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030fc:	ea26 0101 	bic.w	r1, r6, r1
 8003100:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003102:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003104:	430a      	orrs	r2, r1
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
 8003108:	e7cc      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800310a:	3a41      	subs	r2, #65	@ 0x41
 800310c:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 800310e:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003110:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003112:	ea26 0101 	bic.w	r1, r6, r1
 8003116:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003118:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800311a:	430d      	orrs	r5, r1
 800311c:	62dd      	str	r5, [r3, #44]	@ 0x2c
 800311e:	e7c1      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003120:	2812      	cmp	r0, #18
 8003122:	d109      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x104>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_ADC_ConfigChannel+0x150>)
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800312c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003134:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003136:	e7c1      	b.n	80030bc <HAL_ADC_ConfigChannel+0x88>
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_ADC_ConfigChannel+0x148>)
 800313a:	4298      	cmp	r0, r3
 800313c:	d001      	beq.n	8003142 <HAL_ADC_ConfigChannel+0x10e>
 800313e:	2811      	cmp	r0, #17
 8003140:	d1bc      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x88>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_ADC_ConfigChannel+0x150>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800314a:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003152:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_ADC_ConfigChannel+0x148>)
 8003156:	4298      	cmp	r0, r3
 8003158:	d1b0      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x88>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800315a:	4b0b      	ldr	r3, [pc, #44]	@ (8003188 <HAL_ADC_ConfigChannel+0x154>)
 800315c:	4a0b      	ldr	r2, [pc, #44]	@ (800318c <HAL_ADC_ConfigChannel+0x158>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	fbb3 f3f2 	udiv	r3, r3, r2
 8003164:	220a      	movs	r2, #10
 8003166:	4353      	muls	r3, r2
        counter--;
 8003168:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0a5      	beq.n	80030bc <HAL_ADC_ConfigChannel+0x88>
        counter--;
 8003170:	9b01      	ldr	r3, [sp, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	e7f8      	b.n	8003168 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 8003176:	2002      	movs	r0, #2
 8003178:	e7a3      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x8e>
 800317a:	bf00      	nop
 800317c:	10000012 	.word	0x10000012
 8003180:	40012000 	.word	0x40012000
 8003184:	40012300 	.word	0x40012300
 8003188:	20000078 	.word	0x20000078
 800318c:	000f4240 	.word	0x000f4240

08003190 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4907      	ldr	r1, [pc, #28]	@ (80031b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003192:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003196:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800319e:	0412      	lsls	r2, r2, #16
 80031a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80031ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b530      	push	{r4, r5, lr}
 80031b8:	68dc      	ldr	r4, [r3, #12]
 80031ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	bf28      	it	cs
 80031c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d0:	bf8c      	ite	hi
 80031d2:	3c03      	subhi	r4, #3
 80031d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80031da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	fa03 f304 	lsl.w	r3, r3, r4
 80031ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80031f6:	db06      	blt.n	8003206 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80031fc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003200:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003204:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	f000 000f 	and.w	r0, r0, #15
 800320a:	4a02      	ldr	r2, [pc, #8]	@ (8003214 <HAL_NVIC_SetPriority+0x60>)
 800320c:	5413      	strb	r3, [r2, r0]
 800320e:	e7f9      	b.n	8003204 <HAL_NVIC_SetPriority+0x50>
 8003210:	e000ed00 	.word	0xe000ed00
 8003214:	e000ed14 	.word	0xe000ed14

08003218 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003218:	2800      	cmp	r0, #0
 800321a:	db07      	blt.n	800322c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321c:	0941      	lsrs	r1, r0, #5
 800321e:	2301      	movs	r3, #1
 8003220:	f000 001f 	and.w	r0, r0, #31
 8003224:	4a02      	ldr	r2, [pc, #8]	@ (8003230 <HAL_NVIC_EnableIRQ+0x18>)
 8003226:	4083      	lsls	r3, r0
 8003228:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100

08003234 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	3801      	subs	r0, #1
 8003236:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800323a:	d20b      	bcs.n	8003254 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <HAL_SYSTICK_Config+0x24>)
 8003242:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003244:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003246:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003248:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800324e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003250:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003252:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003254:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800325c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003260:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <HAL_MPU_Disable+0x18>)
 8003262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003264:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003268:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003278:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_MPU_Enable+0x1c>)
 800327a:	f040 0001 	orr.w	r0, r0, #1
 800327e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003284:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003288:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800328a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800328e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003298:	7843      	ldrb	r3, [r0, #1]
 800329a:	4a14      	ldr	r2, [pc, #80]	@ (80032ec <HAL_MPU_ConfigRegion+0x54>)
 800329c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80032a0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80032ac:	6843      	ldr	r3, [r0, #4]
 80032ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032b2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032b4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032b8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032bc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032be:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032c0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032c2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032c6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032c8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032cc:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ce:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032d2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032d8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032de:	7a01      	ldrb	r1, [r0, #8]
 80032e0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f0:	6803      	ldr	r3, [r0, #0]
{
 80032f2:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f4:	2018      	movs	r0, #24
 80032f6:	b2d9      	uxtb	r1, r3
 80032f8:	3910      	subs	r1, #16
 80032fa:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80032fe:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003300:	4c05      	ldr	r4, [pc, #20]	@ (8003318 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003302:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003304:	5c20      	ldrb	r0, [r4, r0]
 8003306:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003308:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800330c:	f020 0003 	bic.w	r0, r0, #3
 8003310:	bf88      	it	hi
 8003312:	3004      	addhi	r0, #4
 8003314:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003316:	bd10      	pop	{r4, pc}
 8003318:	0800e16c 	.word	0x0800e16c

0800331c <HAL_DMA_Init>:
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff fcea 	bl	8002cf8 <HAL_GetTick>
 8003324:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003326:	2c00      	cmp	r4, #0
 8003328:	d060      	beq.n	80033ec <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 800332a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800332c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800332e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003332:	2300      	movs	r3, #0
 8003334:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	07d8      	lsls	r0, r3, #31
 8003346:	d42e      	bmi.n	80033a6 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8003348:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800334a:	4832      	ldr	r0, [pc, #200]	@ (8003414 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800334e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003350:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003354:	432b      	orrs	r3, r5
 8003356:	68e5      	ldr	r5, [r4, #12]
 8003358:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	6925      	ldr	r5, [r4, #16]
 800335c:	432b      	orrs	r3, r5
 800335e:	6965      	ldr	r5, [r4, #20]
 8003360:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	69e5      	ldr	r5, [r4, #28]
 8003364:	430b      	orrs	r3, r1
 8003366:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	6a25      	ldr	r5, [r4, #32]
 800336a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800336e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003370:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003372:	bf02      	ittt	eq
 8003374:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8003378:	4335      	orreq	r5, r6
 800337a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 800337e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8003380:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003382:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003386:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338a:	d135      	bne.n	80033f8 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 800338c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800338e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003390:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003392:	b38d      	cbz	r5, 80033f8 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003394:	b991      	cbnz	r1, 80033bc <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8003396:	2801      	cmp	r0, #1
 8003398:	d020      	beq.n	80033dc <HAL_DMA_Init+0xc0>
 800339a:	f030 0102 	bics.w	r1, r0, #2
 800339e:	d12b      	bne.n	80033f8 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	01e9      	lsls	r1, r5, #7
 80033a2:	d529      	bpl.n	80033f8 <HAL_DMA_Init+0xdc>
 80033a4:	e01d      	b.n	80033e2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a6:	f7ff fca7 	bl	8002cf8 <HAL_GetTick>
 80033aa:	1b40      	subs	r0, r0, r5
 80033ac:	2805      	cmp	r0, #5
 80033ae:	d9c7      	bls.n	8003340 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b4:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033bc:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80033c0:	d116      	bne.n	80033f0 <HAL_DMA_Init+0xd4>
    switch (tmp)
 80033c2:	2803      	cmp	r0, #3
 80033c4:	d818      	bhi.n	80033f8 <HAL_DMA_Init+0xdc>
 80033c6:	a101      	add	r1, pc, #4	@ (adr r1, 80033cc <HAL_DMA_Init+0xb0>)
 80033c8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80033cc:	080033e3 	.word	0x080033e3
 80033d0:	080033a1 	.word	0x080033a1
 80033d4:	080033e3 	.word	0x080033e3
 80033d8:	080033dd 	.word	0x080033dd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033dc:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80033e0:	d10a      	bne.n	80033f8 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e2:	2340      	movs	r3, #64	@ 0x40
 80033e4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
 80033ee:	e7e4      	b.n	80033ba <HAL_DMA_Init+0x9e>
    switch (tmp)
 80033f0:	2802      	cmp	r0, #2
 80033f2:	d9f6      	bls.n	80033e2 <HAL_DMA_Init+0xc6>
 80033f4:	2803      	cmp	r0, #3
 80033f6:	d0d3      	beq.n	80033a0 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80033f8:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff ff78 	bl	80032f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003400:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003402:	233f      	movs	r3, #63	@ 0x3f
 8003404:	4093      	lsls	r3, r2
 8003406:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8003412:	e7d2      	b.n	80033ba <HAL_DMA_Init+0x9e>
 8003414:	f010803f 	.word	0xf010803f

08003418 <HAL_DMA_DeInit>:
{
 8003418:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800341a:	4605      	mov	r5, r0
 800341c:	b320      	cbz	r0, 8003468 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800341e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003422:	2b02      	cmp	r3, #2
 8003424:	b2dc      	uxtb	r4, r3
 8003426:	d01d      	beq.n	8003464 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003428:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800342a:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003434:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8003436:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003438:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800343a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800343c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800343e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003440:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003442:	f7ff ff55 	bl	80032f0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003446:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003448:	233f      	movs	r3, #63	@ 0x3f
 800344a:	4093      	lsls	r3, r2
 800344c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344e:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8003450:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003454:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8003458:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800345c:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8003460:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8003464:	4620      	mov	r0, r4
 8003466:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003468:	2401      	movs	r4, #1
 800346a:	e7fb      	b.n	8003464 <HAL_DMA_DeInit+0x4c>

0800346c <HAL_DMA_Start_IT>:
{
 800346c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800346e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003472:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8003474:	2c01      	cmp	r4, #1
 8003476:	d034      	beq.n	80034e2 <HAL_DMA_Start_IT+0x76>
 8003478:	2401      	movs	r4, #1
 800347a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800347e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003482:	2c01      	cmp	r4, #1
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	d129      	bne.n	80034de <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 800348a:	2502      	movs	r5, #2
 800348c:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003490:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003492:	6804      	ldr	r4, [r0, #0]
 8003494:	6825      	ldr	r5, [r4, #0]
 8003496:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800349a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800349c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349e:	6883      	ldr	r3, [r0, #8]
 80034a0:	2b40      	cmp	r3, #64	@ 0x40
 80034a2:	d119      	bne.n	80034d8 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80034a4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80034a6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80034aa:	233f      	movs	r3, #63	@ 0x3f
 80034ac:	4093      	lsls	r3, r2
 80034ae:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	f043 0316 	orr.w	r3, r3, #22
 80034b6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80034b8:	6963      	ldr	r3, [r4, #20]
 80034ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034be:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80034c2:	b11b      	cbz	r3, 80034cc <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80034cc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6023      	str	r3, [r4, #0]
}
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 80034d8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80034da:	60e2      	str	r2, [r4, #12]
 80034dc:	e7e4      	b.n	80034a8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 80034de:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 80034e2:	2002      	movs	r0, #2
 80034e4:	e7f7      	b.n	80034d6 <HAL_DMA_Start_IT+0x6a>

080034e6 <HAL_DMA_Abort>:
{
 80034e6:	b570      	push	{r4, r5, r6, lr}
 80034e8:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ea:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 80034ec:	f7ff fc04 	bl	8002cf8 <HAL_GetTick>
 80034f0:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034f2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d006      	beq.n	8003508 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fa:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034fe:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003500:	2300      	movs	r3, #0
 8003502:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003506:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003518:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800351c:	b90a      	cbnz	r2, 8003522 <HAL_DMA_Abort+0x3c>
 800351e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003520:	b11a      	cbz	r2, 800352a <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	f010 0001 	ands.w	r0, r0, #1
 800353a:	d107      	bne.n	800354c <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800353c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800353e:	233f      	movs	r3, #63	@ 0x3f
 8003540:	4093      	lsls	r3, r2
 8003542:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003544:	2301      	movs	r3, #1
 8003546:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800354a:	e7d9      	b.n	8003500 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800354c:	f7ff fbd4 	bl	8002cf8 <HAL_GetTick>
 8003550:	1b40      	subs	r0, r0, r5
 8003552:	2805      	cmp	r0, #5
 8003554:	d9ed      	bls.n	8003532 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003556:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003558:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800355c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8003560:	e7ce      	b.n	8003500 <HAL_DMA_Abort+0x1a>
	...

08003564 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8003564:	2300      	movs	r3, #0
{
 8003566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003568:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800356a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 800356c:	4b5b      	ldr	r3, [pc, #364]	@ (80036dc <HAL_DMA_IRQHandler+0x178>)
{
 800356e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003570:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8003572:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003574:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8003576:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003578:	409a      	lsls	r2, r3
 800357a:	4232      	tst	r2, r6
 800357c:	d00c      	beq.n	8003598 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800357e:	6801      	ldr	r1, [r0, #0]
 8003580:	6808      	ldr	r0, [r1, #0]
 8003582:	0740      	lsls	r0, r0, #29
 8003584:	d508      	bpl.n	8003598 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003586:	6808      	ldr	r0, [r1, #0]
 8003588:	f020 0004 	bic.w	r0, r0, #4
 800358c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800358e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003598:	2201      	movs	r2, #1
 800359a:	409a      	lsls	r2, r3
 800359c:	4232      	tst	r2, r6
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035a0:	6821      	ldr	r1, [r4, #0]
 80035a2:	6949      	ldr	r1, [r1, #20]
 80035a4:	0609      	lsls	r1, r1, #24
 80035a6:	d504      	bpl.n	80035b2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035a8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035ac:	f042 0202 	orr.w	r2, r2, #2
 80035b0:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035b2:	2204      	movs	r2, #4
 80035b4:	409a      	lsls	r2, r3
 80035b6:	4232      	tst	r2, r6
 80035b8:	d008      	beq.n	80035cc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ba:	6821      	ldr	r1, [r4, #0]
 80035bc:	6809      	ldr	r1, [r1, #0]
 80035be:	0788      	lsls	r0, r1, #30
 80035c0:	d504      	bpl.n	80035cc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035c2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035c6:	f042 0204 	orr.w	r2, r2, #4
 80035ca:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	2210      	movs	r2, #16
 80035ce:	409a      	lsls	r2, r3
 80035d0:	4232      	tst	r2, r6
 80035d2:	d010      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	6819      	ldr	r1, [r3, #0]
 80035d8:	0709      	lsls	r1, r1, #28
 80035da:	d50c      	bpl.n	80035f6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035dc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	0350      	lsls	r0, r2, #13
 80035e2:	d537      	bpl.n	8003654 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	0319      	lsls	r1, r3, #12
 80035e8:	d401      	bmi.n	80035ee <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80035ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035ec:	e000      	b.n	80035f0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80035f0:	b10b      	cbz	r3, 80035f6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80035f2:	4620      	mov	r0, r4
 80035f4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035f6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80035f8:	2220      	movs	r2, #32
 80035fa:	408a      	lsls	r2, r1
 80035fc:	4232      	tst	r2, r6
 80035fe:	d03a      	beq.n	8003676 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	06c6      	lsls	r6, r0, #27
 8003606:	d536      	bpl.n	8003676 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003608:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800360a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 800360e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003610:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003612:	d127      	bne.n	8003664 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003614:	f022 0216 	bic.w	r2, r2, #22
 8003618:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003620:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003622:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003624:	b90a      	cbnz	r2, 800362a <HAL_DMA_IRQHandler+0xc6>
 8003626:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003628:	b11a      	cbz	r2, 8003632 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f022 0208 	bic.w	r2, r2, #8
 8003630:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003632:	233f      	movs	r3, #63	@ 0x3f
 8003634:	408b      	lsls	r3, r1
 8003636:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003638:	2301      	movs	r3, #1
 800363a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800363e:	2300      	movs	r3, #0
 8003640:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003644:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8003646:	2b00      	cmp	r3, #0
 8003648:	d045      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800364a:	4620      	mov	r0, r4
}
 800364c:	b003      	add	sp, #12
 800364e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003652:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	05d2      	lsls	r2, r2, #23
 8003658:	d4c7      	bmi.n	80035ea <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f022 0208 	bic.w	r2, r2, #8
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e7c2      	b.n	80035ea <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003664:	0350      	lsls	r0, r2, #13
 8003666:	d527      	bpl.n	80036b8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0319      	lsls	r1, r3, #12
 800366c:	d431      	bmi.n	80036d2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800366e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8003670:	b10b      	cbz	r3, 8003676 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8003672:	4620      	mov	r0, r4
 8003674:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003676:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003678:	b36b      	cbz	r3, 80036d6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800367a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800367c:	07da      	lsls	r2, r3, #31
 800367e:	d519      	bpl.n	80036b4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8003680:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8003684:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8003686:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800368a:	2305      	movs	r3, #5
 800368c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003698:	9b01      	ldr	r3, [sp, #4]
 800369a:	3301      	adds	r3, #1
 800369c:	42bb      	cmp	r3, r7
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	d802      	bhi.n	80036a8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	07db      	lsls	r3, r3, #31
 80036a6:	d4f7      	bmi.n	8003698 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80036ae:	2300      	movs	r3, #0
 80036b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80036b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80036b6:	e7c6      	b.n	8003646 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80036be:	d108      	bne.n	80036d2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	f021 0110 	bic.w	r1, r1, #16
 80036c6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80036c8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80036ca:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80036ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 80036d2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80036d4:	e7cc      	b.n	8003670 <HAL_DMA_IRQHandler+0x10c>
}
 80036d6:	b003      	add	sp, #12
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000078 	.word	0x20000078

080036e0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80036e2:	6804      	ldr	r4, [r0, #0]
 80036e4:	9d04      	ldr	r5, [sp, #16]
 80036e6:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80036e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036ec:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80036ee:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80036f6:	ea45 0506 	orr.w	r5, r5, r6
 80036fa:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80036fc:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036fe:	d130      	bne.n	8003762 <DMA2D_SetConfig+0x82>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003700:	6885      	ldr	r5, [r0, #8]
 8003702:	b11d      	cbz	r5, 800370c <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003704:	2d01      	cmp	r5, #1
 8003706:	d103      	bne.n	8003710 <DMA2D_SetConfig+0x30>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003708:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800370c:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800370e:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003710:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003712:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003716:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800371a:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800371c:	d107      	bne.n	800372e <DMA2D_SetConfig+0x4e>
      tmp2 = (tmp2 >> 19U);
 800371e:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003720:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003722:	02c9      	lsls	r1, r1, #11
 8003724:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8003728:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 800372c:	e7ee      	b.n	800370c <DMA2D_SetConfig+0x2c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800372e:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003730:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003734:	d10a      	bne.n	800374c <DMA2D_SetConfig+0x6c>
      tmp2 = (tmp2 >> 19U);
 8003736:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003738:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800373a:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800373c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800373e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8003742:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8003746:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800374a:	e7df      	b.n	800370c <DMA2D_SetConfig+0x2c>
      tmp2 = (tmp2 >> 20U);
 800374c:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800374e:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003750:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8003752:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003754:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003758:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 800375c:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003760:	e7d4      	b.n	800370c <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003762:	60e1      	str	r1, [r4, #12]
}
 8003764:	e7d3      	b.n	800370e <DMA2D_SetConfig+0x2e>

08003766 <HAL_DMA2D_Init>:
{
 8003766:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8003768:	4604      	mov	r4, r0
 800376a:	b330      	cbz	r0, 80037ba <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800376c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8003770:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003774:	b91b      	cbnz	r3, 800377e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8003776:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800377a:	f002 fbbb 	bl	8005ef4 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800377e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003780:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003782:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003784:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003786:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003790:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003792:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003794:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003796:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800379e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037a0:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80037a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037b0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80037b2:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80037b4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 80037b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7fc      	b.n	80037b8 <HAL_DMA2D_Init+0x52>

080037be <HAL_DMA2D_Start>:
{
 80037be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80037c0:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 80037c4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80037c6:	2d01      	cmp	r5, #1
 80037c8:	f04f 0502 	mov.w	r5, #2
 80037cc:	d00f      	beq.n	80037ee <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037ce:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 80037d2:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037d4:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80037d6:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80037da:	9500      	str	r5, [sp, #0]
 80037dc:	f7ff ff80 	bl	80036e0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80037e0:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80037e2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	4333      	orrs	r3, r6
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	b002      	add	sp, #8
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80037ee:	4628      	mov	r0, r5
 80037f0:	e7fb      	b.n	80037ea <HAL_DMA2D_Start+0x2c>

080037f2 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80037f2:	2300      	movs	r3, #0
{
 80037f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80037f6:	9301      	str	r3, [sp, #4]
{
 80037f8:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037fa:	6803      	ldr	r3, [r0, #0]
{
 80037fc:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	07db      	lsls	r3, r3, #31
 8003802:	d418      	bmi.n	8003836 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800380c:	069e      	lsls	r6, r3, #26
 800380e:	d506      	bpl.n	800381e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8003810:	f7ff fa72 	bl	8002cf8 <HAL_GetTick>
 8003814:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	06d2      	lsls	r2, r2, #27
 800381c:	d53f      	bpl.n	800389e <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	2212      	movs	r2, #18
  return HAL_OK;
 8003822:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003824:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003826:	2301      	movs	r3, #1
 8003828:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 800382c:	2300      	movs	r3, #0
 800382e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8003832:	b002      	add	sp, #8
 8003834:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003836:	f7ff fa5f 	bl	8002cf8 <HAL_GetTick>
 800383a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	0792      	lsls	r2, r2, #30
 8003842:	d4df      	bmi.n	8003804 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003848:	9a01      	ldr	r2, [sp, #4]
 800384a:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800384e:	d014      	beq.n	800387a <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003850:	9a01      	ldr	r2, [sp, #4]
 8003852:	0695      	lsls	r5, r2, #26
 8003854:	d503      	bpl.n	800385e <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003856:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003858:	f042 0202 	orr.w	r2, r2, #2
 800385c:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800385e:	9a01      	ldr	r2, [sp, #4]
 8003860:	07d0      	lsls	r0, r2, #31
 8003862:	d503      	bpl.n	800386c <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003864:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800386c:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800386e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003870:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003872:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003874:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8003878:	e7d8      	b.n	800382c <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 800387a:	1c69      	adds	r1, r5, #1
 800387c:	d0df      	beq.n	800383e <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7ff fa3b 	bl	8002cf8 <HAL_GetTick>
 8003882:	1b80      	subs	r0, r0, r6
 8003884:	42a8      	cmp	r0, r5
 8003886:	d801      	bhi.n	800388c <HAL_DMA2D_PollForTransfer+0x9a>
 8003888:	2d00      	cmp	r5, #0
 800388a:	d1d7      	bne.n	800383c <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800388c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 800388e:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003890:	f043 0320 	orr.w	r3, r3, #32
 8003894:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 800389c:	e7c6      	b.n	800382c <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038a2:	9a01      	ldr	r2, [sp, #4]
 80038a4:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80038a8:	d016      	beq.n	80038d8 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038aa:	9a01      	ldr	r2, [sp, #4]
 80038ac:	0716      	lsls	r6, r2, #28
 80038ae:	d503      	bpl.n	80038b8 <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038b0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80038b2:	f042 0204 	orr.w	r2, r2, #4
 80038b6:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038b8:	9a01      	ldr	r2, [sp, #4]
 80038ba:	0695      	lsls	r5, r2, #26
 80038bc:	d503      	bpl.n	80038c6 <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038be:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80038c0:	f042 0202 	orr.w	r2, r2, #2
 80038c4:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038c6:	9a01      	ldr	r2, [sp, #4]
 80038c8:	07d0      	lsls	r0, r2, #31
 80038ca:	d503      	bpl.n	80038d4 <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038cc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038d4:	2229      	movs	r2, #41	@ 0x29
 80038d6:	e7ca      	b.n	800386e <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 80038d8:	1c69      	adds	r1, r5, #1
 80038da:	d09d      	beq.n	8003818 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038dc:	f7ff fa0c 	bl	8002cf8 <HAL_GetTick>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	42a8      	cmp	r0, r5
 80038e4:	d8d2      	bhi.n	800388c <HAL_DMA2D_PollForTransfer+0x9a>
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	d195      	bne.n	8003816 <HAL_DMA2D_PollForTransfer+0x24>
 80038ea:	e7cf      	b.n	800388c <HAL_DMA2D_PollForTransfer+0x9a>

080038ec <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80038ec:	4770      	bx	lr

080038ee <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80038ee:	4770      	bx	lr

080038f0 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038f0:	6803      	ldr	r3, [r0, #0]
{
 80038f2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038f4:	685e      	ldr	r6, [r3, #4]
{
 80038f6:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038f8:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038fa:	07f2      	lsls	r2, r6, #31
 80038fc:	d514      	bpl.n	8003928 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038fe:	05e9      	lsls	r1, r5, #23
 8003900:	d512      	bpl.n	8003928 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003908:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800390a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003912:	2201      	movs	r2, #1
 8003914:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003916:	2304      	movs	r3, #4
 8003918:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800391c:	2300      	movs	r3, #0
 800391e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003922:	6943      	ldr	r3, [r0, #20]
 8003924:	b103      	cbz	r3, 8003928 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8003926:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003928:	06b2      	lsls	r2, r6, #26
 800392a:	d516      	bpl.n	800395a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800392c:	04ab      	lsls	r3, r5, #18
 800392e:	d514      	bpl.n	800395a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003938:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800393a:	2220      	movs	r2, #32
 800393c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800393e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003946:	2304      	movs	r3, #4
 8003948:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800394c:	2300      	movs	r3, #0
 800394e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003952:	6963      	ldr	r3, [r4, #20]
 8003954:	b10b      	cbz	r3, 800395a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8003956:	4620      	mov	r0, r4
 8003958:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800395a:	0730      	lsls	r0, r6, #28
 800395c:	d516      	bpl.n	800398c <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800395e:	0529      	lsls	r1, r5, #20
 8003960:	d514      	bpl.n	800398c <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800396c:	2208      	movs	r2, #8
 800396e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003970:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003978:	2304      	movs	r3, #4
 800397a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800397e:	2300      	movs	r3, #0
 8003980:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8003984:	6963      	ldr	r3, [r4, #20]
 8003986:	b10b      	cbz	r3, 800398c <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8003988:	4620      	mov	r0, r4
 800398a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800398c:	0772      	lsls	r2, r6, #29
 800398e:	d50b      	bpl.n	80039a8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003990:	056b      	lsls	r3, r5, #21
 8003992:	d509      	bpl.n	80039a8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003994:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003996:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039a0:	2204      	movs	r2, #4
 80039a2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039a4:	f7ff ffa2 	bl	80038ec <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039a8:	07b0      	lsls	r0, r6, #30
 80039aa:	d514      	bpl.n	80039d6 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039ac:	05a9      	lsls	r1, r5, #22
 80039ae:	d512      	bpl.n	80039d6 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039ba:	2202      	movs	r2, #2
 80039bc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039c0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80039c8:	2300      	movs	r3, #0
 80039ca:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	b10b      	cbz	r3, 80039d6 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80039d2:	4620      	mov	r0, r4
 80039d4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80039d6:	06f2      	lsls	r2, r6, #27
 80039d8:	d513      	bpl.n	8003a02 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80039da:	04eb      	lsls	r3, r5, #19
 80039dc:	d511      	bpl.n	8003a02 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80039de:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039e0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80039ea:	2210      	movs	r2, #16
 80039ec:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039fe:	f7ff ff76 	bl	80038ee <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8003a02:	bd70      	pop	{r4, r5, r6, pc}

08003a04 <HAL_DMA2D_ConfigLayer>:
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003a06:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 8003a0e:	2a01      	cmp	r2, #1
 8003a10:	d02b      	beq.n	8003a6a <HAL_DMA2D_ConfigLayer+0x66>
 8003a12:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a14:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a18:	010e      	lsls	r6, r1, #4
 8003a1a:	4f1c      	ldr	r7, [pc, #112]	@ (8003a8c <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 8003a1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a20:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8003a24:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8003a28:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8003a2a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a2e:	3c09      	subs	r4, #9
 8003a30:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a32:	bf96      	itet	ls
 8003a34:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a38:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a3c:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a3e:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a40:	b9a1      	cbnz	r1, 8003a6c <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a42:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a44:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a46:	ea01 0107 	and.w	r1, r1, r7
 8003a4a:	ea41 0100 	orr.w	r1, r1, r0
 8003a4e:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a54:	d803      	bhi.n	8003a5e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003a56:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a58:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003a5c:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a5e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 8003a60:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8003a66:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a6c:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a6e:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a70:	ea01 0107 	and.w	r1, r1, r7
 8003a74:	ea41 0100 	orr.w	r1, r1, r0
 8003a78:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a7a:	eb03 0106 	add.w	r1, r3, r6
 8003a7e:	6989      	ldr	r1, [r1, #24]
 8003a80:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a82:	d8ec      	bhi.n	8003a5e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003a84:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 8003a88:	6215      	str	r5, [r2, #32]
 8003a8a:	e7e8      	b.n	8003a5e <HAL_DMA2D_ConfigLayer+0x5a>
 8003a8c:	00fcfff0 	.word	0x00fcfff0

08003a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a94:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8003c54 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003c4c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8003a9c:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a9e:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003aa0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa2:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 8003aa6:	43ac      	bics	r4, r5
 8003aa8:	f040 80b7 	bne.w	8003c1a <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aac:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003aae:	2703      	movs	r7, #3
 8003ab0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ab8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003abc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003abe:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac2:	2f01      	cmp	r7, #1
 8003ac4:	d834      	bhi.n	8003b30 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 8003ac6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ac8:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8003acc:	68cf      	ldr	r7, [r1, #12]
 8003ace:	fa07 f70e 	lsl.w	r7, r7, lr
 8003ad2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8003ad6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ad8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ada:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ade:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003ae2:	409f      	lsls	r7, r3
 8003ae4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003ae8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003aea:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aec:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003aee:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003af2:	688f      	ldr	r7, [r1, #8]
 8003af4:	fa07 f70e 	lsl.w	r7, r7, lr
 8003af8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8003afc:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afe:	d119      	bne.n	8003b34 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8003b00:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b04:	f003 0a07 	and.w	sl, r3, #7
 8003b08:	f04f 0b0f 	mov.w	fp, #15
 8003b0c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003b10:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8003b14:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b18:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003b1c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b20:	690f      	ldr	r7, [r1, #16]
 8003b22:	fa07 f70a 	lsl.w	r7, r7, sl
 8003b26:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8003b2a:	f8c8 7020 	str.w	r7, [r8, #32]
 8003b2e:	e001      	b.n	8003b34 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b30:	2c03      	cmp	r4, #3
 8003b32:	d1da      	bne.n	8003aea <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003b34:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b36:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b3a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b3e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b42:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003b46:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b48:	d067      	beq.n	8003c1a <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003b4e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b52:	f003 0c03 	and.w	ip, r3, #3
 8003b56:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003b5e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b66:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8003b6a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8003b6e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b72:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8003b7a:	9401      	str	r4, [sp, #4]
 8003b7c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003b7e:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b80:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b84:	4c32      	ldr	r4, [pc, #200]	@ (8003c50 <HAL_GPIO_Init+0x1c0>)
 8003b86:	42a0      	cmp	r0, r4
 8003b88:	d04e      	beq.n	8003c28 <HAL_GPIO_Init+0x198>
 8003b8a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003b8e:	42a0      	cmp	r0, r4
 8003b90:	d04c      	beq.n	8003c2c <HAL_GPIO_Init+0x19c>
 8003b92:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d04a      	beq.n	8003c30 <HAL_GPIO_Init+0x1a0>
 8003b9a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003b9e:	42a0      	cmp	r0, r4
 8003ba0:	d048      	beq.n	8003c34 <HAL_GPIO_Init+0x1a4>
 8003ba2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d046      	beq.n	8003c38 <HAL_GPIO_Init+0x1a8>
 8003baa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	d044      	beq.n	8003c3c <HAL_GPIO_Init+0x1ac>
 8003bb2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bb6:	42a0      	cmp	r0, r4
 8003bb8:	d042      	beq.n	8003c40 <HAL_GPIO_Init+0x1b0>
 8003bba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bbe:	42a0      	cmp	r0, r4
 8003bc0:	d040      	beq.n	8003c44 <HAL_GPIO_Init+0x1b4>
 8003bc2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bc6:	42a0      	cmp	r0, r4
 8003bc8:	d03e      	beq.n	8003c48 <HAL_GPIO_Init+0x1b8>
 8003bca:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bce:	42a0      	cmp	r0, r4
 8003bd0:	bf14      	ite	ne
 8003bd2:	240a      	movne	r4, #10
 8003bd4:	2409      	moveq	r4, #9
 8003bd6:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bda:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bde:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003be2:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8003be8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003bea:	bf0c      	ite	eq
 8003bec:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003bee:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf0:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8003bf4:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8003bf6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	bf0c      	ite	eq
 8003bfa:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003bfc:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bfe:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8003c02:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8003c04:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	bf0c      	ite	eq
 8003c08:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003c0a:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c0c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8003c0e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8003c10:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003c12:	bf54      	ite	pl
 8003c14:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003c16:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8003c18:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	f47f af3d 	bne.w	8003a9c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003c22:	b003      	add	sp, #12
 8003c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c28:	2400      	movs	r4, #0
 8003c2a:	e7d4      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c2c:	2401      	movs	r4, #1
 8003c2e:	e7d2      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c30:	2402      	movs	r4, #2
 8003c32:	e7d0      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c34:	2403      	movs	r4, #3
 8003c36:	e7ce      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c38:	2404      	movs	r4, #4
 8003c3a:	e7cc      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c3c:	2405      	movs	r4, #5
 8003c3e:	e7ca      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c40:	2406      	movs	r4, #6
 8003c42:	e7c8      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c44:	2407      	movs	r4, #7
 8003c46:	e7c6      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c48:	2408      	movs	r4, #8
 8003c4a:	e7c4      	b.n	8003bd6 <HAL_GPIO_Init+0x146>
 8003c4c:	40013c00 	.word	0x40013c00
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c58:	6903      	ldr	r3, [r0, #16]
 8003c5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003c5c:	bf14      	ite	ne
 8003c5e:	2001      	movne	r0, #1
 8003c60:	2000      	moveq	r0, #0
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c64:	b10a      	cbz	r2, 8003c6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c66:	6181      	str	r1, [r0, #24]
  }
}
 8003c68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c6a:	0409      	lsls	r1, r1, #16
 8003c6c:	e7fb      	b.n	8003c66 <HAL_GPIO_WritePin+0x2>

08003c6e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c6e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c70:	ea01 0203 	and.w	r2, r1, r3
 8003c74:	ea21 0103 	bic.w	r1, r1, r3
 8003c78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c7c:	6181      	str	r1, [r0, #24]
}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c80:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003c82:	6951      	ldr	r1, [r2, #20]
 8003c84:	4201      	tst	r1, r0
{
 8003c86:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c88:	d002      	beq.n	8003c90 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c8c:	f002 fdc6 	bl	800681c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c90:	bd08      	pop	{r3, pc}
 8003c92:	bf00      	nop
 8003c94:	40013c00 	.word	0x40013c00

08003c98 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	0791      	lsls	r1, r2, #30
 8003c9e:	d501      	bpl.n	8003ca4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	07d2      	lsls	r2, r2, #31
 8003ca8:	d403      	bmi.n	8003cb2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	619a      	str	r2, [r3, #24]
  }
}
 8003cb2:	4770      	bx	lr

08003cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cb4:	b530      	push	{r4, r5, lr}
 8003cb6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cbc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cbe:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc0:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc6:	4a05      	ldr	r2, [pc, #20]	@ (8003cdc <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cc8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cca:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cd2:	ea20 0002 	bic.w	r0, r0, r2
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cda:	bd30      	pop	{r4, r5, pc}
 8003cdc:	03ff63ff 	.word	0x03ff63ff

08003ce0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ce0:	6803      	ldr	r3, [r0, #0]
{
 8003ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ce6:	699c      	ldr	r4, [r3, #24]
{
 8003ce8:	4605      	mov	r5, r0
 8003cea:	460f      	mov	r7, r1
 8003cec:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cee:	f014 0410 	ands.w	r4, r4, #16
 8003cf2:	d06f      	beq.n	8003dd4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8003cf4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfa:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	699a      	ldr	r2, [r3, #24]
 8003d00:	0690      	lsls	r0, r2, #26
 8003d02:	d461      	bmi.n	8003dc8 <I2C_IsErrorOccurred+0xe8>
 8003d04:	f1b8 0f00 	cmp.w	r8, #0
 8003d08:	d035      	beq.n	8003d76 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8003d0a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8003d0e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003d10:	682e      	ldr	r6, [r5, #0]
 8003d12:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d14:	05d9      	lsls	r1, r3, #23
 8003d16:	d505      	bpl.n	8003d24 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003d1c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d22:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d24:	055a      	lsls	r2, r3, #21
 8003d26:	d505      	bpl.n	8003d34 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003d2c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d32:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d34:	059b      	lsls	r3, r3, #22
 8003d36:	d54f      	bpl.n	8003dd8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d3c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d40:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8003d42:	4628      	mov	r0, r5
 8003d44:	f7ff ffa8 	bl	8003c98 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003d48:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003d4a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003d4c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003d50:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003d54:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8003d5e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003d60:	4323      	orrs	r3, r4
 8003d62:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	2320      	movs	r3, #32
 8003d66:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003d70:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8003d74:	e032      	b.n	8003ddc <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8003d76:	1c7a      	adds	r2, r7, #1
 8003d78:	d0c1      	beq.n	8003cfe <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe ffbd 	bl	8002cf8 <HAL_GetTick>
 8003d7e:	1b80      	subs	r0, r0, r6
 8003d80:	42b8      	cmp	r0, r7
 8003d82:	d801      	bhi.n	8003d88 <I2C_IsErrorOccurred+0xa8>
 8003d84:	2f00      	cmp	r7, #0
 8003d86:	d1b9      	bne.n	8003cfc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003d8c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d90:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8003d92:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d94:	0400      	lsls	r0, r0, #16
 8003d96:	d50a      	bpl.n	8003dae <I2C_IsErrorOccurred+0xce>
 8003d98:	0449      	lsls	r1, r1, #17
 8003d9a:	d408      	bmi.n	8003dae <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8003d9c:	2a20      	cmp	r2, #32
 8003d9e:	d006      	beq.n	8003dae <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003da6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003da8:	f7fe ffa6 	bl	8002cf8 <HAL_GetTick>
 8003dac:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	069b      	lsls	r3, r3, #26
 8003db4:	d4a2      	bmi.n	8003cfc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003db6:	f7fe ff9f 	bl	8002cf8 <HAL_GetTick>
 8003dba:	1b80      	subs	r0, r0, r6
 8003dbc:	2819      	cmp	r0, #25
 8003dbe:	d9f6      	bls.n	8003dae <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dc0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8003dc2:	f04f 0801 	mov.w	r8, #1
 8003dc6:	e799      	b.n	8003cfc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8003dc8:	f1b8 0f00 	cmp.w	r8, #0
 8003dcc:	d19d      	bne.n	8003d0a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dce:	2220      	movs	r2, #32
 8003dd0:	61da      	str	r2, [r3, #28]
 8003dd2:	e79a      	b.n	8003d0a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	e79b      	b.n	8003d10 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1b2      	bne.n	8003d42 <I2C_IsErrorOccurred+0x62>
}
 8003ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003de0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	4604      	mov	r4, r0
 8003de4:	460d      	mov	r5, r1
 8003de6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	079b      	lsls	r3, r3, #30
 8003dee:	d501      	bpl.n	8003df4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003df0:	2000      	movs	r0, #0
 8003df2:	e01f      	b.n	8003e34 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df4:	4632      	mov	r2, r6
 8003df6:	4629      	mov	r1, r5
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f7ff ff71 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003dfe:	b9c0      	cbnz	r0, 8003e32 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003e00:	1c6a      	adds	r2, r5, #1
 8003e02:	d0f1      	beq.n	8003de8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fe ff78 	bl	8002cf8 <HAL_GetTick>
 8003e08:	1b80      	subs	r0, r0, r6
 8003e0a:	42a8      	cmp	r0, r5
 8003e0c:	d801      	bhi.n	8003e12 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003e0e:	2d00      	cmp	r5, #0
 8003e10:	d1ea      	bne.n	8003de8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f013 0302 	ands.w	r3, r3, #2
 8003e1a:	d1e5      	bne.n	8003de8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8003e1e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	f042 0220 	orr.w	r2, r2, #32
 8003e26:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8003e32:	2001      	movs	r0, #1
}
 8003e34:	bd70      	pop	{r4, r5, r6, pc}

08003e36 <I2C_WaitOnFlagUntilTimeout>:
{
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003e3e:	4604      	mov	r4, r0
 8003e40:	460f      	mov	r7, r1
 8003e42:	4616      	mov	r6, r2
 8003e44:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	ea37 0303 	bics.w	r3, r7, r3
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	42b3      	cmp	r3, r6
 8003e56:	d001      	beq.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e025      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4620      	mov	r0, r4
 8003e62:	f7ff ff3d 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003e66:	b9f0      	cbnz	r0, 8003ea6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	1c6b      	adds	r3, r5, #1
 8003e6a:	d0ec      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe ff44 	bl	8002cf8 <HAL_GetTick>
 8003e70:	eba0 0008 	sub.w	r0, r0, r8
 8003e74:	42a8      	cmp	r0, r5
 8003e76:	d801      	bhi.n	8003e7c <I2C_WaitOnFlagUntilTimeout+0x46>
 8003e78:	2d00      	cmp	r5, #0
 8003e7a:	d1e4      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	ea37 0303 	bics.w	r3, r7, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	42b3      	cmp	r3, r6
 8003e8c:	d1db      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003e90:	f043 0320 	orr.w	r3, r3, #32
 8003e94:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	2320      	movs	r3, #32
 8003e98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003ea2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003ea6:	2001      	movs	r0, #1
}
 8003ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003eac <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003eac:	b570      	push	{r4, r5, r6, lr}
 8003eae:	4604      	mov	r4, r0
 8003eb0:	460d      	mov	r5, r1
 8003eb2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	069b      	lsls	r3, r3, #26
 8003eba:	d501      	bpl.n	8003ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e01d      	b.n	8003efc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff ff0b 	bl	8003ce0 <I2C_IsErrorOccurred>
 8003eca:	b9b0      	cbnz	r0, 8003efa <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fe ff14 	bl	8002cf8 <HAL_GetTick>
 8003ed0:	1b80      	subs	r0, r0, r6
 8003ed2:	42a8      	cmp	r0, r5
 8003ed4:	d801      	bhi.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	d1ec      	bne.n	8003eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f013 0320 	ands.w	r3, r3, #32
 8003ee2:	d1e7      	bne.n	8003eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003ee6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8003efa:	2001      	movs	r0, #1
}
 8003efc:	bd70      	pop	{r4, r5, r6, pc}

08003efe <HAL_I2C_MspInit>:
}
 8003efe:	4770      	bx	lr

08003f00 <HAL_I2C_Init>:
{
 8003f00:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003f02:	4604      	mov	r4, r0
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d04e      	beq.n	8003fa6 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f08:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003f0c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003f10:	b91b      	cbnz	r3, 8003f1a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8003f12:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003f16:	f7ff fff2 	bl	8003efe <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1a:	2324      	movs	r3, #36	@ 0x24
 8003f1c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f2a:	6862      	ldr	r2, [r4, #4]
 8003f2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f30:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f38:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3e:	2901      	cmp	r1, #1
 8003f40:	d106      	bne.n	8003f50 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f46:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f4e:	e007      	b.n	8003f60 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f50:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f54:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f56:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f58:	d1f6      	bne.n	8003f48 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f60:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f62:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f6e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f76:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f78:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003f7c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f7e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f84:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f86:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f98:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003fa4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e7fc      	b.n	8003fa4 <HAL_I2C_Init+0xa4>

08003faa <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8003faa:	4770      	bx	lr

08003fac <HAL_I2C_DeInit>:
{
 8003fac:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003fae:	4604      	mov	r4, r0
 8003fb0:	b198      	cbz	r0, 8003fda <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003fb2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	2324      	movs	r3, #36	@ 0x24
 8003fb6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003fba:	6813      	ldr	r3, [r2, #0]
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003fc2:	f7ff fff2 	bl	8003faa <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8003fca:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003fce:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003fd8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7fc      	b.n	8003fd8 <HAL_I2C_DeInit+0x2c>
	...

08003fe0 <HAL_I2C_Mem_Write>:
{
 8003fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003fea:	4604      	mov	r4, r0
 8003fec:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	2b20      	cmp	r3, #32
{
 8003ff0:	4616      	mov	r6, r2
 8003ff2:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8003ff6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	f040 80c6 	bne.w	800418a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004000:	b113      	cbz	r3, 8004008 <HAL_I2C_Mem_Write+0x28>
 8004002:	f1ba 0f00 	cmp.w	sl, #0
 8004006:	d106      	bne.n	8004016 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800400c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800400e:	2001      	movs	r0, #1
}
 8004010:	b003      	add	sp, #12
 8004012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004016:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800401a:	2b01      	cmp	r3, #1
 800401c:	f000 80b5 	beq.w	800418a <HAL_I2C_Mem_Write+0x1aa>
 8004020:	f04f 0b01 	mov.w	fp, #1
 8004024:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004028:	f7fe fe66 	bl	8002cf8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800402c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800402e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004030:	9000      	str	r0, [sp, #0]
 8004032:	465a      	mov	r2, fp
 8004034:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004038:	4620      	mov	r0, r4
 800403a:	f7ff fefc 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 800403e:	2800      	cmp	r0, #0
 8004040:	d1e5      	bne.n	800400e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004042:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8004044:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004046:	fa5f f289 	uxtb.w	r2, r9
 800404a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800404c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004050:	2340      	movs	r3, #64	@ 0x40
 8004052:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8004056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004058:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800405a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800405c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800405e:	4b4c      	ldr	r3, [pc, #304]	@ (8004190 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8004060:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800406a:	f7ff fe23 	bl	8003cb4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406e:	462a      	mov	r2, r5
 8004070:	4641      	mov	r1, r8
 8004072:	4620      	mov	r0, r4
 8004074:	f7ff feb4 	bl	8003de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004078:	bb18      	cbnz	r0, 80040c2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800407a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800407e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004080:	d115      	bne.n	80040ae <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004082:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800408a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	4643      	mov	r3, r8
 800408e:	9500      	str	r5, [sp, #0]
 8004090:	f7ff fed1 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 8004094:	b9a8      	cbnz	r0, 80040c2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004096:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2bff      	cmp	r3, #255	@ 0xff
 800409c:	d815      	bhi.n	80040ca <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800409e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80040a4:	b292      	uxth	r2, r2
 80040a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	9000      	str	r0, [sp, #0]
 80040ac:	e012      	b.n	80040d4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ae:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b0:	4641      	mov	r1, r8
 80040b2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b6:	462a      	mov	r2, r5
 80040b8:	f7ff fe92 	bl	8003de0 <I2C_WaitOnTXISFlagUntilTimeout>
 80040bc:	b908      	cbnz	r0, 80040c2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	e7df      	b.n	8004082 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80040c8:	e7a1      	b.n	800400e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ca:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040d2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040d4:	4639      	mov	r1, r7
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fdec 	bl	8003cb4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040dc:	462a      	mov	r2, r5
 80040de:	4641      	mov	r1, r8
 80040e0:	4620      	mov	r0, r4
 80040e2:	f7ff fe7d 	bl	8003de0 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d191      	bne.n	800400e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80040f2:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80040f4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80040f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80040f8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80040fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80040fc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80040fe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004100:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004102:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004104:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004106:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004108:	b29b      	uxth	r3, r3
 800410a:	b1b3      	cbz	r3, 800413a <HAL_I2C_Mem_Write+0x15a>
 800410c:	b9aa      	cbnz	r2, 800413a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800410e:	4643      	mov	r3, r8
 8004110:	2180      	movs	r1, #128	@ 0x80
 8004112:	4620      	mov	r0, r4
 8004114:	9500      	str	r5, [sp, #0]
 8004116:	f7ff fe8e 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 800411a:	2800      	cmp	r0, #0
 800411c:	f47f af77 	bne.w	800400e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004120:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2bff      	cmp	r3, #255	@ 0xff
 8004126:	d928      	bls.n	800417a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004128:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800412a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800412e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004130:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004132:	4639      	mov	r1, r7
 8004134:	4620      	mov	r0, r4
 8004136:	f7ff fdbd 	bl	8003cb4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800413a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cc      	bne.n	80040dc <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	462a      	mov	r2, r5
 8004144:	4641      	mov	r1, r8
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff feb0 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 800414c:	2800      	cmp	r0, #0
 800414e:	f47f af5e 	bne.w	800400e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	2120      	movs	r1, #32
 8004156:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800415e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004162:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004170:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004174:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004178:	e74a      	b.n	8004010 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800417a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800417c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004180:	b292      	uxth	r2, r2
 8004182:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	9000      	str	r0, [sp, #0]
 8004188:	e7d3      	b.n	8004132 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800418a:	2002      	movs	r0, #2
 800418c:	e740      	b.n	8004010 <HAL_I2C_Mem_Write+0x30>
 800418e:	bf00      	nop
 8004190:	80002000 	.word	0x80002000

08004194 <HAL_I2C_Mem_Read>:
{
 8004194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004198:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800419a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800419e:	4604      	mov	r4, r0
 80041a0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	2b20      	cmp	r3, #32
{
 80041a4:	4616      	mov	r6, r2
 80041a6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80041aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ae:	f040 80c9 	bne.w	8004344 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80041b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80041b4:	b113      	cbz	r3, 80041bc <HAL_I2C_Mem_Read+0x28>
 80041b6:	f1ba 0f00 	cmp.w	sl, #0
 80041ba:	d106      	bne.n	80041ca <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041c0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80041c2:	2001      	movs	r0, #1
}
 80041c4:	b003      	add	sp, #12
 80041c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80041ca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f000 80b8 	beq.w	8004344 <HAL_I2C_Mem_Read+0x1b0>
 80041d4:	f04f 0b01 	mov.w	fp, #1
 80041d8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80041dc:	f7fe fd8c 	bl	8002cf8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e0:	2319      	movs	r3, #25
 80041e2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80041e4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041e6:	465a      	mov	r2, fp
 80041e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041ec:	4620      	mov	r0, r4
 80041ee:	f7ff fe22 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d1e4      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041f8:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80041fa:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041fc:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041fe:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004202:	2240      	movs	r2, #64	@ 0x40
 8004204:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8004208:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420a:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800420c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800420e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004210:	4a4d      	ldr	r2, [pc, #308]	@ (8004348 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004212:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004216:	9200      	str	r2, [sp, #0]
 8004218:	fa5f f289 	uxtb.w	r2, r9
 800421c:	f7ff fd4a 	bl	8003cb4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004220:	462a      	mov	r2, r5
 8004222:	4641      	mov	r1, r8
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff fddb 	bl	8003de0 <I2C_WaitOnTXISFlagUntilTimeout>
 800422a:	bb20      	cbnz	r0, 8004276 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800422c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004230:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004232:	d116      	bne.n	8004262 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004234:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004236:	2200      	movs	r2, #0
 8004238:	2140      	movs	r1, #64	@ 0x40
 800423a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800423c:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800423e:	4643      	mov	r3, r8
 8004240:	9500      	str	r5, [sp, #0]
 8004242:	f7ff fdf8 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 8004246:	b9b0      	cbnz	r0, 8004276 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004248:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2bff      	cmp	r3, #255	@ 0xff
 800424e:	4b3f      	ldr	r3, [pc, #252]	@ (800434c <HAL_I2C_Mem_Read+0x1b8>)
 8004250:	d815      	bhi.n	800427e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004252:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004254:	b292      	uxth	r2, r2
 8004256:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004260:	e012      	b.n	8004288 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004262:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	4641      	mov	r1, r8
 8004266:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004268:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	462a      	mov	r2, r5
 800426c:	f7ff fdb8 	bl	8003de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004270:	b908      	cbnz	r0, 8004276 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	e7de      	b.n	8004234 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004276:	2300      	movs	r3, #0
 8004278:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800427c:	e7a1      	b.n	80041c2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = 1U;
 800427e:	2201      	movs	r2, #1
 8004280:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004288:	4639      	mov	r1, r7
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff fd12 	bl	8003cb4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004290:	4643      	mov	r3, r8
 8004292:	2200      	movs	r2, #0
 8004294:	2104      	movs	r1, #4
 8004296:	4620      	mov	r0, r4
 8004298:	9500      	str	r5, [sp, #0]
 800429a:	f7ff fdcc 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d18f      	bne.n	80041c2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80042aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80042ac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80042ae:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80042b0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80042b2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80042b4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80042b6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80042b8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80042ba:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	b1b3      	cbz	r3, 80042f4 <HAL_I2C_Mem_Read+0x160>
 80042c6:	b9aa      	cbnz	r2, 80042f4 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042c8:	4643      	mov	r3, r8
 80042ca:	2180      	movs	r1, #128	@ 0x80
 80042cc:	4620      	mov	r0, r4
 80042ce:	9500      	str	r5, [sp, #0]
 80042d0:	f7ff fdb1 	bl	8003e36 <I2C_WaitOnFlagUntilTimeout>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	f47f af74 	bne.w	80041c2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2bff      	cmp	r3, #255	@ 0xff
 80042e0:	d928      	bls.n	8004334 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 80042e2:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = 1U;
 80042e8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042ea:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ec:	4639      	mov	r1, r7
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7ff fce0 	bl	8003cb4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80042f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1c9      	bne.n	8004290 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fc:	462a      	mov	r2, r5
 80042fe:	4641      	mov	r1, r8
 8004300:	4620      	mov	r0, r4
 8004302:	f7ff fdd3 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004306:	2800      	cmp	r0, #0
 8004308:	f47f af5b 	bne.w	80041c2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	2120      	movs	r1, #32
 8004310:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004318:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800431c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004326:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800432a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800432e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004332:	e747      	b.n	80041c4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004334:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800433a:	b292      	uxth	r2, r2
 800433c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	9000      	str	r0, [sp, #0]
 8004342:	e7d3      	b.n	80042ec <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8004344:	2002      	movs	r0, #2
 8004346:	e73d      	b.n	80041c4 <HAL_I2C_Mem_Read+0x30>
 8004348:	80002000 	.word	0x80002000
 800434c:	80002400 	.word	0x80002400

08004350 <HAL_I2C_GetState>:
  return hi2c->State;
 8004350:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8004354:	4770      	bx	lr

08004356 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004356:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004358:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800435a:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800435e:	3284      	adds	r2, #132	@ 0x84
 8004360:	1883      	adds	r3, r0, r2
{
 8004362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004366:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004368:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800436c:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800436e:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004372:	684c      	ldr	r4, [r1, #4]
 8004374:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004378:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800437c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004380:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004382:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004384:	68c5      	ldr	r5, [r0, #12]
 8004386:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800438a:	443d      	add	r5, r7
 800438c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004390:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004392:	68c6      	ldr	r6, [r0, #12]
 8004394:	68cd      	ldr	r5, [r1, #12]
 8004396:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800439a:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800439c:	689d      	ldr	r5, [r3, #8]
 800439e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80043a2:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043a4:	688d      	ldr	r5, [r1, #8]
 80043a6:	68c7      	ldr	r7, [r0, #12]
 80043a8:	3501      	adds	r5, #1
 80043aa:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80043ae:	443d      	add	r5, r7
 80043b0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043b4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80043b6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80043b8:	691d      	ldr	r5, [r3, #16]
 80043ba:	f025 0507 	bic.w	r5, r5, #7
 80043be:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80043c0:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80043c2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80043c4:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80043c8:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80043cc:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80043d0:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80043d4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80043d8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80043dc:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80043e0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043e2:	695d      	ldr	r5, [r3, #20]
 80043e4:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80043e8:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043ea:	694d      	ldr	r5, [r1, #20]
 80043ec:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043ee:	69dd      	ldr	r5, [r3, #28]
 80043f0:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80043f4:	f025 0507 	bic.w	r5, r5, #7
 80043f8:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043fa:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80043fe:	433d      	orrs	r5, r7
 8004400:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004402:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004404:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004406:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800440a:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800440c:	b31e      	cbz	r6, 8004456 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800440e:	2e01      	cmp	r6, #1
 8004410:	d023      	beq.n	800445a <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004412:	1eb5      	subs	r5, r6, #2
 8004414:	2d02      	cmp	r5, #2
 8004416:	d922      	bls.n	800445e <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8004418:	2e07      	cmp	r6, #7
 800441a:	bf14      	ite	ne
 800441c:	2501      	movne	r5, #1
 800441e:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004420:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004422:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004426:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800442a:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800442c:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800442e:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004430:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004432:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004434:	436e      	muls	r6, r5
 8004436:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800443a:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800443c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800443e:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8004442:	f024 0407 	bic.w	r4, r4, #7
 8004446:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004448:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800444a:	5883      	ldr	r3, [r0, r2]
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	5083      	str	r3, [r0, r2]
}
 8004452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004456:	2504      	movs	r5, #4
 8004458:	e7e2      	b.n	8004420 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800445a:	2503      	movs	r5, #3
 800445c:	e7e0      	b.n	8004420 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800445e:	2502      	movs	r5, #2
 8004460:	e7de      	b.n	8004420 <LTDC_SetConfig+0xca>

08004462 <HAL_LTDC_MspInit>:
}
 8004462:	4770      	bx	lr

08004464 <HAL_LTDC_Init>:
{
 8004464:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004466:	4604      	mov	r4, r0
 8004468:	2800      	cmp	r0, #0
 800446a:	d063      	beq.n	8004534 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800446c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004470:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004474:	b91b      	cbnz	r3, 800447e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004476:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800447a:	f7ff fff2 	bl	8004462 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800448c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800448e:	6999      	ldr	r1, [r3, #24]
 8004490:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004494:	4302      	orrs	r2, r0
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800449a:	6920      	ldr	r0, [r4, #16]
 800449c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800449e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044a0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044a2:	4925      	ldr	r1, [pc, #148]	@ (8004538 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044a4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	400a      	ands	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044b2:	69a0      	ldr	r0, [r4, #24]
 80044b4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044b6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044b8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	400a      	ands	r2, r1
 80044be:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044c6:	6a20      	ldr	r0, [r4, #32]
 80044c8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80044ca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044cc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	400a      	ands	r2, r1
 80044d2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80044da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80044dc:	4302      	orrs	r2, r0
 80044de:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044e6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80044f0:	430a      	orrs	r2, r1
 80044f2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044f6:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044fa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044fe:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004504:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004506:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800450a:	432a      	orrs	r2, r5
 800450c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004510:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004512:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004516:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800451a:	f042 0206 	orr.w	r2, r2, #6
 800451e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004528:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800452a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800452e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004534:	2001      	movs	r0, #1
 8004536:	e7fc      	b.n	8004532 <HAL_LTDC_Init+0xce>
 8004538:	f000f800 	.word	0xf000f800

0800453c <HAL_LTDC_ConfigLayer>:
{
 800453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004540:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8004544:	4606      	mov	r6, r0
 8004546:	460f      	mov	r7, r1
 8004548:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800454a:	2b01      	cmp	r3, #1
 800454c:	f04f 0002 	mov.w	r0, #2
 8004550:	d01f      	beq.n	8004592 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004552:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8004554:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004558:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800455a:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800455e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004562:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004566:	3438      	adds	r4, #56	@ 0x38
 8004568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800456c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004574:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004576:	4630      	mov	r0, r6
 8004578:	4662      	mov	r2, ip
 800457a:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800457c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800457e:	f7ff feea 	bl	8004356 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004582:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004584:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004586:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800458a:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800458e:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004596 <HAL_LTDC_GetState>:
  return hltdc->State;
 8004596:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 800459a:	4770      	bx	lr

0800459c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4b19      	ldr	r3, [pc, #100]	@ (8004604 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800459e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045a2:	4c19      	ldr	r4, [pc, #100]	@ (8004608 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ba:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045bc:	f7fe fb9c 	bl	8002cf8 <HAL_GetTick>
 80045c0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	03da      	lsls	r2, r3, #15
 80045c6:	d50c      	bpl.n	80045e2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045c8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045ca:	4d0f      	ldr	r5, [pc, #60]	@ (8004608 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80045d2:	f7fe fb91 	bl	8002cf8 <HAL_GetTick>
 80045d6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045d8:	686b      	ldr	r3, [r5, #4]
 80045da:	039b      	lsls	r3, r3, #14
 80045dc:	d50a      	bpl.n	80045f4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80045de:	2000      	movs	r0, #0
 80045e0:	e006      	b.n	80045f0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045e2:	f7fe fb89 	bl	8002cf8 <HAL_GetTick>
 80045e6:	1b40      	subs	r0, r0, r5
 80045e8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80045ec:	d9e9      	bls.n	80045c2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80045ee:	2003      	movs	r0, #3
}
 80045f0:	b003      	add	sp, #12
 80045f2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045f4:	f7fe fb80 	bl	8002cf8 <HAL_GetTick>
 80045f8:	1b00      	subs	r0, r0, r4
 80045fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80045fe:	d9eb      	bls.n	80045d8 <HAL_PWREx_EnableOverDrive+0x3c>
 8004600:	e7f5      	b.n	80045ee <HAL_PWREx_EnableOverDrive+0x52>
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000

0800460c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004610:	4604      	mov	r4, r0
 8004612:	b340      	cbz	r0, 8004666 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004614:	6803      	ldr	r3, [r0, #0]
 8004616:	07de      	lsls	r6, r3, #31
 8004618:	d410      	bmi.n	800463c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	079d      	lsls	r5, r3, #30
 800461e:	d461      	bmi.n	80046e4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	0719      	lsls	r1, r3, #28
 8004624:	f100 80a6 	bmi.w	8004774 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	075a      	lsls	r2, r3, #29
 800462c:	f100 80c7 	bmi.w	80047be <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004630:	69a2      	ldr	r2, [r4, #24]
 8004632:	2a00      	cmp	r2, #0
 8004634:	f040 8130 	bne.w	8004898 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004638:	2000      	movs	r0, #0
 800463a:	e02c      	b.n	8004696 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800463c:	4b94      	ldr	r3, [pc, #592]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	f002 020c 	and.w	r2, r2, #12
 8004644:	2a04      	cmp	r2, #4
 8004646:	d007      	beq.n	8004658 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	f002 020c 	and.w	r2, r2, #12
 800464e:	2a08      	cmp	r2, #8
 8004650:	d10b      	bne.n	800466a <HAL_RCC_OscConfig+0x5e>
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	0259      	lsls	r1, r3, #9
 8004656:	d508      	bpl.n	800466a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	4b8d      	ldr	r3, [pc, #564]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	039a      	lsls	r2, r3, #14
 800465e:	d5dc      	bpl.n	800461a <HAL_RCC_OscConfig+0xe>
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1d9      	bne.n	800461a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004666:	2001      	movs	r0, #1
 8004668:	e015      	b.n	8004696 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	4d88      	ldr	r5, [pc, #544]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004672:	d113      	bne.n	800469c <HAL_RCC_OscConfig+0x90>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800467c:	f7fe fb3c 	bl	8002cf8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004680:	4e83      	ldr	r6, [pc, #524]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8004682:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004684:	6833      	ldr	r3, [r6, #0]
 8004686:	039b      	lsls	r3, r3, #14
 8004688:	d4c7      	bmi.n	800461a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468a:	f7fe fb35 	bl	8002cf8 <HAL_GetTick>
 800468e:	1b40      	subs	r0, r0, r5
 8004690:	2864      	cmp	r0, #100	@ 0x64
 8004692:	d9f7      	bls.n	8004684 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8004694:	2003      	movs	r0, #3
}
 8004696:	b002      	add	sp, #8
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	b99b      	cbnz	r3, 80046c6 <HAL_RCC_OscConfig+0xba>
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	682b      	ldr	r3, [r5, #0]
 80046a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046ae:	f7fe fb23 	bl	8002cf8 <HAL_GetTick>
 80046b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	039f      	lsls	r7, r3, #14
 80046b8:	d5af      	bpl.n	800461a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ba:	f7fe fb1d 	bl	8002cf8 <HAL_GetTick>
 80046be:	1b80      	subs	r0, r0, r6
 80046c0:	2864      	cmp	r0, #100	@ 0x64
 80046c2:	d9f7      	bls.n	80046b4 <HAL_RCC_OscConfig+0xa8>
 80046c4:	e7e6      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046ca:	682b      	ldr	r3, [r5, #0]
 80046cc:	d103      	bne.n	80046d6 <HAL_RCC_OscConfig+0xca>
 80046ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	e7ce      	b.n	8004674 <HAL_RCC_OscConfig+0x68>
 80046d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046da:	602b      	str	r3, [r5, #0]
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046e2:	e7ca      	b.n	800467a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	f012 0f0c 	tst.w	r2, #12
 80046ec:	d007      	beq.n	80046fe <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	f002 020c 	and.w	r2, r2, #12
 80046f4:	2a08      	cmp	r2, #8
 80046f6:	d111      	bne.n	800471c <HAL_RCC_OscConfig+0x110>
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	025d      	lsls	r5, r3, #9
 80046fc:	d40e      	bmi.n	800471c <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	4a64      	ldr	r2, [pc, #400]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	0799      	lsls	r1, r3, #30
 8004704:	d502      	bpl.n	800470c <HAL_RCC_OscConfig+0x100>
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d1ac      	bne.n	8004666 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	6813      	ldr	r3, [r2, #0]
 800470e:	6921      	ldr	r1, [r4, #16]
 8004710:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004714:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004718:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	e781      	b.n	8004620 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800471c:	68e3      	ldr	r3, [r4, #12]
 800471e:	4d5c      	ldr	r5, [pc, #368]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 8004720:	b1bb      	cbz	r3, 8004752 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800472a:	f7fe fae5 	bl	8002cf8 <HAL_GetTick>
 800472e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	079b      	lsls	r3, r3, #30
 8004734:	d507      	bpl.n	8004746 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	6922      	ldr	r2, [r4, #16]
 800473a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800473e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004742:	602b      	str	r3, [r5, #0]
 8004744:	e76c      	b.n	8004620 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004746:	f7fe fad7 	bl	8002cf8 <HAL_GetTick>
 800474a:	1b80      	subs	r0, r0, r6
 800474c:	2802      	cmp	r0, #2
 800474e:	d9ef      	bls.n	8004730 <HAL_RCC_OscConfig+0x124>
 8004750:	e7a0      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004752:	682b      	ldr	r3, [r5, #0]
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800475a:	f7fe facd 	bl	8002cf8 <HAL_GetTick>
 800475e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	079f      	lsls	r7, r3, #30
 8004764:	f57f af5c 	bpl.w	8004620 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004768:	f7fe fac6 	bl	8002cf8 <HAL_GetTick>
 800476c:	1b80      	subs	r0, r0, r6
 800476e:	2802      	cmp	r0, #2
 8004770:	d9f6      	bls.n	8004760 <HAL_RCC_OscConfig+0x154>
 8004772:	e78f      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004774:	6963      	ldr	r3, [r4, #20]
 8004776:	4d46      	ldr	r5, [pc, #280]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 8004778:	b183      	cbz	r3, 800479c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800477a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004782:	f7fe fab9 	bl	8002cf8 <HAL_GetTick>
 8004786:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004788:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800478a:	079b      	lsls	r3, r3, #30
 800478c:	f53f af4c 	bmi.w	8004628 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004790:	f7fe fab2 	bl	8002cf8 <HAL_GetTick>
 8004794:	1b80      	subs	r0, r0, r6
 8004796:	2802      	cmp	r0, #2
 8004798:	d9f6      	bls.n	8004788 <HAL_RCC_OscConfig+0x17c>
 800479a:	e77b      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800479c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80047a4:	f7fe faa8 	bl	8002cf8 <HAL_GetTick>
 80047a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047aa:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80047ac:	079f      	lsls	r7, r3, #30
 80047ae:	f57f af3b 	bpl.w	8004628 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fe faa1 	bl	8002cf8 <HAL_GetTick>
 80047b6:	1b80      	subs	r0, r0, r6
 80047b8:	2802      	cmp	r0, #2
 80047ba:	d9f6      	bls.n	80047aa <HAL_RCC_OscConfig+0x19e>
 80047bc:	e76a      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 80047c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c2:	00d5      	lsls	r5, r2, #3
 80047c4:	d427      	bmi.n	8004816 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80047c8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047da:	4d2e      	ldr	r5, [pc, #184]	@ (8004894 <HAL_RCC_OscConfig+0x288>)
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	05d8      	lsls	r0, r3, #23
 80047e0:	d51b      	bpl.n	800481a <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e2:	68a3      	ldr	r3, [r4, #8]
 80047e4:	4d2a      	ldr	r5, [pc, #168]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d127      	bne.n	800483a <HAL_RCC_OscConfig+0x22e>
 80047ea:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80047f6:	f7fe fa7f 	bl	8002cf8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	4e25      	ldr	r6, [pc, #148]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80047fc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004800:	079a      	lsls	r2, r3, #30
 8004802:	d53f      	bpl.n	8004884 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8004804:	2f00      	cmp	r7, #0
 8004806:	f43f af13 	beq.w	8004630 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_RCC_OscConfig+0x284>)
 800480c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004812:	6413      	str	r3, [r2, #64]	@ 0x40
 8004814:	e70c      	b.n	8004630 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8004816:	2700      	movs	r7, #0
 8004818:	e7df      	b.n	80047da <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004822:	f7fe fa69 	bl	8002cf8 <HAL_GetTick>
 8004826:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	05d9      	lsls	r1, r3, #23
 800482c:	d4d9      	bmi.n	80047e2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fe fa63 	bl	8002cf8 <HAL_GetTick>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	2864      	cmp	r0, #100	@ 0x64
 8004836:	d9f7      	bls.n	8004828 <HAL_RCC_OscConfig+0x21c>
 8004838:	e72c      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483a:	b9ab      	cbnz	r3, 8004868 <HAL_RCC_OscConfig+0x25c>
 800483c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	672b      	str	r3, [r5, #112]	@ 0x70
 8004848:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004850:	f7fe fa52 	bl	8002cf8 <HAL_GetTick>
 8004854:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004856:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004858:	079b      	lsls	r3, r3, #30
 800485a:	d5d3      	bpl.n	8004804 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fe fa4c 	bl	8002cf8 <HAL_GetTick>
 8004860:	1b80      	subs	r0, r0, r6
 8004862:	4540      	cmp	r0, r8
 8004864:	d9f7      	bls.n	8004856 <HAL_RCC_OscConfig+0x24a>
 8004866:	e715      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004868:	2b05      	cmp	r3, #5
 800486a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800486c:	d103      	bne.n	8004876 <HAL_RCC_OscConfig+0x26a>
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	672b      	str	r3, [r5, #112]	@ 0x70
 8004874:	e7b9      	b.n	80047ea <HAL_RCC_OscConfig+0x1de>
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	672b      	str	r3, [r5, #112]	@ 0x70
 800487c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	e7b5      	b.n	80047f0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fe fa38 	bl	8002cf8 <HAL_GetTick>
 8004888:	1b40      	subs	r0, r0, r5
 800488a:	4540      	cmp	r0, r8
 800488c:	d9b7      	bls.n	80047fe <HAL_RCC_OscConfig+0x1f2>
 800488e:	e701      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4d38      	ldr	r5, [pc, #224]	@ (800497c <HAL_RCC_OscConfig+0x370>)
 800489a:	68ab      	ldr	r3, [r5, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d041      	beq.n	8004928 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80048a4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80048a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048ac:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	d12e      	bne.n	800490e <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80048b0:	f7fe fa22 	bl	8002cf8 <HAL_GetTick>
 80048b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	682b      	ldr	r3, [r5, #0]
 80048b8:	0199      	lsls	r1, r3, #6
 80048ba:	d422      	bmi.n	8004902 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80048c6:	430b      	orrs	r3, r1
 80048c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80048ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80048d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80048d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80048d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048dc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048e6:	f7fe fa07 	bl	8002cf8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4d24      	ldr	r5, [pc, #144]	@ (800497c <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80048ec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	f53f aea1 	bmi.w	8004638 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe f9ff 	bl	8002cf8 <HAL_GetTick>
 80048fa:	1b00      	subs	r0, r0, r4
 80048fc:	2802      	cmp	r0, #2
 80048fe:	d9f6      	bls.n	80048ee <HAL_RCC_OscConfig+0x2e2>
 8004900:	e6c8      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004902:	f7fe f9f9 	bl	8002cf8 <HAL_GetTick>
 8004906:	1b80      	subs	r0, r0, r6
 8004908:	2802      	cmp	r0, #2
 800490a:	d9d4      	bls.n	80048b6 <HAL_RCC_OscConfig+0x2aa>
 800490c:	e6c2      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800490e:	f7fe f9f3 	bl	8002cf8 <HAL_GetTick>
 8004912:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	f57f ae8e 	bpl.w	8004638 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491c:	f7fe f9ec 	bl	8002cf8 <HAL_GetTick>
 8004920:	1b00      	subs	r0, r0, r4
 8004922:	2802      	cmp	r0, #2
 8004924:	d9f6      	bls.n	8004914 <HAL_RCC_OscConfig+0x308>
 8004926:	e6b5      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004928:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800492a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	f43f ae9b 	beq.w	8004666 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004934:	69e1      	ldr	r1, [r4, #28]
 8004936:	428a      	cmp	r2, r1
 8004938:	f47f ae95 	bne.w	8004666 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004940:	6a21      	ldr	r1, [r4, #32]
 8004942:	428a      	cmp	r2, r1
 8004944:	f47f ae8f 	bne.w	8004666 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004948:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800494e:	401a      	ands	r2, r3
 8004950:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004954:	f47f ae87 	bne.w	8004666 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004958:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800495a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800495e:	0852      	lsrs	r2, r2, #1
 8004960:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004962:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004966:	f47f ae7e 	bne.w	8004666 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800496a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800496c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004974:	bf14      	ite	ne
 8004976:	2001      	movne	r0, #1
 8004978:	2000      	moveq	r0, #0
 800497a:	e68c      	b.n	8004696 <HAL_RCC_OscConfig+0x8a>
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004980:	4913      	ldr	r1, [pc, #76]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004982:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004984:	688b      	ldr	r3, [r1, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b04      	cmp	r3, #4
 800498c:	d01b      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x46>
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11b      	bne.n	80049ca <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004992:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004994:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004998:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800499c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80049a4:	bf1a      	itte	ne
 80049a6:	480b      	ldrne	r0, [pc, #44]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80049a8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	480b      	ldreq	r0, [pc, #44]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80049ac:	fba1 0100 	umull	r0, r1, r1, r0
 80049b0:	f7fc f96a 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80049bc:	3301      	adds	r3, #1
 80049be:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80049c0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80049c4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c6:	4803      	ldr	r0, [pc, #12]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80049c8:	e7fc      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80049ca:	4803      	ldr	r0, [pc, #12]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80049cc:	e7fa      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x44>
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	017d7840 	.word	0x017d7840
 80049d8:	00f42400 	.word	0x00f42400

080049dc <HAL_RCC_ClockConfig>:
{
 80049dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80049e2:	4604      	mov	r4, r0
 80049e4:	b910      	cbnz	r0, 80049ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80049e6:	2001      	movs	r0, #1
}
 80049e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ec:	4a45      	ldr	r2, [pc, #276]	@ (8004b04 <HAL_RCC_ClockConfig+0x128>)
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	428b      	cmp	r3, r1
 80049f6:	d328      	bcc.n	8004a4a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	6821      	ldr	r1, [r4, #0]
 80049fa:	078f      	lsls	r7, r1, #30
 80049fc:	d430      	bmi.n	8004a60 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	07c8      	lsls	r0, r1, #31
 8004a00:	d443      	bmi.n	8004a8a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a02:	4a40      	ldr	r2, [pc, #256]	@ (8004b04 <HAL_RCC_ClockConfig+0x128>)
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	42ab      	cmp	r3, r5
 8004a0c:	d866      	bhi.n	8004adc <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	0751      	lsls	r1, r2, #29
 8004a12:	d46f      	bmi.n	8004af4 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a14:	0713      	lsls	r3, r2, #28
 8004a16:	d507      	bpl.n	8004a28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a18:	4a3b      	ldr	r2, [pc, #236]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	6893      	ldr	r3, [r2, #8]
 8004a1e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004a22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a28:	f7ff ffaa 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8004a2c:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
 8004a2e:	4a37      	ldr	r2, [pc, #220]	@ (8004b0c <HAL_RCC_ClockConfig+0x130>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	40d8      	lsrs	r0, r3
 8004a3a:	4b35      	ldr	r3, [pc, #212]	@ (8004b10 <HAL_RCC_ClockConfig+0x134>)
 8004a3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004a3e:	4b35      	ldr	r3, [pc, #212]	@ (8004b14 <HAL_RCC_ClockConfig+0x138>)
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	f7fe f915 	bl	8002c70 <HAL_InitTick>
  return HAL_OK;
 8004a46:	2000      	movs	r0, #0
 8004a48:	e7ce      	b.n	80049e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	6813      	ldr	r3, [r2, #0]
 8004a4c:	f023 030f 	bic.w	r3, r3, #15
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	428b      	cmp	r3, r1
 8004a5c:	d1c3      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xa>
 8004a5e:	e7cb      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	f011 0f04 	tst.w	r1, #4
 8004a64:	4b28      	ldr	r3, [pc, #160]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
 8004a66:	d003      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004a6e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	070e      	lsls	r6, r1, #28
 8004a72:	d503      	bpl.n	8004a7c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004a7a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	68a0      	ldr	r0, [r4, #8]
 8004a80:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004a84:	4302      	orrs	r2, r0
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	e7b9      	b.n	80049fe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	6861      	ldr	r1, [r4, #4]
 8004a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
 8004a8e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a90:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	d11b      	bne.n	8004acc <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a94:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a98:	d0a5      	beq.n	80049e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9c:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa0:	4f19      	ldr	r7, [pc, #100]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	f022 0203 	bic.w	r2, r2, #3
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004aaa:	f7fe f925 	bl	8002cf8 <HAL_GetTick>
 8004aae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004abc:	d0a1      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abe:	f7fe f91b 	bl	8002cf8 <HAL_GetTick>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	4540      	cmp	r0, r8
 8004ac6:	d9f3      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004ac8:	2003      	movs	r0, #3
 8004aca:	e78d      	b.n	80049e8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004acc:	2902      	cmp	r1, #2
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad0:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004ad4:	e7e0      	b.n	8004a98 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad6:	f012 0f02 	tst.w	r2, #2
 8004ada:	e7dd      	b.n	8004a98 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	f023 030f 	bic.w	r3, r3, #15
 8004ae2:	432b      	orrs	r3, r5
 8004ae4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	42ab      	cmp	r3, r5
 8004aee:	f47f af7a 	bne.w	80049e6 <HAL_RCC_ClockConfig+0xa>
 8004af2:	e78c      	b.n	8004a0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af4:	4904      	ldr	r1, [pc, #16]	@ (8004b08 <HAL_RCC_ClockConfig+0x12c>)
 8004af6:	68e0      	ldr	r0, [r4, #12]
 8004af8:	688b      	ldr	r3, [r1, #8]
 8004afa:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004afe:	4303      	orrs	r3, r0
 8004b00:	608b      	str	r3, [r1, #8]
 8004b02:	e787      	b.n	8004a14 <HAL_RCC_ClockConfig+0x38>
 8004b04:	40023c00 	.word	0x40023c00
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	0800e154 	.word	0x0800e154
 8004b10:	20000078 	.word	0x20000078
 8004b14:	20000080 	.word	0x20000080

08004b18 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b18:	6803      	ldr	r3, [r0, #0]
{
 8004b1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b1e:	f013 0601 	ands.w	r6, r3, #1
{
 8004b22:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b24:	d00b      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b26:	4aad      	ldr	r2, [pc, #692]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b28:	6891      	ldr	r1, [r2, #8]
 8004b2a:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004b2e:	6091      	str	r1, [r2, #8]
 8004b30:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8004b32:	6891      	ldr	r1, [r2, #8]
 8004b34:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b36:	fab6 f686 	clz	r6, r6
 8004b3a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b3c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b3e:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8004b42:	d012      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b44:	49a5      	ldr	r1, [pc, #660]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b46:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004b48:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b4c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b50:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 8004b54:	bf08      	it	eq
 8004b56:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b58:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b5c:	bf16      	itet	ne
 8004b5e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004b62:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b64:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b66:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b6a:	02d8      	lsls	r0, r3, #11
 8004b6c:	d510      	bpl.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b6e:	489b      	ldr	r0, [pc, #620]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b70:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004b72:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b76:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b7a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004b7e:	ea42 0201 	orr.w	r2, r2, r1
 8004b82:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b86:	f000 8186 	beq.w	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	bf08      	it	eq
 8004b8e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004b90:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004b94:	bf18      	it	ne
 8004b96:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b98:	0699      	lsls	r1, r3, #26
 8004b9a:	d532      	bpl.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b9e:	4f90      	ldr	r7, [pc, #576]	@ (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ba2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fe f89d 	bl	8002cf8 <HAL_GetTick>
 8004bbe:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	05da      	lsls	r2, r3, #23
 8004bc4:	f140 8169 	bpl.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bc8:	4f84      	ldr	r7, [pc, #528]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bce:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004bd2:	f040 816d 	bne.w	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004bd8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004bdc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004be0:	4a7e      	ldr	r2, [pc, #504]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004be2:	f040 818a 	bne.w	8004efa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004be6:	6891      	ldr	r1, [r2, #8]
 8004be8:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8004bec:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8004bf0:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8004bf4:	4301      	orrs	r1, r0
 8004bf6:	6091      	str	r1, [r2, #8]
 8004bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	06d9      	lsls	r1, r3, #27
 8004c06:	d50c      	bpl.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c08:	4a74      	ldr	r2, [pc, #464]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c0a:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8004c0e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004c12:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8004c16:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8004c1a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004c1c:	4301      	orrs	r1, r0
 8004c1e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c22:	045a      	lsls	r2, r3, #17
 8004c24:	d508      	bpl.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c26:	496d      	ldr	r1, [pc, #436]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c28:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004c2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c2e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004c32:	4302      	orrs	r2, r0
 8004c34:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c38:	041f      	lsls	r7, r3, #16
 8004c3a:	d508      	bpl.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c3c:	4967      	ldr	r1, [pc, #412]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c3e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8004c40:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c44:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004c48:	4302      	orrs	r2, r0
 8004c4a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c4e:	03d8      	lsls	r0, r3, #15
 8004c50:	d508      	bpl.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c52:	4962      	ldr	r1, [pc, #392]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c54:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004c56:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c5a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c5e:	4302      	orrs	r2, r0
 8004c60:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c64:	0399      	lsls	r1, r3, #14
 8004c66:	d508      	bpl.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c68:	495c      	ldr	r1, [pc, #368]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c6a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004c6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c70:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004c74:	4302      	orrs	r2, r0
 8004c76:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c7a:	065a      	lsls	r2, r3, #25
 8004c7c:	d508      	bpl.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7e:	4957      	ldr	r1, [pc, #348]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c80:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004c82:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c86:	f022 0203 	bic.w	r2, r2, #3
 8004c8a:	4302      	orrs	r2, r0
 8004c8c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c90:	061f      	lsls	r7, r3, #24
 8004c92:	d508      	bpl.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c94:	4951      	ldr	r1, [pc, #324]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c96:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004c98:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004c9c:	f022 020c 	bic.w	r2, r2, #12
 8004ca0:	4302      	orrs	r2, r0
 8004ca2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ca6:	05d8      	lsls	r0, r3, #23
 8004ca8:	d508      	bpl.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004caa:	494c      	ldr	r1, [pc, #304]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cac:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004cae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004cb2:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8004cb6:	4302      	orrs	r2, r0
 8004cb8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cbc:	0599      	lsls	r1, r3, #22
 8004cbe:	d508      	bpl.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc0:	4946      	ldr	r1, [pc, #280]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cc2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004cc4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004cc8:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004ccc:	4302      	orrs	r2, r0
 8004cce:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd2:	055a      	lsls	r2, r3, #21
 8004cd4:	d508      	bpl.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cd6:	4941      	ldr	r1, [pc, #260]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cd8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004cda:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004cde:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ce2:	4302      	orrs	r2, r0
 8004ce4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ce8:	051f      	lsls	r7, r3, #20
 8004cea:	d508      	bpl.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cec:	493b      	ldr	r1, [pc, #236]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cf0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004cf4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004cf8:	4302      	orrs	r2, r0
 8004cfa:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cfe:	04d8      	lsls	r0, r3, #19
 8004d00:	d508      	bpl.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d02:	4936      	ldr	r1, [pc, #216]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d04:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004d06:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004d0a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004d0e:	4302      	orrs	r2, r0
 8004d10:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d14:	0499      	lsls	r1, r3, #18
 8004d16:	d508      	bpl.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d18:	4930      	ldr	r1, [pc, #192]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d1a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004d1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004d20:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004d24:	4302      	orrs	r2, r0
 8004d26:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d2a:	025a      	lsls	r2, r3, #9
 8004d2c:	d508      	bpl.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d2e:	492b      	ldr	r1, [pc, #172]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d30:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004d32:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004d36:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004d3a:	4302      	orrs	r2, r0
 8004d3c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d40:	029f      	lsls	r7, r3, #10
 8004d42:	d50c      	bpl.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d44:	4825      	ldr	r0, [pc, #148]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d46:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004d48:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004d4c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d50:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8004d54:	bf08      	it	eq
 8004d56:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004d5e:	f013 0f08 	tst.w	r3, #8
 8004d62:	bf18      	it	ne
 8004d64:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d66:	0358      	lsls	r0, r3, #13
 8004d68:	d508      	bpl.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	491c      	ldr	r1, [pc, #112]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d6c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004d6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004d72:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d76:	4302      	orrs	r2, r0
 8004d78:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d7c:	0219      	lsls	r1, r3, #8
 8004d7e:	d509      	bpl.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d80:	4916      	ldr	r1, [pc, #88]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d82:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8004d86:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004d8a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004d8e:	4302      	orrs	r2, r0
 8004d90:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d94:	2e01      	cmp	r6, #1
 8004d96:	f000 80b4 	beq.w	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004d9a:	019a      	lsls	r2, r3, #6
 8004d9c:	f100 80b1 	bmi.w	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004da0:	2d01      	cmp	r5, #1
 8004da2:	d176      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004da4:	4d0d      	ldr	r5, [pc, #52]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dae:	f7fd ffa3 	bl	8002cf8 <HAL_GetTick>
 8004db2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	009f      	lsls	r7, r3, #2
 8004db8:	f100 8127 	bmi.w	800500a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dbc:	6821      	ldr	r1, [r4, #0]
 8004dbe:	030e      	lsls	r6, r1, #12
 8004dc0:	d501      	bpl.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004dc2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004dc4:	b11b      	cbz	r3, 8004dce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8004dc6:	02cd      	lsls	r5, r1, #11
 8004dc8:	d523      	bpl.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dcc:	bb0b      	cbnz	r3, 8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dce:	4a03      	ldr	r2, [pc, #12]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dd4:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8004dd8:	e004      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004dda:	bf00      	nop
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004de8:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004dec:	4303      	orrs	r3, r0
 8004dee:	6960      	ldr	r0, [r4, #20]
 8004df0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004df4:	69a0      	ldr	r0, [r4, #24]
 8004df6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004dfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dfe:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004e02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004e04:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004e08:	3801      	subs	r0, #1
 8004e0a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004e0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e12:	0288      	lsls	r0, r1, #10
 8004e14:	d515      	bpl.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004e16:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004e18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e1c:	d111      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e1e:	4a82      	ldr	r2, [pc, #520]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004e20:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e24:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e28:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004e2c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004e30:	4303      	orrs	r3, r0
 8004e32:	6960      	ldr	r0, [r4, #20]
 8004e34:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e38:	6a20      	ldr	r0, [r4, #32]
 8004e3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e42:	070a      	lsls	r2, r1, #28
 8004e44:	d519      	bpl.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e46:	4a78      	ldr	r2, [pc, #480]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004e48:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e50:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004e54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6961      	ldr	r1, [r4, #20]
 8004e5c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004e60:	69e1      	ldr	r1, [r4, #28]
 8004e62:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004e66:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004e6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004e70:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004e74:	430b      	orrs	r3, r1
 8004e76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e7a:	4c6b      	ldr	r4, [pc, #428]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e84:	f7fd ff38 	bl	8002cf8 <HAL_GetTick>
 8004e88:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	f140 80c3 	bpl.w	8005018 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004e92:	2000      	movs	r0, #0
 8004e94:	e009      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8004e96:	2601      	movs	r6, #1
 8004e98:	e67a      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9a:	f7fd ff2d 	bl	8002cf8 <HAL_GetTick>
 8004e9e:	eba0 0008 	sub.w	r0, r0, r8
 8004ea2:	2864      	cmp	r0, #100	@ 0x64
 8004ea4:	f67f ae8c 	bls.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004ea8:	2003      	movs	r0, #3
}
 8004eaa:	b003      	add	sp, #12
 8004eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	f43f ae8e 	beq.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ebc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ec2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ec6:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004eca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ece:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8004ed0:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ed2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ed4:	07db      	lsls	r3, r3, #31
 8004ed6:	f57f ae7e 	bpl.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8004eda:	f7fd ff0d 	bl	8002cf8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004ee2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ee6:	0798      	lsls	r0, r3, #30
 8004ee8:	f53f ae75 	bmi.w	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fd ff04 	bl	8002cf8 <HAL_GetTick>
 8004ef0:	eba0 0008 	sub.w	r0, r0, r8
 8004ef4:	4548      	cmp	r0, r9
 8004ef6:	d9f5      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004ef8:	e7d6      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efa:	6891      	ldr	r1, [r2, #8]
 8004efc:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8004f00:	e679      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8004f02:	4e49      	ldr	r6, [pc, #292]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004f04:	6833      	ldr	r3, [r6, #0]
 8004f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f0a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fef4 	bl	8002cf8 <HAL_GetTick>
 8004f10:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f12:	6833      	ldr	r3, [r6, #0]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	d472      	bmi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	07d7      	lsls	r7, r2, #31
 8004f1c:	d512      	bpl.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004f1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f20:	b983      	cbnz	r3, 8004f44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f22:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f26:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f2e:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6861      	ldr	r1, [r4, #4]
 8004f36:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004f3a:	68a1      	ldr	r1, [r4, #8]
 8004f3c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004f40:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f44:	0316      	lsls	r6, r2, #12
 8004f46:	d503      	bpl.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8004f48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004f50:	02d0      	lsls	r0, r2, #11
 8004f52:	d51e      	bpl.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f5a:	d11a      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f5c:	4932      	ldr	r1, [pc, #200]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004f5e:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f62:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f6a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004f6e:	4303      	orrs	r3, r0
 8004f70:	6860      	ldr	r0, [r4, #4]
 8004f72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f76:	68e0      	ldr	r0, [r4, #12]
 8004f78:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f80:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8004f84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f86:	f020 001f 	bic.w	r0, r0, #31
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f92:	01d1      	lsls	r1, r2, #7
 8004f94:	d511      	bpl.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f96:	4924      	ldr	r1, [pc, #144]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004f98:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f9c:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fa0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004fa4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004fa8:	4303      	orrs	r3, r0
 8004faa:	6860      	ldr	r0, [r4, #4]
 8004fac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004fb0:	6920      	ldr	r0, [r4, #16]
 8004fb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004fb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fba:	0192      	lsls	r2, r2, #6
 8004fbc:	d50d      	bpl.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	6862      	ldr	r2, [r4, #4]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004fc8:	68e2      	ldr	r2, [r4, #12]
 8004fca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004fce:	68a2      	ldr	r2, [r4, #8]
 8004fd0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004fd6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004fda:	4e13      	ldr	r6, [pc, #76]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fe2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004fe4:	f7fd fe88 	bl	8002cf8 <HAL_GetTick>
 8004fe8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fea:	6833      	ldr	r3, [r6, #0]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	f53f aed7 	bmi.w	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ff2:	f7fd fe81 	bl	8002cf8 <HAL_GetTick>
 8004ff6:	1bc0      	subs	r0, r0, r7
 8004ff8:	2864      	cmp	r0, #100	@ 0x64
 8004ffa:	d9f6      	bls.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ffc:	e754      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ffe:	f7fd fe7b 	bl	8002cf8 <HAL_GetTick>
 8005002:	1bc0      	subs	r0, r0, r7
 8005004:	2864      	cmp	r0, #100	@ 0x64
 8005006:	d984      	bls.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005008:	e74e      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800500a:	f7fd fe75 	bl	8002cf8 <HAL_GetTick>
 800500e:	1b80      	subs	r0, r0, r6
 8005010:	2864      	cmp	r0, #100	@ 0x64
 8005012:	f67f aecf 	bls.w	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8005016:	e747      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005018:	f7fd fe6e 	bl	8002cf8 <HAL_GetTick>
 800501c:	1b40      	subs	r0, r0, r5
 800501e:	2864      	cmp	r0, #100	@ 0x64
 8005020:	f67f af33 	bls.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005024:	e740      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800

0800502c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800502c:	4b53      	ldr	r3, [pc, #332]	@ (800517c <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 800502e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005030:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 8005032:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005036:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800503a:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800503c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005040:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005044:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005046:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800504a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800504e:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005050:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005054:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005058:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800505a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800505e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005062:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005064:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005068:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800506c:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800506e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005072:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005076:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005078:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800507c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005080:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8005082:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005086:	f002 021f 	and.w	r2, r2, #31
 800508a:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800508c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005090:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8005094:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8005096:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800509a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800509e:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80050a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80050a4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80050a8:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80050aa:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80050ae:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80050b2:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 80050ba:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80050bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050c0:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80050c4:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80050c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050ca:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 80050ce:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80050d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050d4:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80050d8:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80050da:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050de:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80050e2:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80050e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050e8:	f002 0203 	and.w	r2, r2, #3
 80050ec:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80050ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050f2:	f002 020c 	and.w	r2, r2, #12
 80050f6:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80050f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80050fc:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8005100:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005102:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005106:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 800510a:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800510c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005110:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005114:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005116:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800511a:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800511e:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005120:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005124:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8005128:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800512a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800512e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8005132:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005134:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005138:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 800513c:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800513e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005142:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8005146:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005148:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800514c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005150:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005152:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005156:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800515a:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800515e:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005160:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005162:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005166:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800516a:	430a      	orrs	r2, r1
 800516c:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800516e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005172:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005176:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	00fffff1 	.word	0x00fffff1
 8005180:	40023800 	.word	0x40023800

08005184 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005184:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8005188:	d140      	bne.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 800518a:	4b2e      	ldr	r3, [pc, #184]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800518c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005190:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8005194:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8005198:	d046      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800519a:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 800519e:	d04c      	beq.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d14c      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	bf08      	it	eq
 80051ae:	4b26      	ldreq	r3, [pc, #152]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80051b0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80051b4:	bf18      	it	ne
 80051b6:	4b25      	ldrne	r3, [pc, #148]	@ (800524c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80051b8:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80051bc:	4a21      	ldr	r2, [pc, #132]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80051be:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80051c2:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 80051c6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80051ca:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80051cc:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80051d0:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80051d4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80051d8:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80051dc:	e012      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80051de:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80051e0:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80051e6:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051ea:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 80051ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80051f2:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80051f4:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80051f8:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80051fc:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005206:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800520a:	4770      	bx	lr
 800520c:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8005210:	d115      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005214:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005218:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 800521c:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8005220:	d002      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8005222:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8005226:	e7ba      	b.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005234:	d1d3      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005236:	4b04      	ldr	r3, [pc, #16]	@ (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8005238:	e7d2      	b.n	80051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800523a:	4805      	ldr	r0, [pc, #20]	@ (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800523c:	4770      	bx	lr
    switch (saiclocksource)
 800523e:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800
 8005248:	00f42400 	.word	0x00f42400
 800524c:	017d7840 	.word	0x017d7840
 8005250:	00bb8000 	.word	0x00bb8000

08005254 <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005254:	2901      	cmp	r1, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005256:	6b01      	ldr	r1, [r0, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005258:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800525a:	bf0c      	ite	eq
 800525c:	2309      	moveq	r3, #9
 800525e:	2301      	movne	r3, #1
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005260:	2908      	cmp	r1, #8
 8005262:	d105      	bne.n	8005270 <SAI_InterruptFlag+0x1c>
 8005264:	f022 0102 	bic.w	r1, r2, #2
 8005268:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 800526a:	bf08      	it	eq
 800526c:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005270:	3a02      	subs	r2, #2
 8005272:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005274:	bf94      	ite	ls
 8005276:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800527a:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800527e:	4770      	bx	lr

08005280 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005280:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <SAI_Disable.isra.0+0x34>)
 8005282:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800528c:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800528e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005290:	6811      	ldr	r1, [r2, #0]
 8005292:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005296:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005298:	3b01      	subs	r3, #1
 800529a:	d206      	bcs.n	80052aa <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800529c:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80052a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
      break;
 80052a8:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80052aa:	6811      	ldr	r1, [r2, #0]
 80052ac:	03c9      	lsls	r1, r1, #15
 80052ae:	d4f3      	bmi.n	8005298 <SAI_Disable.isra.0+0x18>

  return status;
}
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000078 	.word	0x20000078

080052b8 <HAL_SAI_MspInit>:
}
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_SAI_Init>:
{
 80052bc:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80052be:	4604      	mov	r4, r0
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f000 80c8 	beq.w	8005456 <HAL_SAI_Init+0x19a>
  if (hsai->State == HAL_SAI_STATE_RESET)
 80052c6:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80052ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80052ce:	b91b      	cbnz	r3, 80052d8 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80052d0:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 80052d4:	f7ff fff0 	bl	80052b8 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80052d8:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80052da:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80052dc:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 80052e0:	f7ff ffce 	bl	8005280 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 80052e4:	68e3      	ldr	r3, [r4, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	f000 80a5 	beq.w	8005436 <HAL_SAI_Init+0x17a>
 80052ec:	1e98      	subs	r0, r3, #2
 80052ee:	4243      	negs	r3, r0
 80052f0:	4143      	adcs	r3, r0
 80052f2:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 80052f4:	68a5      	ldr	r5, [r4, #8]
 80052f6:	2d02      	cmp	r5, #2
 80052f8:	f000 80a1 	beq.w	800543e <HAL_SAI_Init+0x182>
 80052fc:	2d03      	cmp	r5, #3
 80052fe:	f000 809c 	beq.w	800543a <HAL_SAI_Init+0x17e>
 8005302:	1e69      	subs	r1, r5, #1
 8005304:	424d      	negs	r5, r1
 8005306:	414d      	adcs	r5, r1
 8005308:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	4953      	ldr	r1, [pc, #332]	@ (800545c <HAL_SAI_Init+0x1a0>)
 800530e:	4854      	ldr	r0, [pc, #336]	@ (8005460 <HAL_SAI_Init+0x1a4>)
 8005310:	428a      	cmp	r2, r1
 8005312:	d003      	beq.n	800531c <HAL_SAI_Init+0x60>
 8005314:	4e53      	ldr	r6, [pc, #332]	@ (8005464 <HAL_SAI_Init+0x1a8>)
 8005316:	42b2      	cmp	r2, r6
 8005318:	f040 8094 	bne.w	8005444 <HAL_SAI_Init+0x188>
    SAI1->GCR = tmpregisterGCR;
 800531c:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005320:	69e3      	ldr	r3, [r4, #28]
 8005322:	b33b      	cbz	r3, 8005374 <HAL_SAI_Init+0xb8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005324:	428a      	cmp	r2, r1
 8005326:	d003      	beq.n	8005330 <HAL_SAI_Init+0x74>
 8005328:	4b4e      	ldr	r3, [pc, #312]	@ (8005464 <HAL_SAI_Init+0x1a8>)
 800532a:	429a      	cmp	r2, r3
 800532c:	f040 808d 	bne.w	800544a <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005330:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005334:	f7ff ff26 	bl	8005184 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	4a4b      	ldr	r2, [pc, #300]	@ (8005468 <HAL_SAI_Init+0x1ac>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d002      	beq.n	8005346 <HAL_SAI_Init+0x8a>
 8005340:	3220      	adds	r2, #32
 8005342:	4293      	cmp	r3, r2
 8005344:	d103      	bne.n	800534e <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005346:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800534a:	f7ff ff1b 	bl	8005184 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800534e:	220a      	movs	r2, #10
 8005350:	69e3      	ldr	r3, [r4, #28]
 8005352:	4350      	muls	r0, r2
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800535a:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 800535e:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005362:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    if ((tmpval % 10) > 8)
 8005364:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8005366:	bf08      	it	eq
 8005368:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800536a:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10;
 800536c:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800536e:	bf04      	itt	eq
 8005370:	085b      	lsreq	r3, r3, #1
 8005372:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005374:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005376:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005378:	f033 0202 	bics.w	r2, r3, #2
 800537c:	d167      	bne.n	800544e <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800537e:	3901      	subs	r1, #1
 8005380:	bf18      	it	ne
 8005382:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005384:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005386:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005388:	4838      	ldr	r0, [pc, #224]	@ (800546c <HAL_SAI_Init+0x1b0>)
 800538a:	6816      	ldr	r6, [r2, #0]
 800538c:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800538e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005390:	4333      	orrs	r3, r6
 8005392:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005394:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005396:	4333      	orrs	r3, r6
 8005398:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800539a:	6810      	ldr	r0, [r2, #0]
 800539c:	4333      	orrs	r3, r6
 800539e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80053a0:	4333      	orrs	r3, r6
 80053a2:	6926      	ldr	r6, [r4, #16]
 80053a4:	4333      	orrs	r3, r6
 80053a6:	6966      	ldr	r6, [r4, #20]
 80053a8:	4333      	orrs	r3, r6
 80053aa:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80053ac:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053ae:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053b2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80053b4:	432b      	orrs	r3, r5
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80053ba:	6853      	ldr	r3, [r2, #4]
 80053bc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80053c0:	f023 030f 	bic.w	r3, r3, #15
 80053c4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053c6:	69a3      	ldr	r3, [r4, #24]
 80053c8:	6851      	ldr	r1, [r2, #4]
 80053ca:	4303      	orrs	r3, r0
 80053cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80053ce:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80053d0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80053d2:	430b      	orrs	r3, r1
 80053d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80053d6:	4b26      	ldr	r3, [pc, #152]	@ (8005470 <HAL_SAI_Init+0x1b4>)
 80053d8:	6891      	ldr	r1, [r2, #8]
 80053da:	400b      	ands	r3, r1
 80053dc:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80053de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80053e0:	6891      	ldr	r1, [r2, #8]
 80053e2:	4303      	orrs	r3, r0
 80053e4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80053e6:	4303      	orrs	r3, r0
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80053ec:	3901      	subs	r1, #1
 80053ee:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80053f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053f2:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80053f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053f8:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80053fa:	68d3      	ldr	r3, [r2, #12]
 80053fc:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8005400:	f023 030f 	bic.w	r3, r3, #15
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	0c1b      	lsrs	r3, r3, #16
 8005408:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800540a:	68d1      	ldr	r1, [r2, #12]
 800540c:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 8005410:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005412:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005414:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005416:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800541c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800541e:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005420:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005424:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8005426:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005428:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 800542c:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8005430:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8005434:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8005436:	2310      	movs	r3, #16
 8005438:	e75c      	b.n	80052f4 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800543a:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800543e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8005442:	e762      	b.n	800530a <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 8005444:	f8c0 3c00 	str.w	r3, [r0, #3072]	@ 0xc00
 8005448:	e76a      	b.n	8005320 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 800544a:	2000      	movs	r0, #0
 800544c:	e774      	b.n	8005338 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800544e:	1e4a      	subs	r2, r1, #1
 8005450:	4251      	negs	r1, r2
 8005452:	4151      	adcs	r1, r2
 8005454:	e796      	b.n	8005384 <HAL_SAI_Init+0xc8>
    return HAL_ERROR;
 8005456:	2001      	movs	r0, #1
 8005458:	e7ec      	b.n	8005434 <HAL_SAI_Init+0x178>
 800545a:	bf00      	nop
 800545c:	40015804 	.word	0x40015804
 8005460:	40015000 	.word	0x40015000
 8005464:	40015824 	.word	0x40015824
 8005468:	40015c04 	.word	0x40015c04
 800546c:	ff05c010 	.word	0xff05c010
 8005470:	fff88000 	.word	0xfff88000

08005474 <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 8005474:	4770      	bx	lr

08005476 <HAL_SAI_DeInit>:
{
 8005476:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8005478:	4605      	mov	r5, r0
 800547a:	b1c0      	cbz	r0, 80054ae <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 800547c:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 800547e:	6806      	ldr	r6, [r0, #0]
 8005480:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 8005482:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 800548a:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800548c:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
 800548e:	f7ff fef7 	bl	8005280 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005492:	6873      	ldr	r3, [r6, #4]
 8005494:	f043 0308 	orr.w	r3, r3, #8
 8005498:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
 800549a:	f7ff ffeb 	bl	8005474 <HAL_SAI_MspDeInit>
  return HAL_OK;
 800549e:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80054a0:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 80054a4:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 80054a8:	f885 407d 	strb.w	r4, [r5, #125]	@ 0x7d
}
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80054ae:	2001      	movs	r0, #1
 80054b0:	e7fc      	b.n	80054ac <HAL_SAI_DeInit+0x36>

080054b2 <HAL_SAI_DMAStop>:
{
 80054b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80054b4:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 80054b8:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d040      	beq.n	8005540 <HAL_SAI_DMAStop+0x8e>
 80054be:	2501      	movs	r5, #1
 80054c0:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  SAI_Disable(hsai);
 80054c4:	f7ff fedc 	bl	8005280 <SAI_Disable.isra.0>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054c8:	6802      	ldr	r2, [r0, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80054ca:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80054cc:	6813      	ldr	r3, [r2, #0]
 80054ce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80054d2:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80054d4:	bb08      	cbnz	r0, 800551a <HAL_SAI_DMAStop+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80054d8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80054da:	b188      	cbz	r0, 8005500 <HAL_SAI_DMAStop+0x4e>
 80054dc:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 80054e0:	2b22      	cmp	r3, #34	@ 0x22
 80054e2:	d10d      	bne.n	8005500 <HAL_SAI_DMAStop+0x4e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80054e4:	f7fd ffff 	bl	80034e6 <HAL_DMA_Abort>
 80054e8:	b150      	cbz	r0, 8005500 <HAL_SAI_DMAStop+0x4e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80054ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	2b80      	cmp	r3, #128	@ 0x80
 80054f0:	d006      	beq.n	8005500 <HAL_SAI_DMAStop+0x4e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 80054f6:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	6853      	ldr	r3, [r2, #4]
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 800550a:	2301      	movs	r3, #1
 800550c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8005510:	2300      	movs	r3, #0
 8005512:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8005516:	4628      	mov	r0, r5
 8005518:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800551a:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800551e:	2b12      	cmp	r3, #18
 8005520:	d1d9      	bne.n	80054d6 <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005522:	f7fd ffe0 	bl	80034e6 <HAL_DMA_Abort>
 8005526:	2800      	cmp	r0, #0
 8005528:	d0d5      	beq.n	80054d6 <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800552a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800552c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552e:	2b80      	cmp	r3, #128	@ 0x80
 8005530:	d0d1      	beq.n	80054d6 <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005532:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 800553e:	e7cb      	b.n	80054d8 <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 8005540:	2502      	movs	r5, #2
 8005542:	e7e8      	b.n	8005516 <HAL_SAI_DMAStop+0x64>

08005544 <HAL_SAI_Transmit_DMA>:
{
 8005544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	460e      	mov	r6, r1
 800554a:	4604      	mov	r4, r0
 800554c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800554e:	f7fd fbd3 	bl	8002cf8 <HAL_GetTick>
 8005552:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0))
 8005554:	b34e      	cbz	r6, 80055aa <HAL_SAI_Transmit_DMA+0x66>
 8005556:	b345      	cbz	r5, 80055aa <HAL_SAI_Transmit_DMA+0x66>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005558:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800555c:	2b01      	cmp	r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	d153      	bne.n	800560a <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_LOCK(hsai);
 8005562:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d04f      	beq.n	800560a <HAL_SAI_Transmit_DMA+0xc6>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800556a:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800556e:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005570:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005572:	4631      	mov	r1, r6
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005574:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005578:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800557c:	4b24      	ldr	r3, [pc, #144]	@ (8005610 <HAL_SAI_Transmit_DMA+0xcc>)
    __HAL_LOCK(hsai);
 800557e:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 8005582:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8005586:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 800558a:	6666      	str	r6, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800558c:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800558e:	4b21      	ldr	r3, [pc, #132]	@ (8005614 <HAL_SAI_Transmit_DMA+0xd0>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005590:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005592:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005594:	4b20      	ldr	r3, [pc, #128]	@ (8005618 <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005596:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8005598:	e9c0 3813 	strd	r3, r8, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800559c:	462b      	mov	r3, r5
 800559e:	f7fd ff65 	bl	800346c <HAL_DMA_Start_IT>
 80055a2:	4605      	mov	r5, r0
 80055a4:	b128      	cbz	r0, 80055b2 <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 80055a6:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 80055aa:	2501      	movs	r5, #1
}
 80055ac:	4628      	mov	r0, r5
 80055ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80055b2:	4601      	mov	r1, r0
 80055b4:	4620      	mov	r0, r4
 80055b6:	f7ff fe4d 	bl	8005254 <SAI_InterruptFlag>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	4302      	orrs	r2, r0
 80055c0:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80055c8:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	695e      	ldr	r6, [r3, #20]
 80055ce:	f416 26e0 	ands.w	r6, r6, #458752	@ 0x70000
 80055d2:	d00a      	beq.n	80055ea <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	03d2      	lsls	r2, r2, #15
 80055d8:	d403      	bmi.n	80055e2 <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80055e0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80055e2:	2300      	movs	r3, #0
 80055e4:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80055e8:	e7e0      	b.n	80055ac <HAL_SAI_Transmit_DMA+0x68>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80055ea:	f7fd fb85 	bl	8002cf8 <HAL_GetTick>
 80055ee:	1bc0      	subs	r0, r0, r7
 80055f0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80055f4:	d9e9      	bls.n	80055ca <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80055f6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 80055fa:	2503      	movs	r5, #3
        __HAL_UNLOCK(hsai);
 80055fc:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005604:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8005608:	e7d0      	b.n	80055ac <HAL_SAI_Transmit_DMA+0x68>
    __HAL_LOCK(hsai);
 800560a:	2502      	movs	r5, #2
 800560c:	e7ce      	b.n	80055ac <HAL_SAI_Transmit_DMA+0x68>
 800560e:	bf00      	nop
 8005610:	080056f1 	.word	0x080056f1
 8005614:	080056b9 	.word	0x080056b9
 8005618:	0800573d 	.word	0x0800573d

0800561c <HAL_SAI_Receive_DMA>:
{
 800561c:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 800561e:	460a      	mov	r2, r1
{
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 8005624:	b331      	cbz	r1, 8005674 <HAL_SAI_Receive_DMA+0x58>
 8005626:	b32b      	cbz	r3, 8005674 <HAL_SAI_Receive_DMA+0x58>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005628:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
 800562c:	2901      	cmp	r1, #1
 800562e:	b2c8      	uxtb	r0, r1
 8005630:	d13a      	bne.n	80056a8 <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 8005632:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
 8005636:	2901      	cmp	r1, #1
 8005638:	d036      	beq.n	80056a8 <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800563a:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800563c:	2122      	movs	r1, #34	@ 0x22
    __HAL_LOCK(hsai);
 800563e:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005642:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005646:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005648:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800564c:	4917      	ldr	r1, [pc, #92]	@ (80056ac <HAL_SAI_Receive_DMA+0x90>)
    hsai->pBuffPtr = pData;
 800564e:	6662      	str	r2, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 8005650:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8005654:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005658:	6401      	str	r1, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800565a:	4915      	ldr	r1, [pc, #84]	@ (80056b0 <HAL_SAI_Receive_DMA+0x94>)
 800565c:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800565e:	4915      	ldr	r1, [pc, #84]	@ (80056b4 <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8005660:	e9c0 1613 	strd	r1, r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005664:	6821      	ldr	r1, [r4, #0]
 8005666:	311c      	adds	r1, #28
 8005668:	f7fd ff00 	bl	800346c <HAL_DMA_Start_IT>
 800566c:	4605      	mov	r5, r0
 800566e:	b120      	cbz	r0, 800567a <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 8005670:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8005674:	2501      	movs	r5, #1
}
 8005676:	4628      	mov	r0, r5
 8005678:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800567a:	4601      	mov	r1, r0
 800567c:	4620      	mov	r0, r4
 800567e:	f7ff fde9 	bl	8005254 <SAI_InterruptFlag>
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	4302      	orrs	r2, r0
 8005688:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005690:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	03d2      	lsls	r2, r2, #15
 8005696:	d403      	bmi.n	80056a0 <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800569e:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80056a0:	2300      	movs	r3, #0
 80056a2:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80056a6:	e7e6      	b.n	8005676 <HAL_SAI_Receive_DMA+0x5a>
    __HAL_LOCK(hsai);
 80056a8:	2502      	movs	r5, #2
 80056aa:	e7e4      	b.n	8005676 <HAL_SAI_Receive_DMA+0x5a>
 80056ac:	08005733 	.word	0x08005733
 80056b0:	080056fb 	.word	0x080056fb
 80056b4:	0800573d 	.word	0x0800573d

080056b8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80056b8:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056ba:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056bc:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c2:	d011      	beq.n	80056e8 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056c4:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 80056c6:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056c8:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056ca:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 80056cc:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80056d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056d4:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80056d6:	f7ff fdbd 	bl	8005254 <SAI_InterruptFlag>
 80056da:	692b      	ldr	r3, [r5, #16]
 80056dc:	ea23 0300 	bic.w	r3, r3, r0
 80056e0:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80056e8:	4620      	mov	r0, r4
 80056ea:	f7fc faff 	bl	8001cec <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80056ee:	bd38      	pop	{r3, r4, r5, pc}

080056f0 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80056f0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80056f2:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 80056f4:	f7fc fafe 	bl	8001cf4 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80056f8:	bd08      	pop	{r3, pc}

080056fa <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80056fa:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056fc:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005704:	d011      	beq.n	800572a <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005706:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8005708:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800570a:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005712:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8005714:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005718:	f7ff fd9c 	bl	8005254 <SAI_InterruptFlag>
 800571c:	692b      	ldr	r3, [r5, #16]
 800571e:	ea23 0300 	bic.w	r3, r3, r0
 8005722:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005724:	2301      	movs	r3, #1
 8005726:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800572a:	4620      	mov	r0, r4
 800572c:	f7fc fc4e 	bl	8001fcc <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005730:	bd38      	pop	{r3, r4, r5, pc}

08005732 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005732:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8005734:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005736:	f7fc fc4d 	bl	8001fd4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800573a:	bd08      	pop	{r3, pc}

0800573c <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800573c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800573e:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005740:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005748:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800574c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800574e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005750:	2b01      	cmp	r3, #1
 8005752:	d003      	beq.n	800575c <SAI_DMAError+0x20>
 8005754:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8005756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10c      	bne.n	8005776 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800575c:	6802      	ldr	r2, [r0, #0]
 800575e:	6813      	ldr	r3, [r2, #0]
 8005760:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005764:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005766:	f7ff fd8b 	bl	8005280 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800576a:	2301      	movs	r3, #1
 800576c:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005776:	f7fc fc31 	bl	8001fdc <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800577a:	bd08      	pop	{r3, pc}

0800577c <HAL_SAI_GetState>:
  return hsai->State;
 800577c:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 8005780:	4770      	bx	lr

08005782 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005782:	4770      	bx	lr

08005784 <HAL_SDRAM_Init>:
{
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8005788:	4604      	mov	r4, r0
 800578a:	b1c8      	cbz	r0, 80057c0 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800578c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005790:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005794:	b91b      	cbnz	r3, 800579e <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8005796:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800579a:	f7ff fff2 	bl	8005782 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800579e:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057a0:	1d21      	adds	r1, r4, #4
 80057a2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057a8:	f000 f843 	bl	8005832 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057ac:	6862      	ldr	r2, [r4, #4]
 80057ae:	4629      	mov	r1, r5
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	f000 f876 	bl	80058a2 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057b6:	2301      	movs	r3, #1
  return HAL_OK;
 80057b8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057ba:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80057be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80057c0:	2001      	movs	r0, #1
 80057c2:	e7fc      	b.n	80057be <HAL_SDRAM_Init+0x3a>

080057c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80057c4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057c6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80057ca:	4605      	mov	r5, r0
 80057cc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80057ce:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80057d0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80057d2:	d010      	beq.n	80057f6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80057d4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80057d8:	2c01      	cmp	r4, #1
 80057da:	d110      	bne.n	80057fe <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057dc:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80057de:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057e0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80057e4:	f000 f893 	bl	800590e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d104      	bne.n	80057f8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80057ee:	2305      	movs	r3, #5
 80057f0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80057f4:	2000      	movs	r0, #0
}
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80057f8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 80057fc:	e7fa      	b.n	80057f4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80057fe:	2001      	movs	r0, #1
 8005800:	e7f9      	b.n	80057f6 <HAL_SDRAM_SendCommand+0x32>

08005802 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005802:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005804:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8005808:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800580a:	2b02      	cmp	r3, #2
 800580c:	b2d8      	uxtb	r0, r3
 800580e:	d00d      	beq.n	800582c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005810:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005814:	2b01      	cmp	r3, #1
 8005816:	b2dd      	uxtb	r5, r3
 8005818:	d109      	bne.n	800582e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800581a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800581c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800581e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005822:	f000 f886 	bl	8005932 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005826:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005828:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800582c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800582e:	2001      	movs	r0, #1
 8005830:	e7fc      	b.n	800582c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005832 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005836:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800583a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800583e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8005842:	ea43 0308 	orr.w	r3, r3, r8
 8005846:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800584a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800584e:	6809      	ldr	r1, [r1, #0]
 8005850:	b991      	cbnz	r1, 8005878 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005852:	ea43 030e 	orr.w	r3, r3, lr
 8005856:	6801      	ldr	r1, [r0, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800585e:	ea43 030c 	orr.w	r3, r3, ip
 8005862:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8005866:	433b      	orrs	r3, r7
 8005868:	4333      	orrs	r3, r6
 800586a:	432b      	orrs	r3, r5
 800586c:	4323      	orrs	r3, r4
 800586e:	430b      	orrs	r3, r1
 8005870:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8005872:	2000      	movs	r0, #0
 8005874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005878:	6801      	ldr	r1, [r0, #0]
 800587a:	ea43 030e 	orr.w	r3, r3, lr
 800587e:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8005882:	430b      	orrs	r3, r1
 8005884:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005886:	ea42 030c 	orr.w	r3, r2, ip
 800588a:	6841      	ldr	r1, [r0, #4]
 800588c:	433b      	orrs	r3, r7
 800588e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8005892:	4333      	orrs	r3, r6
 8005894:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8005898:	432b      	orrs	r3, r5
 800589a:	4323      	orrs	r3, r4
 800589c:	4313      	orrs	r3, r2
 800589e:	6043      	str	r3, [r0, #4]
 80058a0:	e7e7      	b.n	8005872 <FMC_SDRAM_Init+0x40>

080058a2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058a2:	68cb      	ldr	r3, [r1, #12]
 80058a4:	f103 3cff 	add.w	ip, r3, #4294967295
 80058a8:	694b      	ldr	r3, [r1, #20]
{
 80058aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058ac:	3b01      	subs	r3, #1
 80058ae:	680f      	ldr	r7, [r1, #0]
 80058b0:	684c      	ldr	r4, [r1, #4]
 80058b2:	688e      	ldr	r6, [r1, #8]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	690d      	ldr	r5, [r1, #16]
 80058b8:	3c01      	subs	r4, #1
 80058ba:	6989      	ldr	r1, [r1, #24]
 80058bc:	3e01      	subs	r6, #1
 80058be:	3d01      	subs	r5, #1
 80058c0:	3f01      	subs	r7, #1
 80058c2:	3901      	subs	r1, #1
 80058c4:	0124      	lsls	r4, r4, #4
 80058c6:	0236      	lsls	r6, r6, #8
 80058c8:	042d      	lsls	r5, r5, #16
 80058ca:	0609      	lsls	r1, r1, #24
 80058cc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80058d0:	b95a      	cbnz	r2, 80058ea <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058d2:	433b      	orrs	r3, r7
 80058d4:	6882      	ldr	r2, [r0, #8]
 80058d6:	4323      	orrs	r3, r4
 80058d8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80058dc:	4333      	orrs	r3, r6
 80058de:	432b      	orrs	r3, r5
 80058e0:	430b      	orrs	r3, r1
 80058e2:	4313      	orrs	r3, r2
 80058e4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80058e6:	2000      	movs	r0, #0
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058ea:	6882      	ldr	r2, [r0, #8]
 80058ec:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80058f0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80058f4:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80058f6:	ea44 0306 	orr.w	r3, r4, r6
 80058fa:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80058fc:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80058fe:	68c2      	ldr	r2, [r0, #12]
 8005900:	432b      	orrs	r3, r5
 8005902:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8005906:	430b      	orrs	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	60c3      	str	r3, [r0, #12]
 800590c:	e7eb      	b.n	80058e6 <FMC_SDRAM_Timing_Init+0x44>

0800590e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800590e:	6902      	ldr	r2, [r0, #16]
{
 8005910:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005912:	e9d1 3400 	ldrd	r3, r4, [r1]
 8005916:	0d92      	lsrs	r2, r2, #22
 8005918:	4323      	orrs	r3, r4
 800591a:	68cc      	ldr	r4, [r1, #12]
 800591c:	0592      	lsls	r2, r2, #22
 800591e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8005922:	4313      	orrs	r3, r2
 8005924:	688a      	ldr	r2, [r1, #8]
 8005926:	3a01      	subs	r2, #1
 8005928:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800592c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800592e:	2000      	movs	r0, #0
 8005930:	bd10      	pop	{r4, pc}

08005932 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005932:	6943      	ldr	r3, [r0, #20]
 8005934:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005938:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800593c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005940:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8005942:	2000      	movs	r0, #0
 8005944:	4770      	bx	lr
	...

08005948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005980 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800594c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800594e:	e003      	b.n	8005958 <LoopCopyDataInit>

08005950 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005952:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005954:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005956:	3104      	adds	r1, #4

08005958 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005958:	480b      	ldr	r0, [pc, #44]	@ (8005988 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800595a:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800595c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800595e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005960:	d3f6      	bcc.n	8005950 <CopyDataInit>
  ldr  r2, =_sbss
 8005962:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005964:	e002      	b.n	800596c <LoopFillZerobss>

08005966 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005966:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005968:	f842 3b04 	str.w	r3, [r2], #4

0800596c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800596c:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800596e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005970:	d3f9      	bcc.n	8005966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005972:	f7fd f955 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005976:	f001 ffb9 	bl	80078ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800597a:	f000 fd37 	bl	80063ec <main>
  bx  lr    
 800597e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005980:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005984:	08010f3c 	.word	0x08010f3c
  ldr  r0, =_sdata
 8005988:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800598c:	20000404 	.word	0x20000404
  ldr  r2, =_sbss
 8005990:	20000420 	.word	0x20000420
  ldr  r3, = _ebss
 8005994:	20024970 	.word	0x20024970

08005998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005998:	e7fe      	b.n	8005998 <ADC_IRQHandler>

0800599a <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800599a:	2001      	movs	r0, #1
 800599c:	4770      	bx	lr

0800599e <_kill>:

int _kill(int pid, int sig)
{
 800599e:	b508      	push	{r3, lr}
	errno = EINVAL;
 80059a0:	f001 ff9e 	bl	80078e0 <__errno>
 80059a4:	2316      	movs	r3, #22
 80059a6:	6003      	str	r3, [r0, #0]
	return -1;
}
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	bd08      	pop	{r3, pc}

080059ae <_exit>:

void _exit (int status)
{
 80059ae:	b508      	push	{r3, lr}
	errno = EINVAL;
 80059b0:	f001 ff96 	bl	80078e0 <__errno>
 80059b4:	2316      	movs	r3, #22
 80059b6:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80059b8:	e7fe      	b.n	80059b8 <_exit+0xa>

080059ba <_read>:
}

int _read (int file, char *ptr, int len)
{
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	460d      	mov	r5, r1
 80059be:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059c0:	460e      	mov	r6, r1
 80059c2:	1b73      	subs	r3, r6, r5
 80059c4:	429c      	cmp	r4, r3
 80059c6:	dc01      	bgt.n	80059cc <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80059c8:	4620      	mov	r0, r4
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80059cc:	f3af 8000 	nop.w
 80059d0:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d4:	e7f5      	b.n	80059c2 <_read+0x8>

080059d6 <_write>:

int _write(int file, char *ptr, int len)
{
 80059d6:	b570      	push	{r4, r5, r6, lr}
 80059d8:	460d      	mov	r5, r1
 80059da:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059dc:	460e      	mov	r6, r1
 80059de:	1b73      	subs	r3, r6, r5
 80059e0:	429c      	cmp	r4, r3
 80059e2:	dc01      	bgt.n	80059e8 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80059e4:	4620      	mov	r0, r4
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80059e8:	f816 0b01 	ldrb.w	r0, [r6], #1
 80059ec:	f001 f920 	bl	8006c30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059f0:	e7f5      	b.n	80059de <_write+0x8>
	...

080059f4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80059f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005a20 <_sbrk+0x2c>)
 80059f6:	6811      	ldr	r1, [r2, #0]
{
 80059f8:	b508      	push	{r3, lr}
 80059fa:	4603      	mov	r3, r0
	if (heap_end == 0)
 80059fc:	b909      	cbnz	r1, 8005a02 <_sbrk+0xe>
		heap_end = &end;
 80059fe:	4909      	ldr	r1, [pc, #36]	@ (8005a24 <_sbrk+0x30>)
 8005a00:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8005a02:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005a04:	4669      	mov	r1, sp
 8005a06:	4403      	add	r3, r0
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	d906      	bls.n	8005a1a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005a0c:	f001 ff68 	bl	80078e0 <__errno>
 8005a10:	230c      	movs	r3, #12
 8005a12:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005a18:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8005a1a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8005a1c:	e7fc      	b.n	8005a18 <_sbrk+0x24>
 8005a1e:	bf00      	nop
 8005a20:	20000a10 	.word	0x20000a10
 8005a24:	20024970 	.word	0x20024970

08005a28 <_close>:

int _close(int file)
{
	return -1;
}
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	4770      	bx	lr

08005a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8005a32:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005a34:	604b      	str	r3, [r1, #4]
}
 8005a36:	4770      	bx	lr

08005a38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005a38:	2001      	movs	r0, #1
 8005a3a:	4770      	bx	lr

08005a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	4770      	bx	lr

08005a40 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8005a40:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8005a42:	4c07      	ldr	r4, [pc, #28]	@ (8005a60 <GetData+0x20>)
 8005a44:	6825      	ldr	r5, [r4, #0]
 8005a46:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 8005a48:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8005a4a:	1846      	adds	r6, r0, r1
 8005a4c:	42b5      	cmp	r5, r6
 8005a4e:	d901      	bls.n	8005a54 <GetData+0x14>
 8005a50:	4298      	cmp	r0, r3
 8005a52:	d100      	bne.n	8005a56 <GetData+0x16>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }
  return ReadDataNbr;
}
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8005a56:	f814 6b01 	ldrb.w	r6, [r4], #1
 8005a5a:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	e7f4      	b.n	8005a4a <GetData+0xa>
 8005a60:	20000a20 	.word	0x20000a20

08005a64 <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005a64:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8005a68:	4a06      	ldr	r2, [pc, #24]	@ (8005a84 <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 8005a6a:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8005a6e:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8005a72:	3020      	adds	r0, #32
    while (op_size > 0) {
 8005a74:	4298      	cmp	r0, r3
 8005a76:	d1fa      	bne.n	8005a6e <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 8005a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a7c:	f3bf 8f6f 	isb	sy
}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <AUDIO_Start>:
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005a8a:	4d11      	ldr	r5, [pc, #68]	@ (8005ad0 <AUDIO_Start+0x48>)
 8005a8c:	2400      	movs	r4, #0
  bytesread = GetData( (void *)AudioStartAddress,
 8005a8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  AudioFileSize = audio_file_size;
 8005a92:	462a      	mov	r2, r5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005a94:	f885 4824 	strb.w	r4, [r5, #2084]	@ 0x824
  AudioStartAddress = audio_start_address;
 8005a98:	f8c5 0828 	str.w	r0, [r5, #2088]	@ 0x828
  AudioFileSize = audio_file_size;
 8005a9c:	f842 1b20 	str.w	r1, [r2], #32
  bytesread = GetData( (void *)AudioStartAddress,
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f7ff ffcd 	bl	8005a40 <GetData>
  if(bytesread > 0)
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	b178      	cbz	r0, 8005aca <AUDIO_Start+0x42>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005aaa:	4610      	mov	r0, r2
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8005aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005ab0:	f7ff ffd8 	bl	8005a64 <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8005ab4:	f105 0020 	add.w	r0, r5, #32
 8005ab8:	f7fc f8ce 	bl	8001c58 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 8005abc:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 8005abe:	4620      	mov	r0, r4
    buffer_ctl.fptr = bytesread;
 8005ac0:	f8c5 6820 	str.w	r6, [r5, #2080]	@ 0x820
    audio_state = AUDIO_STATE_PLAYING;      
 8005ac4:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
}
 8005ac8:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_ERROR_IO;
 8005aca:	2002      	movs	r0, #2
 8005acc:	e7fc      	b.n	8005ac8 <AUDIO_Start+0x40>
 8005ace:	bf00      	nop
 8005ad0:	20000a20 	.word	0x20000a20

08005ad4 <AUDIO_Process>:
{
 8005ad4:	b538      	push	{r3, r4, r5, lr}
  switch(audio_state)
 8005ad6:	4c22      	ldr	r4, [pc, #136]	@ (8005b60 <AUDIO_Process+0x8c>)
 8005ad8:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d13c      	bne.n	8005b5a <AUDIO_Process+0x86>
    if(buffer_ctl.fptr >= AudioFileSize)
 8005ae0:	f8d4 2820 	ldr.w	r2, [r4, #2080]	@ 0x820
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	429a      	cmp	r2, r3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8005aea:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
      buffer_ctl.fptr = 0; 
 8005aee:	bf24      	itt	cs
 8005af0:	f8c4 5820 	strcs.w	r5, [r4, #2080]	@ 0x820
      error_state = AUDIO_ERROR_EOF;
 8005af4:	2503      	movcs	r5, #3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d114      	bne.n	8005b24 <AUDIO_Process+0x50>
      bytesread = GetData((void *)AudioStartAddress,
 8005afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005afe:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <AUDIO_Process+0x90>)
 8005b00:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 8005b04:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8005b08:	f7ff ff9a 	bl	8005a40 <GetData>
      if( bytesread >0)
 8005b0c:	b150      	cbz	r0, 8005b24 <AUDIO_Process+0x50>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread; 
 8005b14:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8005b18:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005b1a:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread; 
 8005b1c:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005b20:	f7ff ffa0 	bl	8005a64 <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8005b24:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d114      	bne.n	8005b56 <AUDIO_Process+0x82>
      bytesread = GetData((void *)AudioStartAddress,
 8005b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8005b68 <AUDIO_Process+0x94>)
 8005b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b32:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 8005b36:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8005b3a:	f7ff ff81 	bl	8005a40 <GetData>
      if( bytesread > 0)
 8005b3e:	b150      	cbz	r0, 8005b56 <AUDIO_Process+0x82>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread;
 8005b46:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8005b4a:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8005b4c:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread;
 8005b4e:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8005b52:	f7ff ff87 	bl	8005a64 <SCB_CleanDCache_by_Addr.constprop.0>
}
 8005b56:	4628      	mov	r0, r5
 8005b58:	bd38      	pop	{r3, r4, r5, pc}
    error_state = AUDIO_ERROR_NOTREADY;
 8005b5a:	2501      	movs	r5, #1
 8005b5c:	e7fb      	b.n	8005b56 <AUDIO_Process+0x82>
 8005b5e:	bf00      	nop
 8005b60:	20000a20 	.word	0x20000a20
 8005b64:	20000a40 	.word	0x20000a40
 8005b68:	20000e40 	.word	0x20000e40

08005b6c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8005b6c:	4b03      	ldr	r3, [pc, #12]	@ (8005b7c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8005b6e:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 8005b72:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8005b74:	bf08      	it	eq
 8005b76:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 8005b7a:	4770      	bx	lr
 8005b7c:	20000a20 	.word	0x20000a20

08005b80 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8005b80:	4b04      	ldr	r3, [pc, #16]	@ (8005b94 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8005b82:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 8005b86:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8005b88:	bf04      	itt	eq
 8005b8a:	2201      	moveq	r2, #1
 8005b8c:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000a20 	.word	0x20000a20

08005b98 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8005b98:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8005b9a:	4806      	ldr	r0, [pc, #24]	@ (8005bb4 <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 8005b9c:	f7fc fbae 	bl	80022fc <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 8005ba0:	200e      	movs	r0, #14
 8005ba2:	4905      	ldr	r1, [pc, #20]	@ (8005bb8 <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 8005ba4:	f7fc fd32 	bl	800260c <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005ba8:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8005baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005bae:	f7fb bf77 	b.w	8001aa0 <BSP_PB_GetState>
 8005bb2:	bf00      	nop
 8005bb4:	ffff0000 	.word	0xffff0000
 8005bb8:	080106c0 	.word	0x080106c0

08005bbc <AudioRec_SetHint>:
static uint16_t internal_buffer[AUDIO_BLOCK_SIZE]; 	// 16 bit * 16,000 element, per 1 block
int stop_record;
char str_buf[40];

void AudioRec_SetHint()
{
 8005bbc:	b510      	push	{r4, lr}
	BSP_LCD_Clear(LCD_COLOR_WHITE);

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005bbe:	4c26      	ldr	r4, [pc, #152]	@ (8005c58 <AudioRec_SetHint+0x9c>)
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	f7fc fbbe 	bl	8002344 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7fc fb8b 	bl	80022e4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8005bce:	f7fc fb2f 	bl	8002230 <BSP_LCD_GetXSize>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	b282      	uxth	r2, r0
 8005bd6:	235a      	movs	r3, #90	@ 0x5a
 8005bd8:	4608      	mov	r0, r1
 8005bda:	f7fc fd93 	bl	8002704 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005bde:	f04f 30ff 	mov.w	r0, #4294967295
 8005be2:	f7fc fb7f 	bl	80022e4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7fc fb88 	bl	80022fc <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8005bec:	481b      	ldr	r0, [pc, #108]	@ (8005c5c <AudioRec_SetHint+0xa0>)
 8005bee:	f7fc fb91 	bl	8002314 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "AUDIO RECORD EXAMPLE", CENTER_MODE);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c60 <AudioRec_SetHint+0xa4>)
 8005bf8:	4608      	mov	r0, r1
 8005bfa:	f7fc fcb3 	bl	8002564 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8005bfe:	4819      	ldr	r0, [pc, #100]	@ (8005c64 <AudioRec_SetHint+0xa8>)
 8005c00:	f7fc fb88 	bl	8002314 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t*) "Press User button for next menu", CENTER_MODE);
 8005c04:	2301      	movs	r3, #1
 8005c06:	4a18      	ldr	r2, [pc, #96]	@ (8005c68 <AudioRec_SetHint+0xac>)
 8005c08:	211e      	movs	r1, #30
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7fc fcaa 	bl	8002564 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7fc fb67 	bl	80022e4 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8005c16:	f7fc fb0b 	bl	8002230 <BSP_LCD_GetXSize>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7fc fb14 	bl	8002248 <BSP_LCD_GetYSize>
 8005c20:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 8005c24:	f1a4 0214 	sub.w	r2, r4, #20
 8005c28:	2164      	movs	r1, #100	@ 0x64
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	b292      	uxth	r2, r2
 8005c30:	f7fc fc02 	bl	8002438 <BSP_LCD_DrawRect>
	BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8005c34:	f7fc fafc 	bl	8002230 <BSP_LCD_GetXSize>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	f7fc fb05 	bl	8002248 <BSP_LCD_GetYSize>
 8005c3e:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 8005c42:	f1a4 0216 	sub.w	r2, r4, #22
 8005c46:	2165      	movs	r1, #101	@ 0x65
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	200b      	movs	r0, #11
 8005c4c:	b292      	uxth	r2, r2
}
 8005c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8005c52:	f7fc bbf1 	b.w	8002438 <BSP_LCD_DrawRect>
 8005c56:	bf00      	nop
 8005c58:	ff0000ff 	.word	0xff0000ff
 8005c5c:	2000004c 	.word	0x2000004c
 8005c60:	080106d7 	.word	0x080106d7
 8005c64:	2000005c 	.word	0x2000005c
 8005c68:	08010558 	.word	0x08010558

08005c6c <AUDIO_Effect>:

void AUDIO_Effect(uint32_t bytes_size)
{
 8005c6c:	4602      	mov	r2, r0
	int16_t* original = (int16_t*) AUDIO_REC_START_ADDR;
	int16_t* output = (int16_t*) OUTPUT_ADDR;
	uint32_t lenght =  bytes_size / 2;

	memcpy(output, original, bytes_size);
 8005c6e:	4927      	ldr	r1, [pc, #156]	@ (8005d0c <AUDIO_Effect+0xa0>)
{
 8005c70:	b510      	push	{r4, lr}
	uint32_t lenght =  bytes_size / 2;
 8005c72:	0844      	lsrs	r4, r0, #1
	memcpy(output, original, bytes_size);
 8005c74:	4826      	ldr	r0, [pc, #152]	@ (8005d10 <AUDIO_Effect+0xa4>)
 8005c76:	f001 fe60 	bl	800793a <memcpy>
	if (EffectIndex == 0)
 8005c7a:	4b26      	ldr	r3, [pc, #152]	@ (8005d14 <AUDIO_Effect+0xa8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	b983      	cbnz	r3, 8005ca2 <AUDIO_Effect+0x36>
	{
		ApplyDistortion(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2); //Gmax2.4f, Gmin0.0f
 8005c80:	4a25      	ldr	r2, [pc, #148]	@ (8005d18 <AUDIO_Effect+0xac>)
 8005c82:	4923      	ldr	r1, [pc, #140]	@ (8005d10 <AUDIO_Effect+0xa4>)
 8005c84:	edd2 7a0f 	vldr	s15, [r2, #60]	@ 0x3c
 8005c88:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c92:	481e      	ldr	r0, [pc, #120]	@ (8005d0c <AUDIO_Effect+0xa0>)
	else if (EffectIndex == 5)
	{
		ApplyDelay(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter2);
	}

}
 8005c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ApplyDistortion(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2); //Gmax2.4f, Gmin0.0f
 8005c98:	ee17 3a90 	vmov	r3, s15
 8005c9c:	b21b      	sxth	r3, r3
 8005c9e:	f000 b9d7 	b.w	8006050 <ApplyDistortion>
	else if (EffectIndex == 1)
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d112      	bne.n	8005ccc <AUDIO_Effect+0x60>
		ApplyFuzz(original, output, lenght, effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <AUDIO_Effect+0xac>)
 8005ca8:	4919      	ldr	r1, [pc, #100]	@ (8005d10 <AUDIO_Effect+0xa4>)
 8005caa:	edd2 7a21 	vldr	s15, [r2, #132]	@ 0x84
 8005cae:	edd2 0a20 	vldr	s1, [r2, #128]	@ 0x80
 8005cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cb6:	ed92 0a22 	vldr	s0, [r2, #136]	@ 0x88
 8005cba:	4814      	ldr	r0, [pc, #80]	@ (8005d0c <AUDIO_Effect+0xa0>)
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	ee17 3a90 	vmov	r3, s15
}
 8005cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ApplyFuzz(original, output, lenght, effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	f000 ba0e 	b.w	80060e8 <ApplyFuzz>
	else if (EffectIndex == 3)
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d10b      	bne.n	8005ce8 <AUDIO_Effect+0x7c>
		ApplyRotaryEffect(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 8005cd0:	4b11      	ldr	r3, [pc, #68]	@ (8005d18 <AUDIO_Effect+0xac>)
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	490e      	ldr	r1, [pc, #56]	@ (8005d10 <AUDIO_Effect+0xa4>)
 8005cd6:	edd3 0a45 	vldr	s1, [r3, #276]	@ 0x114
 8005cda:	ed93 0a44 	vldr	s0, [r3, #272]	@ 0x110
 8005cde:	480b      	ldr	r0, [pc, #44]	@ (8005d0c <AUDIO_Effect+0xa0>)
}
 8005ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ApplyRotaryEffect(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 8005ce4:	f000 bdb8 	b.w	8006858 <ApplyRotaryEffect>
	else if (EffectIndex == 5)
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d10d      	bne.n	8005d08 <AUDIO_Effect+0x9c>
		ApplyDelay(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter2);
 8005cec:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <AUDIO_Effect+0xac>)
 8005cee:	4622      	mov	r2, r4
 8005cf0:	4907      	ldr	r1, [pc, #28]	@ (8005d10 <AUDIO_Effect+0xa4>)
 8005cf2:	ed93 1a69 	vldr	s2, [r3, #420]	@ 0x1a4
 8005cf6:	edd3 0a6a 	vldr	s1, [r3, #424]	@ 0x1a8
 8005cfa:	ed93 0a68 	vldr	s0, [r3, #416]	@ 0x1a0
 8005cfe:	4803      	ldr	r0, [pc, #12]	@ (8005d0c <AUDIO_Effect+0xa0>)
}
 8005d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ApplyDelay(original, output, lenght, effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter2);
 8005d04:	f000 b910 	b.w	8005f28 <ApplyDelay>
}
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop
 8005d0c:	c0115800 	.word	0xc0115800
 8005d10:	c0192800 	.word	0xc0192800
 8005d14:	200206f0 	.word	0x200206f0
 8005d18:	20000084 	.word	0x20000084

08005d1c <wait_buffer_offset>:

void wait_buffer_offset(int state)
{
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4605      	mov	r5, r0
	while (audio_rec_buffer_state != state) {
 8005d20:	4c06      	ldr	r4, [pc, #24]	@ (8005d3c <wait_buffer_offset+0x20>)
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	d102      	bne.n	8005d2e <wait_buffer_offset+0x12>
		if (CheckForUserInput()) {
			stop_record = 1;
		}
	}
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	6063      	str	r3, [r4, #4]
}
 8005d2c:	bd38      	pop	{r3, r4, r5, pc}
		if (CheckForUserInput()) {
 8005d2e:	f000 fd65 	bl	80067fc <CheckForUserInput>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d0f5      	beq.n	8005d22 <wait_buffer_offset+0x6>
			stop_record = 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	e7f2      	b.n	8005d22 <wait_buffer_offset+0x6>
 8005d3c:	20001254 	.word	0x20001254

08005d40 <AudioRec_demo>:

void AudioRec_demo()
{
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	AudioRec_SetHint();
 8005d44:	f7ff ff3a 	bl	8005bbc <AudioRec_SetHint>

	// (16 bit * 16,000 element)   /   ( 16 bit * 16 kHz * 2 channel ) = 0.5 s
	// 0.5 s * 60 block = 30 s     ; if AUDIO_NB_BLOCKS = 60
	uint8_t init_status = BSP_AUDIO_IN_InitEx(
 8005d48:	2302      	movs	r3, #2
 8005d4a:	2210      	movs	r2, #16
 8005d4c:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8005d50:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8005d54:	f7fc f9e6 	bl	8002124 <BSP_AUDIO_IN_InitEx>
 8005d58:	4604      	mov	r4, r0
		DEFAULT_AUDIO_IN_FREQ, 				    // sample rate  : 16 kHz
		DEFAULT_AUDIO_IN_BIT_RESOLUTION, 		// resolution   : 16 bit
		DEFAULT_AUDIO_IN_CHANNEL_NBR			// Stereo		: 2 channel
	);

	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5e:	f7fc facd 	bl	80022fc <BSP_LCD_SetBackColor>

	if (init_status != AUDIO_OK) {
 8005d62:	b164      	cbz	r4, 8005d7e <AudioRec_demo+0x3e>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005d64:	4841      	ldr	r0, [pc, #260]	@ (8005e6c <AudioRec_demo+0x12c>)
 8005d66:	f7fc fabd 	bl	80022e4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "  AUDIO RECORD INIT FAIL", CENTER_MODE);
 8005d6a:	f7fc fa6d 	bl	8002248 <BSP_LCD_GetYSize>
 8005d6e:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 8005d72:	2301      	movs	r3, #1
 8005d74:	4a3e      	ldr	r2, [pc, #248]	@ (8005e70 <AudioRec_demo+0x130>)
 8005d76:	b289      	uxth	r1, r1
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7fc fbf3 	bl	8002564 <BSP_LCD_DisplayStringAt>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005d7e:	483d      	ldr	r0, [pc, #244]	@ (8005e74 <AudioRec_demo+0x134>)
	//                             +----------------------------+----------------------------+----------------------------+----------------------------+
	// Address (8 bit):   AUDIO_REC_START_ADDR         AUDIO_REC_START_ADDR         AUDIO_REC_START_ADDR         AUDIO_REC_START_ADDR         AUDIO_REC_START_ADDR
	//                                                 AUDIO_BLOCK_SIZE             1 * AUDIO_BLOCK_SIZE * 2     1 * AUDIO_BLOCK_SIZE * 2     2 * AUDIO_BLOCK_SIZE * 2
	//                                                                                                           AUDIO_BLOCK_SIZE
	uint32_t block_number = 0;
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005d80:	2400      	movs	r4, #0
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005d82:	f7fc faaf 	bl	80022e4 <BSP_LCD_SetTextColor>

	for (stop_record = 0; !stop_record && block_number < AUDIO_NB_BLOCKS; block_number++) {
		uint32_t address = AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2);

		wait_buffer_offset(BUFFER_OFFSET_HALF);
		memcpy(
 8005d86:	4f3c      	ldr	r7, [pc, #240]	@ (8005e78 <AudioRec_demo+0x138>)
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t*) "       RECORDING...     ", CENTER_MODE);
 8005d88:	f7fc fa5e 	bl	8002248 <BSP_LCD_GetYSize>
 8005d8c:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8005d90:	2301      	movs	r3, #1
 8005d92:	4a3a      	ldr	r2, [pc, #232]	@ (8005e7c <AudioRec_demo+0x13c>)
 8005d94:	b289      	uxth	r1, r1
 8005d96:	2000      	movs	r0, #0
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005d98:	4e39      	ldr	r6, [pc, #228]	@ (8005e80 <AudioRec_demo+0x140>)
			internal_buffer,
			AUDIO_BLOCK_SIZE
		);

		wait_buffer_offset(BUFFER_OFFSET_FULL);
		memcpy(
 8005d9a:	f507 587a 	add.w	r8, r7, #16000	@ 0x3e80
	for (stop_record = 0; !stop_record && block_number < AUDIO_NB_BLOCKS; block_number++) {
 8005d9e:	4d39      	ldr	r5, [pc, #228]	@ (8005e84 <AudioRec_demo+0x144>)
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t*) "       RECORDING...     ", CENTER_MODE);
 8005da0:	f7fc fbe0 	bl	8002564 <BSP_LCD_DisplayStringAt>
	BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8005da4:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8005da8:	4833      	ldr	r0, [pc, #204]	@ (8005e78 <AudioRec_demo+0x138>)
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005daa:	6074      	str	r4, [r6, #4]
	BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8005dac:	f7fc f8ea 	bl	8001f84 <BSP_AUDIO_IN_Record>
	for (stop_record = 0; !stop_record && block_number < AUDIO_NB_BLOCKS; block_number++) {
 8005db0:	6034      	str	r4, [r6, #0]
 8005db2:	6833      	ldr	r3, [r6, #0]
 8005db4:	b90b      	cbnz	r3, 8005dba <AudioRec_demo+0x7a>
 8005db6:	2c10      	cmp	r4, #16
 8005db8:	d141      	bne.n	8005e3e <AudioRec_demo+0xfe>
			internal_buffer + (AUDIO_BLOCK_SIZE / 2),  		// half of 16,000 element = 8,000 element
			AUDIO_BLOCK_SIZE								// [AUDIO_BLOCK_SIZE] bytes = [AUDIO_BLOCK_SIZE / 2] element (2 bytes)
		);
	}

	BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8005dba:	2002      	movs	r0, #2
 8005dbc:	f7fc f8ec 	bl	8001f98 <BSP_AUDIO_IN_Stop>

	sprintf(str_buf, "duration: %.1f s", block_number / 2.0);
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7fa fbbf 	bl	8000544 <__aeabi_ui2d>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <AudioRec_demo+0x148>)
 8005dca:	f7fa fc35 	bl	8000638 <__aeabi_dmul>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	482e      	ldr	r0, [pc, #184]	@ (8005e8c <AudioRec_demo+0x14c>)
 8005dd4:	492e      	ldr	r1, [pc, #184]	@ (8005e90 <AudioRec_demo+0x150>)
 8005dd6:	f001 fccd 	bl	8007774 <siprintf>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t*) str_buf, CENTER_MODE);
 8005dda:	f7fc fa35 	bl	8002248 <BSP_LCD_GetYSize>
 8005dde:	f1a0 0128 	sub.w	r1, r0, #40	@ 0x28
 8005de2:	2301      	movs	r3, #1
 8005de4:	4a29      	ldr	r2, [pc, #164]	@ (8005e8c <AudioRec_demo+0x14c>)
 8005de6:	b289      	uxth	r1, r1
 8005de8:	2000      	movs	r0, #0
 8005dea:	f7fc fbbb 	bl	8002564 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t*) "RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 8005dee:	f7fc fa2b 	bl	8002248 <BSP_LCD_GetYSize>
 8005df2:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8005df6:	2301      	movs	r3, #1
 8005df8:	4a26      	ldr	r2, [pc, #152]	@ (8005e94 <AudioRec_demo+0x154>)
 8005dfa:	b289      	uxth	r1, r1
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f7fc fbb1 	bl	8002564 <BSP_LCD_DisplayStringAt>

	BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 8005e02:	2146      	movs	r1, #70	@ 0x46
 8005e04:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8005e08:	2002      	movs	r0, #2
 8005e0a:	f7fc f851 	bl	8001eb0 <BSP_AUDIO_OUT_Init>
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8005e0e:	2005      	movs	r0, #5
 8005e10:	f7fb ff58 	bl	8001cc4 <BSP_AUDIO_OUT_SetAudioFrameSlot>

	uint32_t record_bytes = block_number * AUDIO_BLOCK_SIZE * 2;
 8005e14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e18:	435c      	muls	r4, r3
	AUDIO_Effect(record_bytes);
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff ff26 	bl	8005c6c <AUDIO_Effect>
	AUDIO_Start(OUTPUT_ADDR, record_bytes);
 8005e20:	4621      	mov	r1, r4
 8005e22:	481d      	ldr	r0, [pc, #116]	@ (8005e98 <AudioRec_demo+0x158>)
 8005e24:	f7ff fe30 	bl	8005a88 <AUDIO_Start>

	while (1) {
		AUDIO_Process();
 8005e28:	f7ff fe54 	bl	8005ad4 <AUDIO_Process>
		// AUDIO_Effect();

		if (CheckForUserInput()) {
 8005e2c:	f000 fce6 	bl	80067fc <CheckForUserInput>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d0f9      	beq.n	8005e28 <AudioRec_demo+0xe8>
			BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005e34:	2002      	movs	r0, #2
			break;
		}
	}
}
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005e3a:	f7fb bf2b 	b.w	8001c94 <BSP_AUDIO_OUT_Stop>
		wait_buffer_offset(BUFFER_OFFSET_HALF);
 8005e3e:	2001      	movs	r0, #1
	for (stop_record = 0; !stop_record && block_number < AUDIO_NB_BLOCKS; block_number++) {
 8005e40:	3401      	adds	r4, #1
		wait_buffer_offset(BUFFER_OFFSET_HALF);
 8005e42:	f7ff ff6b 	bl	8005d1c <wait_buffer_offset>
		memcpy(
 8005e46:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f001 fd74 	bl	800793a <memcpy>
		wait_buffer_offset(BUFFER_OFFSET_FULL);
 8005e52:	2002      	movs	r0, #2
 8005e54:	f7ff ff62 	bl	8005d1c <wait_buffer_offset>
		memcpy(
 8005e58:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	18a8      	adds	r0, r5, r2
 8005e60:	f505 45fa 	add.w	r5, r5, #32000	@ 0x7d00
 8005e64:	f001 fd69 	bl	800793a <memcpy>
	for (stop_record = 0; !stop_record && block_number < AUDIO_NB_BLOCKS; block_number++) {
 8005e68:	e7a3      	b.n	8005db2 <AudioRec_demo+0x72>
 8005e6a:	bf00      	nop
 8005e6c:	ffff0000 	.word	0xffff0000
 8005e70:	080106ec 	.word	0x080106ec
 8005e74:	ff0000ff 	.word	0xff0000ff
 8005e78:	20001284 	.word	0x20001284
 8005e7c:	08010705 	.word	0x08010705
 8005e80:	20001254 	.word	0x20001254
 8005e84:	c0115800 	.word	0xc0115800
 8005e88:	3fe00000 	.word	0x3fe00000
 8005e8c:	2000125c 	.word	0x2000125c
 8005e90:	0801071e 	.word	0x0801071e
 8005e94:	0801072f 	.word	0x0801072f
 8005e98:	c0192800 	.word	0xc0192800

08005e9c <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack()
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8005e9c:	4b01      	ldr	r3, [pc, #4]	@ (8005ea4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	605a      	str	r2, [r3, #4]
  return;
}
 8005ea2:	4770      	bx	lr
 8005ea4:	20001254 	.word	0x20001254

08005ea8 <BSP_AUDIO_IN_HalfTransfer_CallBack>:


void BSP_AUDIO_IN_HalfTransfer_CallBack()
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8005ea8:	4b01      	ldr	r3, [pc, #4]	@ (8005eb0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	605a      	str	r2, [r3, #4]
  return;
}
 8005eae:	4770      	bx	lr
 8005eb0:	20001254 	.word	0x20001254

08005eb4 <BSP_AUDIO_IN_Error_CallBack>:


void BSP_AUDIO_IN_Error_CallBack()
{
 8005eb4:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral error occurs. */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8005eb6:	480a      	ldr	r0, [pc, #40]	@ (8005ee0 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 8005eb8:	f7fc fa20 	bl	80022fc <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8005ebc:	f7fc fa36 	bl	800232c <BSP_LCD_GetFont>
 8005ec0:	88c1      	ldrh	r1, [r0, #6]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005eca:	4a06      	ldr	r2, [pc, #24]	@ (8005ee4 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8005ecc:	0049      	lsls	r1, r1, #1
 8005ece:	b289      	uxth	r1, r1
 8005ed0:	f7fc fb48 	bl	8002564 <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET) return;
 8005ed4:	2002      	movs	r0, #2
}
 8005ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET) return;
 8005eda:	f7fb bde1 	b.w	8001aa0 <BSP_PB_GetState>
 8005ede:	bf00      	nop
 8005ee0:	ffff0000 	.word	0xffff0000
 8005ee4:	080106c0 	.word	0x080106c0

08005ee8 <BSP_LCD_DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_LCD_DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d_camera);
 8005ee8:	4801      	ldr	r0, [pc, #4]	@ (8005ef0 <BSP_LCD_DMA2D_IRQHandler+0x8>)
 8005eea:	f7fd bd01 	b.w	80038f0 <HAL_DMA2D_IRQHandler>
 8005eee:	bf00      	nop
 8005ef0:	20008f8c 	.word	0x20008f8c

08005ef4 <HAL_DMA2D_MspInit>:
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <HAL_DMA2D_MspInit+0x2c>)
{
 8005ef6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*##-2- NVIC configuration  ################################################*/
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005efa:	205a      	movs	r0, #90	@ 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005efc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005f00:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005f02:	2200      	movs	r2, #0
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005f06:	4611      	mov	r1, r2
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005f08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005f10:	f7fd f950 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005f14:	205a      	movs	r0, #90	@ 0x5a
}
 8005f16:	b003      	add	sp, #12
 8005f18:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005f1c:	f7fd b97c 	b.w	8003218 <HAL_NVIC_EnableIRQ>
 8005f20:	40023800 	.word	0x40023800
 8005f24:	00000000 	.word	0x00000000

08005f28 <ApplyDelay>:
#include "main.h"

#define SAMPLE_RATE 48000

void ApplyDelay(int16_t *buffer, int16_t *output, uint32_t size, float delay_time, float feedback, float mix)
{
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	ee10 0a90 	vmov	r0, s1
 8005f32:	ee11 4a10 	vmov	r4, s2
 8005f36:	4616      	mov	r6, r2
 8005f38:	4688      	mov	r8, r1
        // Clamp the output to prevent clipping and distortion
        if (delay_output > 32767) delay_output = 32767;
        else if (delay_output < -32768) delay_output = -32768;

        // Write the processed sample back to the buffer
        output[i] = (int16_t)delay_output;
 8005f3a:	f647 79ff 	movw	r9, #32767	@ 0x7fff
{
 8005f3e:	ed2d 8b02 	vpush	{d8}
 8005f42:	eeb0 8a40 	vmov.f32	s16, s0
	feedback = feedback * (0.8/4096.0);
 8005f46:	f7fa fb1f 	bl	8000588 <__aeabi_f2d>
 8005f4a:	a33c      	add	r3, pc, #240	@ (adr r3, 800603c <ApplyDelay+0x114>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa fb72 	bl	8000638 <__aeabi_dmul>
 8005f54:	f7fa fe48 	bl	8000be8 <__aeabi_d2f>
 8005f58:	ee08 0a90 	vmov	s17, r0
	mix = mix * (1.2/4096);
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7fa fb13 	bl	8000588 <__aeabi_f2d>
 8005f62:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8005f66:	4b30      	ldr	r3, [pc, #192]	@ (8006028 <ApplyDelay+0x100>)
 8005f68:	f7fa fb66 	bl	8000638 <__aeabi_dmul>
 8005f6c:	f7fa fe3c 	bl	8000be8 <__aeabi_d2f>
	delay_time = delay_time * (900.0/4096.0);
 8005f70:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 800602c <ApplyDelay+0x104>
    uint32_t delay_samples = (uint32_t)(delay_time * SAMPLE_RATE / 1000.0f);
 8005f74:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006030 <ApplyDelay+0x108>
	mix = mix * (1.2/4096);
 8005f78:	ee06 0a90 	vmov	s13, r0
	delay_time = delay_time * (900.0/4096.0);
 8005f7c:	ee28 8a27 	vmul.f32	s16, s16, s15
    uint32_t delay_samples = (uint32_t)(delay_time * SAMPLE_RATE / 1000.0f);
 8005f80:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8006034 <ApplyDelay+0x10c>
 8005f84:	482c      	ldr	r0, [pc, #176]	@ (8006038 <ApplyDelay+0x110>)
    for (uint32_t i = 0; i < size; i++)
 8005f86:	2300      	movs	r3, #0
        uint32_t delayed_index = (delay_index + 48000 - delay_samples) % 48000;
 8005f88:	f64b 3280 	movw	r2, #48000	@ 0xbb80
        int32_t delay_output = (int32_t)((1.0f - mix) * buffer[i] + mix * delayed_sample);
 8005f8c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
    uint32_t delay_samples = (uint32_t)(delay_time * SAMPLE_RATE / 1000.0f);
 8005f90:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005f94:	6804      	ldr	r4, [r0, #0]
    for (uint32_t i = 0; i < size; i++)
 8005f96:	461d      	mov	r5, r3
        int16_t delayed_sample = delay_buffer[delayed_index];
 8005f98:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8006044 <ApplyDelay+0x11c>
        else if (delay_output < -32768) delay_output = -32768;
 8005f9c:	f8df e0a8 	ldr.w	lr, [pc, #168]	@ 8006048 <ApplyDelay+0x120>
    uint32_t delay_samples = (uint32_t)(delay_time * SAMPLE_RATE / 1000.0f);
 8005fa0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa8:	ee17 1a90 	vmov	r1, s15
        uint32_t delayed_index = (delay_index + 48000 - delay_samples) % 48000;
 8005fac:	1a51      	subs	r1, r2, r1
    for (uint32_t i = 0; i < size; i++)
 8005fae:	42b5      	cmp	r5, r6
 8005fb0:	d105      	bne.n	8005fbe <ApplyDelay+0x96>
 8005fb2:	b103      	cbz	r3, 8005fb6 <ApplyDelay+0x8e>
 8005fb4:	6004      	str	r4, [r0, #0]

        // Update the circular buffer index
        delay_index = (delay_index + 1) % 48000;
    }
}
 8005fb6:	ecbd 8b02 	vpop	{d8}
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int32_t delay_output = (int32_t)((1.0f - mix) * buffer[i] + mix * delayed_sample);
 8005fbe:	f937 3015 	ldrsh.w	r3, [r7, r5, lsl #1]
 8005fc2:	ee75 5a66 	vsub.f32	s11, s10, s13
 8005fc6:	ee07 3a10 	vmov	s14, r3
        uint32_t delayed_index = (delay_index + 48000 - delay_samples) % 48000;
 8005fca:	190b      	adds	r3, r1, r4
 8005fcc:	fbb3 faf2 	udiv	sl, r3, r2
 8005fd0:	fb02 331a 	mls	r3, r2, sl, r3
        int32_t delay_output = (int32_t)((1.0f - mix) * buffer[i] + mix * delayed_sample);
 8005fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005fd8:	f93c 3013 	ldrsh.w	r3, [ip, r3, lsl #1]
 8005fdc:	ee06 3a10 	vmov	s12, r3
 8005fe0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005fe4:	ee66 7a26 	vmul.f32	s15, s12, s13
 8005fe8:	eee5 7a87 	vfma.f32	s15, s11, s14
        delay_buffer[delay_index] = (int16_t)(buffer[i] + feedback * delayed_sample);
 8005fec:	eea6 7a28 	vfma.f32	s14, s12, s17
        int32_t delay_output = (int32_t)((1.0f - mix) * buffer[i] + mix * delayed_sample);
 8005ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        delay_buffer[delay_index] = (int16_t)(buffer[i] + feedback * delayed_sample);
 8005ff4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005ff8:	ee17 3a10 	vmov	r3, s14
 8005ffc:	f82c 3014 	strh.w	r3, [ip, r4, lsl #1]
        int32_t delay_output = (int32_t)((1.0f - mix) * buffer[i] + mix * delayed_sample);
 8006000:	ee17 3a90 	vmov	r3, s15
        delay_index = (delay_index + 1) % 48000;
 8006004:	3401      	adds	r4, #1
        else if (delay_output < -32768) delay_output = -32768;
 8006006:	4573      	cmp	r3, lr
 8006008:	bfb8      	it	lt
 800600a:	4673      	movlt	r3, lr
        output[i] = (int16_t)delay_output;
 800600c:	454b      	cmp	r3, r9
 800600e:	bfa8      	it	ge
 8006010:	464b      	movge	r3, r9
 8006012:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
    for (uint32_t i = 0; i < size; i++)
 8006016:	3501      	adds	r5, #1
        delay_index = (delay_index + 1) % 48000;
 8006018:	fbb4 f3f2 	udiv	r3, r4, r2
 800601c:	fb02 4413 	mls	r4, r2, r3, r4
    for (uint32_t i = 0; i < size; i++)
 8006020:	2301      	movs	r3, #1
 8006022:	e7c4      	b.n	8005fae <ApplyDelay+0x86>
 8006024:	f3af 8000 	nop.w
 8006028:	3f333333 	.word	0x3f333333
 800602c:	3e610000 	.word	0x3e610000
 8006030:	447a0000 	.word	0x447a0000
 8006034:	473b8000 	.word	0x473b8000
 8006038:	20008fe8 	.word	0x20008fe8
 800603c:	9999999a 	.word	0x9999999a
 8006040:	3f299999 	.word	0x3f299999
 8006044:	20008fec 	.word	0x20008fec
 8006048:	ffff8000 	.word	0xffff8000
 800604c:	00000000 	.word	0x00000000

08006050 <ApplyDistortion>:
//distortion
#include "main.h"

void ApplyDistortion(int16_t *buffer, int16_t *output, uint32_t size, float gain, int16_t threshold)
{
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	4605      	mov	r5, r0
 8006054:	ee10 0a10 	vmov	r0, s0
 8006058:	461f      	mov	r7, r3
 800605a:	4614      	mov	r4, r2
 800605c:	460e      	mov	r6, r1
 800605e:	ed2d 8b02 	vpush	{d8}
	gain = gain * (2.4 / 4096.0);
 8006062:	f7fa fa91 	bl	8000588 <__aeabi_f2d>
 8006066:	a31c      	add	r3, pc, #112	@ (adr r3, 80060d8 <ApplyDistortion+0x88>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fae4 	bl	8000638 <__aeabi_dmul>
 8006070:	f7fa fdba 	bl	8000be8 <__aeabi_d2f>
 8006074:	ee08 0a10 	vmov	s16, r0
	threshold = threshold * (50000.0 / 4096.0);
 8006078:	4638      	mov	r0, r7
 800607a:	f7fa fa73 	bl	8000564 <__aeabi_i2d>
 800607e:	a318      	add	r3, pc, #96	@ (adr r3, 80060e0 <ApplyDistortion+0x90>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa fad8 	bl	8000638 <__aeabi_dmul>
 8006088:	f7fa fd86 	bl	8000b98 <__aeabi_d2iz>
    for (uint32_t i = 0; i < size; i++)
 800608c:	2200      	movs	r2, #0
	threshold = threshold * (50000.0 / 4096.0);
 800608e:	b200      	sxth	r0, r0
        {
            sample = threshold + (sample - threshold) / 5; // Soft clipping for smoother sound
        }
        else if (sample < -threshold)
        {
            sample = -threshold + (sample + threshold) / 5;
 8006090:	2105      	movs	r1, #5
        else if (sample < -threshold)
 8006092:	4247      	negs	r7, r0
    for (uint32_t i = 0; i < size; i++)
 8006094:	42a2      	cmp	r2, r4
 8006096:	d102      	bne.n	800609e <ApplyDistortion+0x4e>
        }

        // Store back the distorted sample
        output[i] = (int16_t)sample;
    }
}
 8006098:	ecbd 8b02 	vpop	{d8}
 800609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        int32_t sample = (int32_t)(buffer[i] * gain);
 800609e:	f935 3012 	ldrsh.w	r3, [r5, r2, lsl #1]
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060aa:	ee67 7a88 	vmul.f32	s15, s15, s16
 80060ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060b2:	ee17 3a90 	vmov	r3, s15
        if (sample > threshold)
 80060b6:	4298      	cmp	r0, r3
 80060b8:	da07      	bge.n	80060ca <ApplyDistortion+0x7a>
            sample = threshold + (sample - threshold) / 5; // Soft clipping for smoother sound
 80060ba:	1a1b      	subs	r3, r3, r0
 80060bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c0:	4403      	add	r3, r0
        output[i] = (int16_t)sample;
 80060c2:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
    for (uint32_t i = 0; i < size; i++)
 80060c6:	3201      	adds	r2, #1
 80060c8:	e7e4      	b.n	8006094 <ApplyDistortion+0x44>
        else if (sample < -threshold)
 80060ca:	429f      	cmp	r7, r3
            sample = -threshold + (sample + threshold) / 5;
 80060cc:	bfc2      	ittt	gt
 80060ce:	181b      	addgt	r3, r3, r0
 80060d0:	fb93 f3f1 	sdivgt	r3, r3, r1
 80060d4:	1a1b      	subgt	r3, r3, r0
 80060d6:	e7f4      	b.n	80060c2 <ApplyDistortion+0x72>
 80060d8:	33333333 	.word	0x33333333
 80060dc:	3f433333 	.word	0x3f433333
 80060e0:	00000000 	.word	0x00000000
 80060e4:	40286a00 	.word	0x40286a00

080060e8 <ApplyFuzz>:

#define SMOOTHING_FACTOR 0.8f  // Adjust this factor for smoothing (0 < factor < 1)

void ApplyFuzz(int16_t *buffer, int16_t *output, uint32_t size, float gain, float depth, int16_t threshold)
{
	gain = gain * (3.0 / 4096.0);
 80060e8:	eddf 7a57 	vldr	s15, [pc, #348]	@ 8006248 <ApplyFuzz+0x160>
{
 80060ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f0:	4605      	mov	r5, r0
 80060f2:	ee10 0a90 	vmov	r0, s1
 80060f6:	461f      	mov	r7, r3
 80060f8:	4690      	mov	r8, r2
 80060fa:	460e      	mov	r6, r1
 80060fc:	ed2d 8b02 	vpush	{d8}
	gain = gain * (3.0 / 4096.0);
 8006100:	ee60 8a27 	vmul.f32	s17, s0, s15
	depth = depth * (2.4 / 4096.0);
 8006104:	f7fa fa40 	bl	8000588 <__aeabi_f2d>
 8006108:	a34b      	add	r3, pc, #300	@ (adr r3, 8006238 <ApplyFuzz+0x150>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa fa93 	bl	8000638 <__aeabi_dmul>
 8006112:	f7fa fd69 	bl	8000be8 <__aeabi_d2f>
 8006116:	ee08 0a10 	vmov	s16, r0
	threshold = threshold * (30000.0 / 4096.0);
 800611a:	4638      	mov	r0, r7
 800611c:	4f4b      	ldr	r7, [pc, #300]	@ (800624c <ApplyFuzz+0x164>)
 800611e:	f7fa fa21 	bl	8000564 <__aeabi_i2d>
 8006122:	a347      	add	r3, pc, #284	@ (adr r3, 8006240 <ApplyFuzz+0x158>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa86 	bl	8000638 <__aeabi_dmul>
 800612c:	f7fa fd34 	bl	8000b98 <__aeabi_d2iz>
    static float previous_sample = 0; // To store the previous output sample

    for (uint32_t i = 0; i < size; i++)
 8006130:	2300      	movs	r3, #0
	threshold = threshold * (30000.0 / 4096.0);
 8006132:	b200      	sxth	r0, r0
        {
            sample = threshold + (sample - threshold) * depth * (1.0f - ((float)(sample - threshold) / (INT16_MAX - threshold))); // Smoother clipping
        }
        else if (sample < -threshold)
        {
            sample = -threshold + (sample + threshold) * depth * (1.0f - ((float)(-sample - threshold) / (INT16_MIN + threshold))); // Smoother clipping
 8006134:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0

        // Apply non-linear shaping for richer fuzz sound
        sample = (sample * sample) >> 15; // Non-linear shaping

        // Smooth transition to avoid abrupt changes
        sample = (int16_t)(sample * 0.5f + previous_sample * 0.5f); // Smooth output
 8006138:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 800613c:	ed97 7a00 	vldr	s14, [r7]
            sample = threshold + (sample - threshold) * depth * (1.0f - ((float)(sample - threshold) / (INT16_MAX - threshold))); // Smoother clipping
 8006140:	f5c0 41ff 	rsb	r1, r0, #32640	@ 0x7f80
    for (uint32_t i = 0; i < size; i++)
 8006144:	461a      	mov	r2, r3
        sample = (int32_t)(SMOOTHING_FACTOR * previous_sample + (1 - SMOOTHING_FACTOR) * sample);
 8006146:	eddf 4a42 	vldr	s9, [pc, #264]	@ 8006250 <ApplyFuzz+0x168>
        else if (sample < -threshold)
 800614a:	f1c0 0c00 	rsb	ip, r0, #0
        sample = (int32_t)(SMOOTHING_FACTOR * previous_sample + (1 - SMOOTHING_FACTOR) * sample);
 800614e:	ed9f 4a41 	vldr	s8, [pc, #260]	@ 8006254 <ApplyFuzz+0x16c>
            sample = -threshold + (sample + threshold) * depth * (1.0f - ((float)(-sample - threshold) / (INT16_MIN + threshold))); // Smoother clipping
 8006152:	f5a0 4e00 	sub.w	lr, r0, #32768	@ 0x8000
            sample = threshold + (sample - threshold) * depth * (1.0f - ((float)(sample - threshold) / (INT16_MAX - threshold))); // Smoother clipping
 8006156:	317f      	adds	r1, #127	@ 0x7f
    for (uint32_t i = 0; i < size; i++)
 8006158:	4542      	cmp	r2, r8
 800615a:	d106      	bne.n	800616a <ApplyFuzz+0x82>
 800615c:	b10b      	cbz	r3, 8006162 <ApplyFuzz+0x7a>
 800615e:	ed87 7a00 	vstr	s14, [r7]
        output[i] = (int16_t)sample;

        // Update previous sample
        previous_sample = (float)output[i];
    }
}
 8006162:	ecbd 8b02 	vpop	{d8}
 8006166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        int32_t sample = (int32_t)(buffer[i] * gain);
 800616a:	f935 3012 	ldrsh.w	r3, [r5, r2, lsl #1]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006176:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800617a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        sample = (int32_t)(SMOOTHING_FACTOR * previous_sample + (1 - SMOOTHING_FACTOR) * sample);
 800617e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006182:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006186:	eee7 7a04 	vfma.f32	s15, s14, s8
 800618a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800618e:	ee17 3a90 	vmov	r3, s15
        if (sample > threshold)
 8006192:	4298      	cmp	r0, r3
 8006194:	da30      	bge.n	80061f8 <ApplyFuzz+0x110>
            sample = threshold + (sample - threshold) * depth * (1.0f - ((float)(sample - threshold) / (INT16_MAX - threshold))); // Smoother clipping
 8006196:	1a1b      	subs	r3, r3, r0
 8006198:	ee06 1a90 	vmov	s13, r1
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 3ae6 	vcvt.f32.s32	s7, s13
 80061a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061a8:	eec7 6aa3 	vdiv.f32	s13, s15, s7
 80061ac:	ee27 6a88 	vmul.f32	s12, s15, s16
 80061b0:	ee07 0a90 	vmov	s15, r0
 80061b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b8:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80061bc:	eee6 7a26 	vfma.f32	s15, s12, s13
            sample = -threshold + (sample + threshold) * depth * (1.0f - ((float)(-sample - threshold) / (INT16_MIN + threshold))); // Smoother clipping
 80061c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061c4:	ee17 3a90 	vmov	r3, s15
        sample = (sample * sample) >> 15; // Non-linear shaping
 80061c8:	435b      	muls	r3, r3
        sample = (int16_t)(sample * 0.5f + previous_sample * 0.5f); // Smooth output
 80061ca:	ee27 7a05 	vmul.f32	s14, s14, s10
        sample = (sample * sample) >> 15; // Non-linear shaping
 80061ce:	13db      	asrs	r3, r3, #15
        sample = (int16_t)(sample * 0.5f + previous_sample * 0.5f); // Smooth output
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d8:	eea7 7a85 	vfma.f32	s14, s15, s10
 80061dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80061e0:	ee17 3a10 	vmov	r3, s14
 80061e4:	b21b      	sxth	r3, r3
        previous_sample = (float)output[i];
 80061e6:	ee07 3a90 	vmov	s15, r3
        output[i] = (int16_t)sample;
 80061ea:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
    for (uint32_t i = 0; i < size; i++)
 80061ee:	3201      	adds	r2, #1
 80061f0:	2301      	movs	r3, #1
        previous_sample = (float)output[i];
 80061f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    for (uint32_t i = 0; i < size; i++)
 80061f6:	e7af      	b.n	8006158 <ApplyFuzz+0x70>
        else if (sample < -threshold)
 80061f8:	459c      	cmp	ip, r3
 80061fa:	dde5      	ble.n	80061c8 <ApplyFuzz+0xe0>
            sample = -threshold + (sample + threshold) * depth * (1.0f - ((float)(-sample - threshold) / (INT16_MIN + threshold))); // Smoother clipping
 80061fc:	18c4      	adds	r4, r0, r3
 80061fe:	425b      	negs	r3, r3
 8006200:	ee06 ea10 	vmov	s12, lr
 8006204:	1a1b      	subs	r3, r3, r0
 8006206:	ee06 4a90 	vmov	s13, r4
 800620a:	eef8 3ac6 	vcvt.f32.s32	s7, s12
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621a:	ee66 6a88 	vmul.f32	s13, s13, s16
 800621e:	ee87 6aa3 	vdiv.f32	s12, s15, s7
 8006222:	ee07 ca90 	vmov	s15, ip
 8006226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800622e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8006232:	e7c5      	b.n	80061c0 <ApplyFuzz+0xd8>
 8006234:	f3af 8000 	nop.w
 8006238:	33333333 	.word	0x33333333
 800623c:	3f433333 	.word	0x3f433333
 8006240:	00000000 	.word	0x00000000
 8006244:	401d4c00 	.word	0x401d4c00
 8006248:	3a400000 	.word	0x3a400000
 800624c:	200206ec 	.word	0x200206ec
 8006250:	3e4ccccc 	.word	0x3e4ccccc
 8006254:	3f4ccccd 	.word	0x3f4ccccd

08006258 <Display_DemoDescription>:
  * @brief  Display main demo messages.
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8006258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t desc[50];
  uint8_t adcText1[50];
  uint8_t adcText2[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800625c:	2001      	movs	r0, #1
{
 800625e:	b0ab      	sub	sp, #172	@ 0xac
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8006260:	f7fc f83a 	bl	80022d8 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8006264:	4852      	ldr	r0, [pc, #328]	@ (80063b0 <Display_DemoDescription+0x158>)
 8006266:	f7fc f855 	bl	8002314 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800626a:	f04f 30ff 	mov.w	r0, #4294967295
 800626e:	f7fc f845 	bl	80022fc <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	f7fc f865 	bl	8002344 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800627a:	484e      	ldr	r0, [pc, #312]	@ (80063b4 <Display_DemoDescription+0x15c>)
 800627c:	f7fc f832 	bl	80022e4 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 8006280:	2301      	movs	r3, #1
 8006282:	4a4d      	ldr	r2, [pc, #308]	@ (80063b8 <Display_DemoDescription+0x160>)
 8006284:	210a      	movs	r1, #10
 8006286:	2000      	movs	r0, #0

  BSP_LCD_SetFont(&Font12);
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);

  BSP_LCD_SetFont(&Font16);
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8006288:	4d4c      	ldr	r5, [pc, #304]	@ (80063bc <Display_DemoDescription+0x164>)
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 800628a:	f7fc f96b 	bl	8002564 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 800628e:	2301      	movs	r3, #1
 8006290:	4a4b      	ldr	r2, [pc, #300]	@ (80063c0 <Display_DemoDescription+0x168>)
 8006292:	2123      	movs	r1, #35	@ 0x23
 8006294:	2000      	movs	r0, #0
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
  sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 8006296:	4e4b      	ldr	r6, [pc, #300]	@ (80063c4 <Display_DemoDescription+0x16c>)
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8006298:	f7fc f964 	bl	8002564 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 800629c:	f7fb ffc8 	bl	8002230 <BSP_LCD_GetXSize>
 80062a0:	3850      	subs	r0, #80	@ 0x50
 80062a2:	4a49      	ldr	r2, [pc, #292]	@ (80063c8 <Display_DemoDescription+0x170>)
 80062a4:	2141      	movs	r1, #65	@ 0x41
 80062a6:	0840      	lsrs	r0, r0, #1
 80062a8:	f7fc f9c0 	bl	800262c <BSP_LCD_DrawBitmap>
  BSP_LCD_SetFont(&Font12);
 80062ac:	4847      	ldr	r0, [pc, #284]	@ (80063cc <Display_DemoDescription+0x174>)
 80062ae:	f7fc f831 	bl	8002314 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);
 80062b2:	f7fb ffc9 	bl	8002248 <BSP_LCD_GetYSize>
 80062b6:	f1a0 0114 	sub.w	r1, r0, #20
 80062ba:	2301      	movs	r3, #1
 80062bc:	4a44      	ldr	r2, [pc, #272]	@ (80063d0 <Display_DemoDescription+0x178>)
 80062be:	b289      	uxth	r1, r1
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7fc f94f 	bl	8002564 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 80062c6:	4843      	ldr	r0, [pc, #268]	@ (80063d4 <Display_DemoDescription+0x17c>)
 80062c8:	f7fc f824 	bl	8002314 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80062cc:	4628      	mov	r0, r5
 80062ce:	f7fc f809 	bl	80022e4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 80062d2:	f7fb ffb9 	bl	8002248 <BSP_LCD_GetYSize>
 80062d6:	4604      	mov	r4, r0
 80062d8:	f7fb ffaa 	bl	8002230 <BSP_LCD_GetXSize>
 80062dc:	233c      	movs	r3, #60	@ 0x3c
 80062de:	0861      	lsrs	r1, r4, #1
  sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 80062e0:	4c3d      	ldr	r4, [pc, #244]	@ (80063d8 <Display_DemoDescription+0x180>)
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 80062e2:	b282      	uxth	r2, r0
 80062e4:	2000      	movs	r0, #0
 80062e6:	310f      	adds	r1, #15
 80062e8:	b289      	uxth	r1, r1
 80062ea:	f7fc fa0b 	bl	8002704 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	f7fb fff7 	bl	80022e4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7fc f800 	bl	80022fc <BSP_LCD_SetBackColor>
  sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 80062fc:	2548      	movs	r5, #72	@ 0x48
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
 80062fe:	f7fb ffa3 	bl	8002248 <BSP_LCD_GetYSize>
 8006302:	2301      	movs	r3, #1
 8006304:	0841      	lsrs	r1, r0, #1
 8006306:	4a35      	ldr	r2, [pc, #212]	@ (80063dc <Display_DemoDescription+0x184>)
 8006308:	2000      	movs	r0, #0
 800630a:	311e      	adds	r1, #30
 800630c:	b289      	uxth	r1, r1
 800630e:	f7fc f929 	bl	8002564 <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 8006312:	6832      	ldr	r2, [r6, #0]
 8006314:	4932      	ldr	r1, [pc, #200]	@ (80063e0 <Display_DemoDescription+0x188>)
 8006316:	a803      	add	r0, sp, #12
 8006318:	fb05 4202 	mla	r2, r5, r2, r4
 800631c:	f001 fa2a 	bl	8007774 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 8006320:	f7fb ff92 	bl	8002248 <BSP_LCD_GetYSize>
 8006324:	aa03      	add	r2, sp, #12
 8006326:	0841      	lsrs	r1, r0, #1
 8006328:	2301      	movs	r3, #1
 800632a:	2000      	movs	r0, #0
 800632c:	312d      	adds	r1, #45	@ 0x2d
 800632e:	b289      	uxth	r1, r1
 8006330:	f7fc f918 	bl	8002564 <BSP_LCD_DisplayStringAt>
  sprintf((char *)adcText1, "P1: %f, P2: %f", effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 8006334:	6837      	ldr	r7, [r6, #0]
 8006336:	fb05 4707 	mla	r7, r5, r7, r4
 800633a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800633c:	f7fa f924 	bl	8000588 <__aeabi_f2d>
 8006340:	4680      	mov	r8, r0
 8006342:	4689      	mov	r9, r1
 8006344:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006346:	f7fa f91f 	bl	8000588 <__aeabi_f2d>
 800634a:	4642      	mov	r2, r8
 800634c:	464b      	mov	r3, r9
 800634e:	e9cd 0100 	strd	r0, r1, [sp]
 8006352:	4924      	ldr	r1, [pc, #144]	@ (80063e4 <Display_DemoDescription+0x18c>)
 8006354:	a810      	add	r0, sp, #64	@ 0x40
 8006356:	f001 fa0d 	bl	8007774 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 60, (uint8_t *)adcText1, CENTER_MODE);
 800635a:	f7fb ff75 	bl	8002248 <BSP_LCD_GetYSize>
 800635e:	aa10      	add	r2, sp, #64	@ 0x40
 8006360:	0841      	lsrs	r1, r0, #1
 8006362:	2301      	movs	r3, #1
 8006364:	2000      	movs	r0, #0
 8006366:	313c      	adds	r1, #60	@ 0x3c
 8006368:	b289      	uxth	r1, r1
 800636a:	f7fc f8fb 	bl	8002564 <BSP_LCD_DisplayStringAt>
  sprintf((char *)adcText2, "P3: %f, P4: %f", effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter4);
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	fb05 4403 	mla	r4, r5, r3, r4
 8006374:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006376:	f7fa f907 	bl	8000588 <__aeabi_f2d>
 800637a:	4606      	mov	r6, r0
 800637c:	460f      	mov	r7, r1
 800637e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8006380:	f7fa f902 	bl	8000588 <__aeabi_f2d>
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	e9cd 0100 	strd	r0, r1, [sp]
 800638c:	4916      	ldr	r1, [pc, #88]	@ (80063e8 <Display_DemoDescription+0x190>)
 800638e:	a81d      	add	r0, sp, #116	@ 0x74
 8006390:	f001 f9f0 	bl	8007774 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 75, (uint8_t *)adcText2, CENTER_MODE);
 8006394:	f7fb ff58 	bl	8002248 <BSP_LCD_GetYSize>
 8006398:	2301      	movs	r3, #1
 800639a:	0841      	lsrs	r1, r0, #1
 800639c:	aa1d      	add	r2, sp, #116	@ 0x74
 800639e:	2000      	movs	r0, #0
 80063a0:	314b      	adds	r1, #75	@ 0x4b
 80063a2:	b289      	uxth	r1, r1
 80063a4:	f7fc f8de 	bl	8002564 <BSP_LCD_DisplayStringAt>

}
 80063a8:	b02b      	add	sp, #172	@ 0xac
 80063aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ae:	bf00      	nop
 80063b0:	2000004c 	.word	0x2000004c
 80063b4:	ff000080 	.word	0xff000080
 80063b8:	08010751 	.word	0x08010751
 80063bc:	ff0000ff 	.word	0xff0000ff
 80063c0:	08010760 	.word	0x08010760
 80063c4:	200206f0 	.word	0x200206f0
 80063c8:	0800e174 	.word	0x0800e174
 80063cc:	2000005c 	.word	0x2000005c
 80063d0:	08010771 	.word	0x08010771
 80063d4:	20000064 	.word	0x20000064
 80063d8:	20000084 	.word	0x20000084
 80063dc:	08010797 	.word	0x08010797
 80063e0:	080107b4 	.word	0x080107b4
 80063e4:	080107c6 	.word	0x080107c6
 80063e8:	080107d5 	.word	0x080107d5

080063ec <main>:
{
 80063ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063f0:	b0b9      	sub	sp, #228	@ 0xe4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80063f2:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_Disable();
 80063f6:	f7fc ff31 	bl	800325c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80063fa:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80063fc:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80063fe:	a82b      	add	r0, sp, #172	@ 0xac
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006400:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006404:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8006408:	952e      	str	r5, [sp, #184]	@ 0xb8

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800640a:	f04f 4640 	mov.w	r6, #3221225472	@ 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800640e:	f04f 4710 	mov.w	r7, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006412:	e9cd 432c 	strd	r4, r3, [sp, #176]	@ 0xb0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006416:	f7fc ff3f 	bl	8003298 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800641a:	4b99      	ldr	r3, [pc, #612]	@ (8006680 <main+0x294>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800641c:	f8ad 50ac 	strh.w	r5, [sp, #172]	@ 0xac
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006420:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006424:	a82b      	add	r0, sp, #172	@ 0xac
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006426:	952e      	str	r5, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8006428:	e9cd 632c 	strd	r6, r3, [sp, #176]	@ 0xb0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800642c:	f7fc ff34 	bl	8003298 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006430:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006434:	a82b      	add	r0, sp, #172	@ 0xac
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8006436:	952e      	str	r5, [sp, #184]	@ 0xb8
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006438:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800643c:	4b91      	ldr	r3, [pc, #580]	@ (8006684 <main+0x298>)
 800643e:	e9cd 732c 	strd	r7, r3, [sp, #176]	@ 0xb0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006442:	f7fc ff29 	bl	8003298 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006446:	f240 3301 	movw	r3, #769	@ 0x301
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 800644a:	f04f 4c20 	mov.w	ip, #2684354560	@ 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800644e:	a82b      	add	r0, sp, #172	@ 0xac
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006450:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8006454:	4b8c      	ldr	r3, [pc, #560]	@ (8006688 <main+0x29c>)
 8006456:	e9cd c32c 	strd	ip, r3, [sp, #176]	@ 0xb0
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800645a:	4b8c      	ldr	r3, [pc, #560]	@ (800668c <main+0x2a0>)
 800645c:	932e      	str	r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800645e:	f7fc ff1b 	bl	8003298 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8006462:	2004      	movs	r0, #4
 8006464:	f7fc ff08 	bl	8003278 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8006468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800646c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8006470:	4a87      	ldr	r2, [pc, #540]	@ (8006690 <main+0x2a4>)
 8006472:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8006476:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800647a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800647e:	6953      	ldr	r3, [r2, #20]
 8006480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006484:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800648a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800648e:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006492:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006496:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800649a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800649e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80064a2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80064a6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80064a8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80064ac:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80064ae:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80064b2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80064b4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80064b8:	d2f9      	bcs.n	80064ae <main+0xc2>
    } while(sets-- != 0U);
 80064ba:	3b20      	subs	r3, #32
 80064bc:	f113 0f20 	cmn.w	r3, #32
 80064c0:	d1f2      	bne.n	80064a8 <main+0xbc>
 80064c2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80064c6:	6953      	ldr	r3, [r2, #20]
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064cc:	6153      	str	r3, [r2, #20]
 80064ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80064d2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80064d6:	f7fc fbed 	bl	8002cb4 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80064da:	4b6e      	ldr	r3, [pc, #440]	@ (8006694 <main+0x2a8>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80064dc:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLN = 400;
 80064de:	2519      	movs	r5, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 80064e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80064e2:	a82b      	add	r0, sp, #172	@ 0xac
  __HAL_RCC_PWR_CLK_ENABLE();
 80064e4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80064e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f0:	9306      	str	r3, [sp, #24]
 80064f2:	9b06      	ldr	r3, [sp, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80064f4:	4b68      	ldr	r3, [pc, #416]	@ (8006698 <main+0x2ac>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80064fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80064fe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	9b07      	ldr	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800650c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006510:	e9cd 432b 	strd	r4, r3, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006514:	2302      	movs	r3, #2
 8006516:	4c61      	ldr	r4, [pc, #388]	@ (800669c <main+0x2b0>)
 8006518:	e9cd 3231 	strd	r3, r2, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800651c:	9335      	str	r3, [sp, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLN = 400;
 800651e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006522:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 8006524:	e9cd 5233 	strd	r5, r2, [sp, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006528:	9336      	str	r3, [sp, #216]	@ 0xd8
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800652a:	f7fe f86f 	bl	800460c <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 800652e:	b110      	cbz	r0, 8006536 <main+0x14a>
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	6063      	str	r3, [r4, #4]
  ret = HAL_PWREx_ActivateOverDrive();
 8006536:	f7fe f831 	bl	800459c <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 800653a:	b110      	cbz	r0, 8006542 <main+0x156>
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	3301      	adds	r3, #1
 8006540:	6063      	str	r3, [r4, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006542:	210f      	movs	r1, #15
 8006544:	2302      	movs	r3, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006546:	2000      	movs	r0, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006548:	e9cd 131e 	strd	r1, r3, [sp, #120]	@ 0x78
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800654c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8006550:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006552:	e9cd 0320 	strd	r0, r3, [sp, #128]	@ 0x80
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800655a:	a81e      	add	r0, sp, #120	@ 0x78
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800655c:	9322      	str	r3, [sp, #136]	@ 0x88
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800655e:	f7fe fa3d 	bl	80049dc <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 8006562:	b110      	cbz	r0, 800656a <main+0x17e>
 8006564:	6863      	ldr	r3, [r4, #4]
 8006566:	3301      	adds	r3, #1
 8006568:	6063      	str	r3, [r4, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800656a:	4b4a      	ldr	r3, [pc, #296]	@ (8006694 <main+0x2a8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800656c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 800656e:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006570:	a90c      	add	r1, sp, #48	@ 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006574:	484a      	ldr	r0, [pc, #296]	@ (80066a0 <main+0x2b4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	631a      	str	r2, [r3, #48]	@ 0x30
 800657c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800657e:	f002 0201 	and.w	r2, r2, #1
 8006582:	9202      	str	r2, [sp, #8]
 8006584:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006588:	f042 0220 	orr.w	r2, r2, #32
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30
 800658e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006590:	f002 0220 	and.w	r2, r2, #32
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800659a:	f042 0202 	orr.w	r2, r2, #2
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
 80065a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065a2:	f002 0202 	and.w	r2, r2, #2
 80065a6:	9204      	str	r2, [sp, #16]
 80065a8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_ADC3_CLK_ENABLE();   // Enable ADC3 clock (assuming using ADC3)
 80065aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80065b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b4:	9510      	str	r5, [sp, #64]	@ 0x40
  __HAL_RCC_ADC3_CLK_ENABLE();   // Enable ADC3 clock (assuming using ADC3)
 80065b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 80065be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065c2:	e9cd 550e 	strd	r5, r5, [sp, #56]	@ 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 80065c6:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ca:	f7fd fa61 	bl	8003a90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15; // Change pin to PF10
 80065ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d2:	a90c      	add	r1, sp, #48	@ 0x30
 80065d4:	4833      	ldr	r0, [pc, #204]	@ (80066a4 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15; // Change pin to PF10
 80065d6:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d8:	f7fd fa5a 	bl	8003a90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9; // Change pin to PF9
 80065dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e0:	a90c      	add	r1, sp, #48	@ 0x30
 80065e2:	4830      	ldr	r0, [pc, #192]	@ (80066a4 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_9; // Change pin to PF9
 80065e4:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e6:	f7fd fa53 	bl	8003a90 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80065ea:	462a      	mov	r2, r5
 80065ec:	4629      	mov	r1, r5
 80065ee:	2006      	movs	r0, #6
 80065f0:	f7fc fde0 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80065f4:	2006      	movs	r0, #6
 80065f6:	f7fc fe0f 	bl	8003218 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);  // PF10 is on EXTI Line 10
 80065fa:	462a      	mov	r2, r5
 80065fc:	4629      	mov	r1, r5
 80065fe:	2028      	movs	r0, #40	@ 0x28
 8006600:	f7fc fdd8 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006604:	2028      	movs	r0, #40	@ 0x28
 8006606:	f7fc fe07 	bl	8003218 <HAL_NVIC_EnableIRQ>
  BSP_LED_Init(LED1);
 800660a:	4628      	mov	r0, r5
 800660c:	f7fb f9ca 	bl	80019a4 <BSP_LED_Init>
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8006610:	6125      	str	r5, [r4, #16]
  AdcHandle.Init.ScanConvMode          = DISABLE;                       /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 8006612:	61a5      	str	r5, [r4, #24]
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8006614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 8006618:	f884 5028 	strb.w	r5, [r4, #40]	@ 0x28
  AdcHandle.Init.NbrOfDiscConversion   = 0;
 800661c:	62e5      	str	r5, [r4, #44]	@ 0x2c
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800661e:	6165      	str	r5, [r4, #20]
  AdcHandle.Init.EOCSelection          = DISABLE;
 8006620:	61e5      	str	r5, [r4, #28]
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8006622:	4a21      	ldr	r2, [pc, #132]	@ (80066a8 <main+0x2bc>)
  AdcHandle.Init.ContinuousConvMode    = ENABLE;                       /* Continuous mode enabled to have continuous conversion  */
 8006624:	6226      	str	r6, [r4, #32]
  AdcHandle.Init.NbrOfConversion       = 1;
 8006626:	6266      	str	r6, [r4, #36]	@ 0x24
  AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8006628:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 800662c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8006630:	4d1e      	ldr	r5, [pc, #120]	@ (80066ac <main+0x2c0>)
 8006632:	4628      	mov	r0, r5
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8006634:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8006638:	f7fc fb76 	bl	8002d28 <HAL_ADC_Init>
 800663c:	b120      	cbz	r0, 8006648 <main+0x25c>
    printf("Error ADC");
 800663e:	4c1c      	ldr	r4, [pc, #112]	@ (80066b0 <main+0x2c4>)
 8006640:	4620      	mov	r0, r4
 8006642:	f001 f885 	bl	8007750 <iprintf>
  while (1)
 8006646:	e7fb      	b.n	8006640 <main+0x254>
	sConfig.Channel      = ADC_CHANNEL_8;
 8006648:	2308      	movs	r3, #8
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 800664a:	a908      	add	r1, sp, #32
	sConfig.Offset       = 0;
 800664c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8006650:	4628      	mov	r0, r5
	sConfig.Rank         = 1;
 8006652:	e9cd 3608 	strd	r3, r6, [sp, #32]
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8006656:	f7fc fced 	bl	8003034 <HAL_ADC_ConfigChannel>
 800665a:	b120      	cbz	r0, 8006666 <main+0x27a>
    printf("Error ADC");
 800665c:	4c14      	ldr	r4, [pc, #80]	@ (80066b0 <main+0x2c4>)
 800665e:	4620      	mov	r0, r4
 8006660:	f001 f876 	bl	8007750 <iprintf>
  while (1)
 8006664:	e7fb      	b.n	800665e <main+0x272>
    if(HAL_ADC_Start_DMA(&AdcHandle, (uint32_t*)&uhADCxConvertedValue, 1) != HAL_OK)
 8006666:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 800666a:	4632      	mov	r2, r6
 800666c:	4628      	mov	r0, r5
 800666e:	f7fc fc01 	bl	8002e74 <HAL_ADC_Start_DMA>
 8006672:	4601      	mov	r1, r0
 8006674:	b1f0      	cbz	r0, 80066b4 <main+0x2c8>
    printf("Error ADC");
 8006676:	4c0e      	ldr	r4, [pc, #56]	@ (80066b0 <main+0x2c4>)
 8006678:	4620      	mov	r0, r4
 800667a:	f001 f869 	bl	8007750 <iprintf>
  while (1)
 800667e:	e7fb      	b.n	8006678 <main+0x28c>
 8006680:	03000018 	.word	0x03000018
 8006684:	03000019 	.word	0x03000019
 8006688:	0300000c 	.word	0x0300000c
 800668c:	01000101 	.word	0x01000101
 8006690:	e000ed00 	.word	0xe000ed00
 8006694:	40023800 	.word	0x40023800
 8006698:	40007000 	.word	0x40007000
 800669c:	200206f0 	.word	0x200206f0
 80066a0:	40020000 	.word	0x40020000
 80066a4:	40020400 	.word	0x40020400
 80066a8:	40012200 	.word	0x40012200
 80066ac:	200206f8 	.word	0x200206f8
 80066b0:	080107e4 	.word	0x080107e4
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80066b4:	2002      	movs	r0, #2
 80066b6:	f7fb f9a1 	bl	80019fc <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 80066ba:	f7fc f915 	bl	80028e8 <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 80066be:	b110      	cbz	r0, 80066c6 <main+0x2da>
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	6063      	str	r3, [r4, #4]
    sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 80066c6:	4d49      	ldr	r5, [pc, #292]	@ (80067ec <main+0x400>)
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 80066c8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80066cc:	2001      	movs	r0, #1
 80066ce:	f7fb fdc7 	bl	8002260 <BSP_LCD_LayerDefaultInit>
  Display_DemoDescription();
 80066d2:	f7ff fdc1 	bl	8006258 <Display_DemoDescription>
    if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80066d6:	2002      	movs	r0, #2
 80066d8:	f7fb f9e2 	bl	8001aa0 <BSP_PB_GetState>
 80066dc:	b158      	cbz	r0, 80066f6 <main+0x30a>
      HAL_Delay(10);
 80066de:	200a      	movs	r0, #10
 80066e0:	f7fc fb10 	bl	8002d04 <HAL_Delay>
      while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 80066e4:	2002      	movs	r0, #2
 80066e6:	f7fb f9db 	bl	8001aa0 <BSP_PB_GetState>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d1fa      	bne.n	80066e4 <main+0x2f8>
      AudioRec_demo();
 80066ee:	f7ff fb27 	bl	8005d40 <AudioRec_demo>
      Display_DemoDescription();
 80066f2:	f7ff fdb1 	bl	8006258 <Display_DemoDescription>
    sprintf((char *)desc, "Effect Select: %s", effects[EffectIndex].Name);
 80066f6:	2648      	movs	r6, #72	@ 0x48
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	493d      	ldr	r1, [pc, #244]	@ (80067f0 <main+0x404>)
 80066fc:	a811      	add	r0, sp, #68	@ 0x44
 80066fe:	fb06 5202 	mla	r2, r6, r2, r5
 8006702:	f001 f837 	bl	8007774 <siprintf>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 8006706:	f7fb fd9f 	bl	8002248 <BSP_LCD_GetYSize>
 800670a:	2301      	movs	r3, #1
 800670c:	0841      	lsrs	r1, r0, #1
 800670e:	aa11      	add	r2, sp, #68	@ 0x44
 8006710:	2000      	movs	r0, #0
 8006712:	312d      	adds	r1, #45	@ 0x2d
 8006714:	b289      	uxth	r1, r1
 8006716:	f7fb ff25 	bl	8002564 <BSP_LCD_DisplayStringAt>
	sprintf((char *)adcText1, "P1: %f, P2: %f", effects[EffectIndex].Parameter1, effects[EffectIndex].Parameter2);
 800671a:	6827      	ldr	r7, [r4, #0]
 800671c:	fb06 5707 	mla	r7, r6, r7, r5
 8006720:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006722:	f7f9 ff31 	bl	8000588 <__aeabi_f2d>
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800672c:	f7f9 ff2c 	bl	8000588 <__aeabi_f2d>
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	e9cd 0100 	strd	r0, r1, [sp]
 8006738:	492e      	ldr	r1, [pc, #184]	@ (80067f4 <main+0x408>)
 800673a:	a81e      	add	r0, sp, #120	@ 0x78
 800673c:	f001 f81a 	bl	8007774 <siprintf>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 60, (uint8_t *)adcText1, CENTER_MODE);
 8006740:	f7fb fd82 	bl	8002248 <BSP_LCD_GetYSize>
 8006744:	2301      	movs	r3, #1
 8006746:	0841      	lsrs	r1, r0, #1
 8006748:	aa1e      	add	r2, sp, #120	@ 0x78
 800674a:	2000      	movs	r0, #0
 800674c:	313c      	adds	r1, #60	@ 0x3c
 800674e:	b289      	uxth	r1, r1
 8006750:	f7fb ff08 	bl	8002564 <BSP_LCD_DisplayStringAt>
	sprintf((char *)adcText2, "P3: %f, P4: %f", effects[EffectIndex].Parameter3, effects[EffectIndex].Parameter4);
 8006754:	6827      	ldr	r7, [r4, #0]
 8006756:	fb06 5707 	mla	r7, r6, r7, r5
 800675a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800675c:	f7f9 ff14 	bl	8000588 <__aeabi_f2d>
 8006760:	4680      	mov	r8, r0
 8006762:	4689      	mov	r9, r1
 8006764:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006766:	f7f9 ff0f 	bl	8000588 <__aeabi_f2d>
 800676a:	4642      	mov	r2, r8
 800676c:	464b      	mov	r3, r9
 800676e:	e9cd 0100 	strd	r0, r1, [sp]
 8006772:	4921      	ldr	r1, [pc, #132]	@ (80067f8 <main+0x40c>)
 8006774:	a82b      	add	r0, sp, #172	@ 0xac
 8006776:	f000 fffd 	bl	8007774 <siprintf>
	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 75, (uint8_t *)adcText2, CENTER_MODE);
 800677a:	f7fb fd65 	bl	8002248 <BSP_LCD_GetYSize>
 800677e:	aa2b      	add	r2, sp, #172	@ 0xac
 8006780:	0841      	lsrs	r1, r0, #1
 8006782:	2301      	movs	r3, #1
 8006784:	2000      	movs	r0, #0
 8006786:	314b      	adds	r1, #75	@ 0x4b
 8006788:	b289      	uxth	r1, r1
 800678a:	f7fb feeb 	bl	8002564 <BSP_LCD_DisplayStringAt>
	if (ParameterIndex == 0)
 800678e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006790:	b962      	cbnz	r2, 80067ac <main+0x3c0>
		effects[EffectIndex].Parameter1 = uhADCxConvertedValue;
 8006792:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	fb06 5202 	mla	r2, r6, r2, r5
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
 80067aa:	e794      	b.n	80066d6 <main+0x2ea>
 80067ac:	6823      	ldr	r3, [r4, #0]
	else if (ParameterIndex == 1)
 80067ae:	2a01      	cmp	r2, #1
 80067b0:	fb06 f303 	mul.w	r3, r6, r3
 80067b4:	d10a      	bne.n	80067cc <main+0x3e0>
		effects[EffectIndex].Parameter2 = uhADCxConvertedValue;
 80067b6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80067ba:	442b      	add	r3, r5
 80067bc:	b292      	uxth	r2, r2
 80067be:	ee07 2a90 	vmov	s15, r2
 80067c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 80067ca:	e784      	b.n	80066d6 <main+0x2ea>
	else if (ParameterIndex == 2)
 80067cc:	2a02      	cmp	r2, #2
		effects[EffectIndex].Parameter3 = uhADCxConvertedValue;
 80067ce:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80067d2:	442b      	add	r3, r5
 80067d4:	b292      	uxth	r2, r2
 80067d6:	ee07 2a90 	vmov	s15, r2
 80067da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067de:	bf0c      	ite	eq
 80067e0:	edc3 7a10 	vstreq	s15, [r3, #64]	@ 0x40
		effects[EffectIndex].Parameter4 = uhADCxConvertedValue;
 80067e4:	edc3 7a11 	vstrne	s15, [r3, #68]	@ 0x44
  {
 80067e8:	e775      	b.n	80066d6 <main+0x2ea>
 80067ea:	bf00      	nop
 80067ec:	20000084 	.word	0x20000084
 80067f0:	080107b4 	.word	0x080107b4
 80067f4:	080107c6 	.word	0x080107c6
 80067f8:	080107d5 	.word	0x080107d5

080067fc <CheckForUserInput>:
{
 80067fc:	b508      	push	{r3, lr}
  if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80067fe:	2002      	movs	r0, #2
 8006800:	f7fb f94e 	bl	8001aa0 <BSP_PB_GetState>
 8006804:	b140      	cbz	r0, 8006818 <CheckForUserInput+0x1c>
    HAL_Delay(10);
 8006806:	200a      	movs	r0, #10
 8006808:	f7fc fa7c 	bl	8002d04 <HAL_Delay>
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800680c:	2002      	movs	r0, #2
 800680e:	f7fb f947 	bl	8001aa0 <BSP_PB_GetState>
 8006812:	2800      	cmp	r0, #0
 8006814:	d1fa      	bne.n	800680c <CheckForUserInput+0x10>
    return 1 ;
 8006816:	2001      	movs	r0, #1
}
 8006818:	bd08      	pop	{r3, pc}
	...

0800681c <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == KEY_BUTTON_PIN)
 800681c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 8006820:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 8006822:	d109      	bne.n	8006838 <HAL_GPIO_EXTI_Callback+0x1c>
    if ((HAL_GetTick() - debounce_time) > 50)
 8006824:	4c05      	ldr	r4, [pc, #20]	@ (800683c <HAL_GPIO_EXTI_Callback+0x20>)
 8006826:	f7fc fa67 	bl	8002cf8 <HAL_GetTick>
 800682a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800682c:	1ac0      	subs	r0, r0, r3
 800682e:	2832      	cmp	r0, #50	@ 0x32
 8006830:	d902      	bls.n	8006838 <HAL_GPIO_EXTI_Callback+0x1c>
      debounce_time = HAL_GetTick();
 8006832:	f7fc fa61 	bl	8002cf8 <HAL_GetTick>
 8006836:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	200206f0 	.word	0x200206f0

08006840 <HAL_ADC_ConvCpltCallback>:
	BSP_LED_Toggle(LED1);
 8006840:	2000      	movs	r0, #0
{
 8006842:	b508      	push	{r3, lr}
	BSP_LED_Toggle(LED1);
 8006844:	f7fb f8d2 	bl	80019ec <BSP_LED_Toggle>
	HAL_Delay(1000);
 8006848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 800684c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 8006850:	f7fc ba58 	b.w	8002d04 <HAL_Delay>
 8006854:	0000      	movs	r0, r0
	...

08006858 <ApplyRotaryEffect>:
#define SAMPLE_RATE DEFAULT_AUDIO_IN_FREQ
#define ROTARY_MAX_DELAY 100 // Maximum delay for the rotary effect in samples (for Doppler effect)
#define DELAY_BUFFER_SIZE 256 // Adjust as needed

void ApplyRotaryEffect(int16_t *buffer, int16_t *output, uint32_t size, float depth, float rate)
{
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4607      	mov	r7, r0
 800685e:	ee10 0a10 	vmov	r0, s0
 8006862:	4690      	mov	r8, r2
 8006864:	460c      	mov	r4, r1
 8006866:	4d60      	ldr	r5, [pc, #384]	@ (80069e8 <ApplyRotaryEffect+0x190>)
 8006868:	3f02      	subs	r7, #2
 800686a:	f8df a190 	ldr.w	sl, [pc, #400]	@ 80069fc <ApplyRotaryEffect+0x1a4>
 800686e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8006872:	ed2d 8b0a 	vpush	{d8-d12}
 8006876:	b083      	sub	sp, #12
 8006878:	eef0 8a60 	vmov.f32	s17, s1
	depth = depth * (1.6/4096.0);
 800687c:	f7f9 fe84 	bl	8000588 <__aeabi_f2d>
    float modulation_step = 2.0f * M_PI * rate / SAMPLE_RATE;

    for (uint32_t i = 0; i < size; i++)
    {
        // Amplitude modulation using a sine wave
        float amplitude_mod = 1.0f + depth * sinf(phase);
 8006880:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0

        // Smooth the amplitude modulation using a low-pass filter
        last_amplitude_mod += (amplitude_mod - last_amplitude_mod) * 0.2f; // Adjust 0.2 for smoother response

        // Doppler effect simulation (delay line modulation)
        int32_t delay_samples = (int32_t)(ROTARY_MAX_DELAY * (0.5f + 0.5f * sinf(phase)));
 8006884:	eeb6 9a00 	vmov.f32	s18, #96	@ 0x3f000000  0.5
        last_amplitude_mod += (amplitude_mod - last_amplitude_mod) * 0.2f; // Adjust 0.2 for smoother response
 8006888:	ed9f aa58 	vldr	s20, [pc, #352]	@ 80069ec <ApplyRotaryEffect+0x194>
        int32_t delay_samples = (int32_t)(ROTARY_MAX_DELAY * (0.5f + 0.5f * sinf(phase)));
 800688c:	eddf aa58 	vldr	s21, [pc, #352]	@ 80069f0 <ApplyRotaryEffect+0x198>
	depth = depth * (1.6/4096.0);
 8006890:	a351      	add	r3, pc, #324	@ (adr r3, 80069d8 <ApplyRotaryEffect+0x180>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fecf 	bl	8000638 <__aeabi_dmul>
 800689a:	f7fa f9a5 	bl	8000be8 <__aeabi_d2f>
    float modulation_step = 2.0f * M_PI * rate / SAMPLE_RATE;
 800689e:	eddf 7a55 	vldr	s15, [pc, #340]	@ 80069f4 <ApplyRotaryEffect+0x19c>
	depth = depth * (1.6/4096.0);
 80068a2:	ee08 0a10 	vmov	s16, r0
    float modulation_step = 2.0f * M_PI * rate / SAMPLE_RATE;
 80068a6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80068aa:	ee17 0a90 	vmov	r0, s15
 80068ae:	f7f9 fe6b 	bl	8000588 <__aeabi_f2d>
 80068b2:	a34b      	add	r3, pc, #300	@ (adr r3, 80069e0 <ApplyRotaryEffect+0x188>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f7f9 febe 	bl	8000638 <__aeabi_dmul>
 80068bc:	4b4e      	ldr	r3, [pc, #312]	@ (80069f8 <ApplyRotaryEffect+0x1a0>)
 80068be:	2200      	movs	r2, #0
 80068c0:	f7f9 ffe4 	bl	800088c <__aeabi_ddiv>
 80068c4:	f7fa f990 	bl	8000be8 <__aeabi_d2f>
 80068c8:	ed95 ba00 	vldr	s22, [r5]
 80068cc:	ee08 0a90 	vmov	s17, r0
    for (uint32_t i = 0; i < size; i++)
 80068d0:	ed9a ca00 	vldr	s24, [sl]
 80068d4:	686e      	ldr	r6, [r5, #4]
 80068d6:	2300      	movs	r3, #0
 80068d8:	45a0      	cmp	r8, r4
 80068da:	d10a      	bne.n	80068f2 <ApplyRotaryEffect+0x9a>
 80068dc:	b123      	cbz	r3, 80068e8 <ApplyRotaryEffect+0x90>
 80068de:	606e      	str	r6, [r5, #4]
 80068e0:	ed8a ca00 	vstr	s24, [sl]
 80068e4:	ed85 ba00 	vstr	s22, [r5]
        if (phase > 2.0f * M_PI)
        {
            phase -= 2.0f * M_PI;
        }
    }
}
 80068e8:	b003      	add	sp, #12
 80068ea:	ecbd 8b0a 	vpop	{d8-d12}
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        float amplitude_mod = 1.0f + depth * sinf(phase);
 80068f2:	eeb0 0a4b 	vmov.f32	s0, s22
        delay_index = (delay_index + 1) % DELAY_BUFFER_SIZE;
 80068f6:	f106 0901 	add.w	r9, r6, #1
        float amplitude_mod = 1.0f + depth * sinf(phase);
 80068fa:	f003 f869 	bl	80099d0 <sinf>
 80068fe:	eef0 7a69 	vmov.f32	s15, s19
        phase += modulation_step;
 8006902:	ee3b ba28 	vadd.f32	s22, s22, s17
        delay_index = (delay_index + 1) % DELAY_BUFFER_SIZE;
 8006906:	fa5f f989 	uxtb.w	r9, r9
        float amplitude_mod = 1.0f + depth * sinf(phase);
 800690a:	eee0 7a08 	vfma.f32	s15, s0, s16
        if (phase > 2.0f * M_PI)
 800690e:	ee1b 0a10 	vmov	r0, s22
        last_amplitude_mod += (amplitude_mod - last_amplitude_mod) * 0.2f; // Adjust 0.2 for smoother response
 8006912:	ee77 7acc 	vsub.f32	s15, s15, s24
 8006916:	eea7 ca8a 	vfma.f32	s24, s15, s20
        int32_t delay_samples = (int32_t)(ROTARY_MAX_DELAY * (0.5f + 0.5f * sinf(phase)));
 800691a:	eef0 7a49 	vmov.f32	s15, s18
 800691e:	eee0 7a09 	vfma.f32	s15, s0, s18
 8006922:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8006926:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        uint32_t read_index = (delay_index + DELAY_BUFFER_SIZE - delay_samples) % DELAY_BUFFER_SIZE;
 800692a:	ee17 3a10 	vmov	r3, s14
        float fractional = (ROTARY_MAX_DELAY * (0.5f + 0.5f * sinf(phase))) - delay_samples;
 800692e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        uint32_t read_index = (delay_index + DELAY_BUFFER_SIZE - delay_samples) % DELAY_BUFFER_SIZE;
 8006932:	1af3      	subs	r3, r6, r3
        float fractional = (ROTARY_MAX_DELAY * (0.5f + 0.5f * sinf(phase))) - delay_samples;
 8006934:	ee77 7ac7 	vsub.f32	s15, s15, s14
        uint32_t read_index = (delay_index + DELAY_BUFFER_SIZE - delay_samples) % DELAY_BUFFER_SIZE;
 8006938:	b2db      	uxtb	r3, r3
        int16_t delayed_sample = (int16_t)(delay_buffer[read_index] * (1.0f - fractional) + delay_buffer[next_index] * fractional);
 800693a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
        uint32_t next_index = (read_index + 1) % DELAY_BUFFER_SIZE;
 800693e:	3301      	adds	r3, #1
        int16_t delayed_sample = (int16_t)(delay_buffer[read_index] * (1.0f - fractional) + delay_buffer[next_index] * fractional);
 8006940:	ee39 7ae7 	vsub.f32	s14, s19, s15
        uint32_t next_index = (read_index + 1) % DELAY_BUFFER_SIZE;
 8006944:	b2db      	uxtb	r3, r3
        int16_t delayed_sample = (int16_t)(delay_buffer[read_index] * (1.0f - fractional) + delay_buffer[next_index] * fractional);
 8006946:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800694a:	edd3 6a02 	vldr	s13, [r3, #8]
        output[i] = (int16_t)((buffer[i] * last_amplitude_mod + delayed_sample) * 0.5f); // Average for smoothness
 800694e:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
        int16_t delayed_sample = (int16_t)(delay_buffer[read_index] * (1.0f - fractional) + delay_buffer[next_index] * fractional);
 8006952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006956:	edd2 6a02 	vldr	s13, [r2, #8]
 800695a:	eee6 7a87 	vfma.f32	s15, s13, s14
        output[i] = (int16_t)((buffer[i] * last_amplitude_mod + delayed_sample) * 0.5f); // Average for smoothness
 800695e:	ee07 3a10 	vmov	s14, r3
 8006962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        int16_t delayed_sample = (int16_t)(delay_buffer[read_index] * (1.0f - fractional) + delay_buffer[next_index] * fractional);
 8006966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        output[i] = (int16_t)((buffer[i] * last_amplitude_mod + delayed_sample) * 0.5f); // Average for smoothness
 800696a:	ee17 3a90 	vmov	r3, s15
 800696e:	b21b      	sxth	r3, r3
 8006970:	ee07 3a90 	vmov	s15, r3
 8006974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006978:	eeec 7a07 	vfma.f32	s15, s24, s14
 800697c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006984:	ee17 3a90 	vmov	r3, s15
 8006988:	fa0f fb83 	sxth.w	fp, r3
        delay_buffer[delay_index] = output[i];
 800698c:	ee07 ba90 	vmov	s15, fp
 8006990:	eef8 bae7 	vcvt.f32.s32	s23, s15
        if (phase > 2.0f * M_PI)
 8006994:	f7f9 fdf8 	bl	8000588 <__aeabi_f2d>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	e9cd 2300 	strd	r2, r3, [sp]
 80069a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80069e0 <ApplyRotaryEffect+0x188>)
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f7fa f8d7 	bl	8000b58 <__aeabi_dcmpgt>
 80069aa:	b150      	cbz	r0, 80069c2 <ApplyRotaryEffect+0x16a>
            phase -= 2.0f * M_PI;
 80069ac:	a30c      	add	r3, pc, #48	@ (adr r3, 80069e0 <ApplyRotaryEffect+0x188>)
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069b6:	f7f9 fc87 	bl	80002c8 <__aeabi_dsub>
 80069ba:	f7fa f915 	bl	8000be8 <__aeabi_d2f>
 80069be:	ee0b 0a10 	vmov	s22, r0
        delay_buffer[delay_index] = output[i];
 80069c2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80069c6:	2301      	movs	r3, #1
        output[i] = (int16_t)((buffer[i] * last_amplitude_mod + delayed_sample) * 0.5f); // Average for smoothness
 80069c8:	f824 bb02 	strh.w	fp, [r4], #2
        delay_buffer[delay_index] = output[i];
 80069cc:	edc6 ba02 	vstr	s23, [r6, #8]
        delay_index = (delay_index + 1) % DELAY_BUFFER_SIZE;
 80069d0:	464e      	mov	r6, r9
 80069d2:	e781      	b.n	80068d8 <ApplyRotaryEffect+0x80>
 80069d4:	f3af 8000 	nop.w
 80069d8:	9999999a 	.word	0x9999999a
 80069dc:	3f399999 	.word	0x3f399999
 80069e0:	54442d18 	.word	0x54442d18
 80069e4:	401921fb 	.word	0x401921fb
 80069e8:	2002074c 	.word	0x2002074c
 80069ec:	3e4ccccd 	.word	0x3e4ccccd
 80069f0:	42c80000 	.word	0x42c80000
 80069f4:	3b000000 	.word	0x3b000000
 80069f8:	40cf4000 	.word	0x40cf4000
 80069fc:	20000238 	.word	0x20000238

08006a00 <HAL_ADC_MspInit>:
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC3 Periph clock enable */
  ADCx_CLK_ENABLE();
 8006a00:	4b29      	ldr	r3, [pc, #164]	@ (8006aa8 <HAL_ADC_MspInit+0xa8>)
 8006a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
{
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADCx_CLK_ENABLE();
 8006a0a:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8006a0c:	b089      	sub	sp, #36	@ 0x24
  ADCx_CLK_ENABLE();
 8006a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a10:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a12:	f44f 6780 	mov.w	r7, #1024	@ 0x400
{
 8006a16:	4606      	mov	r6, r0
  ADCx_CLK_ENABLE();
 8006a18:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8006a1c:	a903      	add	r1, sp, #12
 8006a1e:	4823      	ldr	r0, [pc, #140]	@ (8006aac <HAL_ADC_MspInit+0xac>)
  ADCx_CLK_ENABLE();
 8006a20:	9200      	str	r2, [sp, #0]
 8006a22:	9a00      	ldr	r2, [sp, #0]
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8006a24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 8006a26:	4c22      	ldr	r4, [pc, #136]	@ (8006ab0 <HAL_ADC_MspInit+0xb0>)
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8006a28:	f042 0220 	orr.w	r2, r2, #32
 8006a2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a30:	f002 0220 	and.w	r2, r2, #32
 8006a34:	9201      	str	r2, [sp, #4]
 8006a36:	9a01      	ldr	r2, [sp, #4]
  DMAx_CLK_ENABLE();
 8006a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a3a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a42:	9505      	str	r5, [sp, #20]
  DMAx_CLK_ENABLE();
 8006a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8006a52:	f7fd f81d 	bl	8003a90 <HAL_GPIO_Init>

  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 8006a56:	4a17      	ldr	r2, [pc, #92]	@ (8006ab4 <HAL_ADC_MspInit+0xb4>)
 8006a58:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  hdma_adc.Init.Mode = DMA_CIRCULAR;
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8006a60:	f44f 7080 	mov.w	r0, #256	@ 0x100
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8006a64:	6127      	str	r7, [r4, #16]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a66:	6265      	str	r5, [r4, #36]	@ 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a68:	6325      	str	r5, [r4, #48]	@ 0x30
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 8006a6a:	e9c4 2300 	strd	r2, r3, [r4]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a72:	e9c4 1305 	strd	r1, r3, [r4, #20]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8006a76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a7a:	e9c4 0307 	strd	r0, r3, [r4, #28]
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006a7e:	2301      	movs	r3, #1

  HAL_DMA_Init(&hdma_adc);
 8006a80:	4620      	mov	r0, r4
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8006a82:	e9c4 350a 	strd	r3, r5, [r4, #40]	@ 0x28
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a86:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_DMA_Init(&hdma_adc);
 8006a8a:	f7fc fc47 	bl	800331c <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8006a8e:	462a      	mov	r2, r5
 8006a90:	4629      	mov	r1, r5
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8006a92:	63b4      	str	r4, [r6, #56]	@ 0x38
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8006a94:	203a      	movs	r0, #58	@ 0x3a
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8006a96:	63a6      	str	r6, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8006a98:	f7fc fb8c 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8006a9c:	203a      	movs	r0, #58	@ 0x3a
 8006a9e:	f7fc fbbb 	bl	8003218 <HAL_NVIC_EnableIRQ>
}
 8006aa2:	b009      	add	sp, #36	@ 0x24
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	40021400 	.word	0x40021400
 8006ab0:	20020b54 	.word	0x20020b54
 8006ab4:	40026428 	.word	0x40026428

08006ab8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006ab8:	4770      	bx	lr

08006aba <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006aba:	e7fe      	b.n	8006aba <HardFault_Handler>

08006abc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8006abc:	e7fe      	b.n	8006abc <MemManage_Handler>

08006abe <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8006abe:	e7fe      	b.n	8006abe <BusFault_Handler>

08006ac0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006ac0:	e7fe      	b.n	8006ac0 <UsageFault_Handler>

08006ac2 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8006ac2:	4770      	bx	lr

08006ac4 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8006ac4:	4770      	bx	lr

08006ac6 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8006ac6:	4770      	bx	lr

08006ac8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006ac8:	f7fc b90a 	b.w	8002ce0 <HAL_IncTick>

08006acc <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8006acc:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);

    // Check if the interrupt is triggered by EXTI Line0
    static uint32_t debounce_time = 0;

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8006ace:	4c0e      	ldr	r4, [pc, #56]	@ (8006b08 <EXTI0_IRQHandler+0x3c>)
    HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8006ad0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006ad4:	f7fd f8d4 	bl	8003c80 <HAL_GPIO_EXTI_IRQHandler>
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8006ad8:	6963      	ldr	r3, [r4, #20]
 8006ada:	07db      	lsls	r3, r3, #31
 8006adc:	d512      	bpl.n	8006b04 <EXTI0_IRQHandler+0x38>
    {
        // Prevent debounce effect for user key
        if ((HAL_GetTick() - debounce_time) > 150)
 8006ade:	4d0b      	ldr	r5, [pc, #44]	@ (8006b0c <EXTI0_IRQHandler+0x40>)
 8006ae0:	f7fc f90a 	bl	8002cf8 <HAL_GetTick>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	1ac0      	subs	r0, r0, r3
 8006ae8:	2301      	movs	r3, #1
 8006aea:	2896      	cmp	r0, #150	@ 0x96
        {
            // Clear the EXTI line pending bit
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8006aec:	6163      	str	r3, [r4, #20]
        if ((HAL_GetTick() - debounce_time) > 150)
 8006aee:	d909      	bls.n	8006b04 <EXTI0_IRQHandler+0x38>

            // Add your code here, e.g., toggle an LED
            EffectIndex++;
 8006af0:	4a07      	ldr	r2, [pc, #28]	@ (8006b10 <EXTI0_IRQHandler+0x44>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	3301      	adds	r3, #1
            if (EffectIndex >= 5)
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	bfa8      	it	ge
 8006afa:	2300      	movge	r3, #0
            EffectIndex++;
 8006afc:	6013      	str	r3, [r2, #0]
			{
				EffectIndex = 0;
			}
            // Update the debounce time
            debounce_time = HAL_GetTick();
 8006afe:	f7fc f8fb 	bl	8002cf8 <HAL_GetTick>
 8006b02:	6028      	str	r0, [r5, #0]
        {
            // If the time is not sufficient, clear the interrupt to prevent further triggers
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
        }
    }
}
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
 8006b06:	bf00      	nop
 8006b08:	40013c00 	.word	0x40013c00
 8006b0c:	20020bb4 	.word	0x20020bb4
 8006b10:	200206f0 	.word	0x200206f0

08006b14 <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006b14:	2004      	movs	r0, #4
 8006b16:	f7fd b8b3 	b.w	8003c80 <HAL_GPIO_EXTI_IRQHandler>
	...

08006b1c <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8006b1c:	b570      	push	{r4, r5, r6, lr}
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 8006b1e:	4c16      	ldr	r4, [pc, #88]	@ (8006b78 <EXTI15_10_IRQHandler+0x5c>)
 8006b20:	6966      	ldr	r6, [r4, #20]
 8006b22:	f416 5600 	ands.w	r6, r6, #8192	@ 0x2000
 8006b26:	d005      	beq.n	8006b34 <EXTI15_10_IRQHandler+0x18>
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8006b28:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
  }
}
 8006b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006b30:	f7fd b8a6 	b.w	8003c80 <HAL_GPIO_EXTI_IRQHandler>
  else if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 8006b34:	6963      	ldr	r3, [r4, #20]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	d51b      	bpl.n	8006b72 <EXTI15_10_IRQHandler+0x56>
	  if ((HAL_GetTick() - debounce_time) > 125)
 8006b3a:	4d10      	ldr	r5, [pc, #64]	@ (8006b7c <EXTI15_10_IRQHandler+0x60>)
 8006b3c:	f7fc f8dc 	bl	8002cf8 <HAL_GetTick>
 8006b40:	686b      	ldr	r3, [r5, #4]
 8006b42:	1ac0      	subs	r0, r0, r3
 8006b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b48:	287d      	cmp	r0, #125	@ 0x7d
		  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 8006b4a:	6163      	str	r3, [r4, #20]
	  if ((HAL_GetTick() - debounce_time) > 125)
 8006b4c:	d910      	bls.n	8006b70 <EXTI15_10_IRQHandler+0x54>
		  if (ParameterIndex >= effects[EffectIndex].ParametersNum)
 8006b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b80 <EXTI15_10_IRQHandler+0x64>)
 8006b50:	2448      	movs	r4, #72	@ 0x48
		  ParameterIndex++;
 8006b52:	480c      	ldr	r0, [pc, #48]	@ (8006b84 <EXTI15_10_IRQHandler+0x68>)
		  if (ParameterIndex >= effects[EffectIndex].ParametersNum)
 8006b54:	6812      	ldr	r2, [r2, #0]
 8006b56:	490c      	ldr	r1, [pc, #48]	@ (8006b88 <EXTI15_10_IRQHandler+0x6c>)
		  ParameterIndex++;
 8006b58:	6803      	ldr	r3, [r0, #0]
		  if (ParameterIndex >= effects[EffectIndex].ParametersNum)
 8006b5a:	fb04 1102 	mla	r1, r4, r2, r1
		  ParameterIndex++;
 8006b5e:	3301      	adds	r3, #1
		  if (ParameterIndex >= effects[EffectIndex].ParametersNum)
 8006b60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
			  ParameterIndex = 0;
 8006b62:	428b      	cmp	r3, r1
 8006b64:	bfb8      	it	lt
 8006b66:	461e      	movlt	r6, r3
 8006b68:	6006      	str	r6, [r0, #0]
		  debounce_time = HAL_GetTick();
 8006b6a:	f7fc f8c5 	bl	8002cf8 <HAL_GetTick>
 8006b6e:	6068      	str	r0, [r5, #4]
}
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8006b72:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006b76:	e7d9      	b.n	8006b2c <EXTI15_10_IRQHandler+0x10>
 8006b78:	40013c00 	.word	0x40013c00
 8006b7c:	20020bb4 	.word	0x20020bb4
 8006b80:	200206f0 	.word	0x200206f0
 8006b84:	20020744 	.word	0x20020744
 8006b88:	20000084 	.word	0x20000084

08006b8c <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8006b8c:	4b01      	ldr	r3, [pc, #4]	@ (8006b94 <DMA2_Stream7_IRQHandler+0x8>)
 8006b8e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8006b90:	f7fc bce8 	b.w	8003564 <HAL_DMA_IRQHandler>
 8006b94:	20000570 	.word	0x20000570

08006b98 <DMA2_Stream2_IRQHandler>:
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8006b98:	4b01      	ldr	r3, [pc, #4]	@ (8006ba0 <DMA2_Stream2_IRQHandler+0x8>)
 8006b9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006b9c:	f7fc bce2 	b.w	8003564 <HAL_DMA_IRQHandler>
 8006ba0:	200206f8 	.word	0x200206f8

08006ba4 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8006ba4:	4b01      	ldr	r3, [pc, #4]	@ (8006bac <DMA2_Stream4_IRQHandler+0x8>)
 8006ba6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006ba8:	f7fc bcdc 	b.w	8003564 <HAL_DMA_IRQHandler>
 8006bac:	200004ec 	.word	0x200004ec

08006bb0 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  BSP_LCD_DMA2D_IRQHandler();
 8006bb0:	f7ff b99a 	b.w	8005ee8 <BSP_LCD_DMA2D_IRQHandler>

08006bb4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8006bb8:	4c1b      	ldr	r4, [pc, #108]	@ (8006c28 <LCD_LOG_UpdateDisplay+0x74>)
 8006bba:	4f1c      	ldr	r7, [pc, #112]	@ (8006c2c <LCD_LOG_UpdateDisplay+0x78>)
 8006bbc:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8006bbe:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d811      	bhi.n	8006be8 <LCD_LOG_UpdateDisplay+0x34>
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d311      	bcc.n	8006bec <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8006bc8:	2584      	movs	r5, #132	@ 0x84
 8006bca:	fb05 7303 	mla	r3, r5, r3, r7
 8006bce:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006bd2:	f7fb fb87 	bl	80022e4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8006bd6:	8921      	ldrh	r1, [r4, #8]
 8006bd8:	1d08      	adds	r0, r1, #4
 8006bda:	fb05 7101 	mla	r1, r5, r1, r7
 8006bde:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8006be0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8006be4:	f7fb bd12 	b.w	800260c <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d201      	bcs.n	8006bf0 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8006bec:	3375      	adds	r3, #117	@ 0x75
 8006bee:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8006bf0:	3b10      	subs	r3, #16
 8006bf2:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8006bf4:	f04f 0875 	mov.w	r8, #117	@ 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8006bf8:	f04f 0984 	mov.w	r9, #132	@ 0x84
    ptr = length - YWINDOW_SIZE + 1;
 8006bfc:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8006bfe:	19a5      	adds	r5, r4, r6
 8006c00:	fbb5 f3f8 	udiv	r3, r5, r8
 8006c04:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8006c08:	fb09 7505 	mla	r5, r9, r5, r7
 8006c0c:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8006c10:	f7fb fb68 	bl	80022e4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8006c14:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8006c16:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8006c18:	4629      	mov	r1, r5
 8006c1a:	b280      	uxth	r0, r0
 8006c1c:	f7fb fcf6 	bl	800260c <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8006c20:	2e11      	cmp	r6, #17
 8006c22:	d1ec      	bne.n	8006bfe <LCD_LOG_UpdateDisplay+0x4a>
}
 8006c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c28:	20020bbc 	.word	0x20020bbc
 8006c2c:	20020bd0 	.word	0x20020bd0

08006c30 <__io_putchar>:
{
 8006c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 8006c34:	4c37      	ldr	r4, [pc, #220]	@ (8006d14 <__io_putchar+0xe4>)
{
 8006c36:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8006c38:	f7fb fb78 	bl	800232c <BSP_LCD_GetFont>
 8006c3c:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 8006c3e:	7c23      	ldrb	r3, [r4, #16]
 8006c40:	b9e3      	cbnz	r3, 8006c7c <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 8006c42:	7be2      	ldrb	r2, [r4, #15]
 8006c44:	2a01      	cmp	r2, #1
 8006c46:	d106      	bne.n	8006c56 <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8006c48:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 8006c4a:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8006c4c:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8006c4e:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 8006c50:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8006c52:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 8006c54:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8006c56:	88a6      	ldrh	r6, [r4, #4]
 8006c58:	f7fb faea 	bl	8002230 <BSP_LCD_GetXSize>
 8006c5c:	88bb      	ldrh	r3, [r7, #4]
 8006c5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c62:	4286      	cmp	r6, r0
 8006c64:	4e2c      	ldr	r6, [pc, #176]	@ (8006d18 <__io_putchar+0xe8>)
 8006c66:	d20c      	bcs.n	8006c82 <__io_putchar+0x52>
 8006c68:	2d0a      	cmp	r5, #10
 8006c6a:	d00a      	beq.n	8006c82 <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8006c6c:	88a2      	ldrh	r2, [r4, #4]
 8006c6e:	8923      	ldrh	r3, [r4, #8]
 8006c70:	1c51      	adds	r1, r2, #1
 8006c72:	80a1      	strh	r1, [r4, #4]
 8006c74:	2184      	movs	r1, #132	@ 0x84
 8006c76:	fb01 6303 	mla	r3, r1, r3, r6
 8006c7a:	549d      	strb	r5, [r3, r2]
}
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8006c82:	88e3      	ldrh	r3, [r4, #6]
 8006c84:	8922      	ldrh	r2, [r4, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d808      	bhi.n	8006c9c <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8006c8a:	7ba2      	ldrb	r2, [r4, #14]
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	d133      	bne.n	8006cf8 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 8006c90:	3301      	adds	r3, #1
 8006c92:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8006c94:	2b75      	cmp	r3, #117	@ 0x75
          LCD_CacheBuffer_yptr_top++;
 8006c96:	bf14      	ite	ne
 8006c98:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 8006c9a:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8006c9c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8006ca0:	f04f 0984 	mov.w	r9, #132	@ 0x84
 8006ca4:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8006ca8:	f7fb fac2 	bl	8002230 <BSP_LCD_GetXSize>
 8006cac:	88bb      	ldrh	r3, [r7, #4]
 8006cae:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cb2:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8006cb4:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8006cb6:	d822      	bhi.n	8006cfe <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8006cb8:	2284      	movs	r2, #132	@ 0x84
      LCD_CacheBuffer_xptr = 0;
 8006cba:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8006cbc:	fb02 6303 	mla	r3, r2, r3, r6
 8006cc0:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 8006cc2:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8006cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      LCD_LOG_UpdateDisplay (); 
 8006cc8:	f7ff ff74 	bl	8006bb4 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8006ccc:	8923      	ldrh	r3, [r4, #8]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8006cd2:	2b75      	cmp	r3, #117	@ 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 8006cd4:	bf09      	itett	eq
 8006cd6:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 8006cd8:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 8006cda:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 8006cdc:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8006cde:	bf08      	it	eq
 8006ce0:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 8006ce2:	2d0a      	cmp	r5, #10
 8006ce4:	d0ca      	beq.n	8006c7c <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8006ce6:	88a3      	ldrh	r3, [r4, #4]
 8006ce8:	8922      	ldrh	r2, [r4, #8]
 8006cea:	1c59      	adds	r1, r3, #1
 8006cec:	80a1      	strh	r1, [r4, #4]
 8006cee:	2184      	movs	r1, #132	@ 0x84
 8006cf0:	fb01 6602 	mla	r6, r1, r2, r6
 8006cf4:	54f5      	strb	r5, [r6, r3]
 8006cf6:	e7c1      	b.n	8006c7c <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73a3      	strb	r3, [r4, #14]
 8006cfc:	e7ce      	b.n	8006c9c <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8006cfe:	88a2      	ldrh	r2, [r4, #4]
 8006d00:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8006d04:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8006d08:	1c51      	adds	r1, r2, #1
 8006d0a:	f803 a002 	strb.w	sl, [r3, r2]
 8006d0e:	80a1      	strh	r1, [r4, #4]
 8006d10:	e7ca      	b.n	8006ca8 <__io_putchar+0x78>
 8006d12:	bf00      	nop
 8006d14:	20020bbc 	.word	0x20020bbc
 8006d18:	20020bd0 	.word	0x20020bd0

08006d1c <__cvt>:
 8006d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	ec57 6b10 	vmov	r6, r7, d0
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	460c      	mov	r4, r1
 8006d28:	4619      	mov	r1, r3
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	bfbb      	ittet	lt
 8006d2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d32:	461f      	movlt	r7, r3
 8006d34:	2300      	movge	r3, #0
 8006d36:	232d      	movlt	r3, #45	@ 0x2d
 8006d38:	700b      	strb	r3, [r1, #0]
 8006d3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d40:	4691      	mov	r9, r2
 8006d42:	f023 0820 	bic.w	r8, r3, #32
 8006d46:	bfbc      	itt	lt
 8006d48:	4632      	movlt	r2, r6
 8006d4a:	4616      	movlt	r6, r2
 8006d4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d50:	d005      	beq.n	8006d5e <__cvt+0x42>
 8006d52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d56:	d100      	bne.n	8006d5a <__cvt+0x3e>
 8006d58:	3401      	adds	r4, #1
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	e000      	b.n	8006d60 <__cvt+0x44>
 8006d5e:	2103      	movs	r1, #3
 8006d60:	ab03      	add	r3, sp, #12
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	ab02      	add	r3, sp, #8
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	ec47 6b10 	vmov	d0, r6, r7
 8006d6c:	4653      	mov	r3, sl
 8006d6e:	4622      	mov	r2, r4
 8006d70:	f000 fe7a 	bl	8007a68 <_dtoa_r>
 8006d74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006d78:	4605      	mov	r5, r0
 8006d7a:	d119      	bne.n	8006db0 <__cvt+0x94>
 8006d7c:	f019 0f01 	tst.w	r9, #1
 8006d80:	d00e      	beq.n	8006da0 <__cvt+0x84>
 8006d82:	eb00 0904 	add.w	r9, r0, r4
 8006d86:	2200      	movs	r2, #0
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 febb 	bl	8000b08 <__aeabi_dcmpeq>
 8006d92:	b108      	cbz	r0, 8006d98 <__cvt+0x7c>
 8006d94:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d98:	2230      	movs	r2, #48	@ 0x30
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	454b      	cmp	r3, r9
 8006d9e:	d31e      	bcc.n	8006dde <__cvt+0xc2>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006da4:	1b5b      	subs	r3, r3, r5
 8006da6:	4628      	mov	r0, r5
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	b004      	add	sp, #16
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006db4:	eb00 0904 	add.w	r9, r0, r4
 8006db8:	d1e5      	bne.n	8006d86 <__cvt+0x6a>
 8006dba:	7803      	ldrb	r3, [r0, #0]
 8006dbc:	2b30      	cmp	r3, #48	@ 0x30
 8006dbe:	d10a      	bne.n	8006dd6 <__cvt+0xba>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4639      	mov	r1, r7
 8006dc8:	f7f9 fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 8006dcc:	b918      	cbnz	r0, 8006dd6 <__cvt+0xba>
 8006dce:	f1c4 0401 	rsb	r4, r4, #1
 8006dd2:	f8ca 4000 	str.w	r4, [sl]
 8006dd6:	f8da 3000 	ldr.w	r3, [sl]
 8006dda:	4499      	add	r9, r3
 8006ddc:	e7d3      	b.n	8006d86 <__cvt+0x6a>
 8006dde:	1c59      	adds	r1, r3, #1
 8006de0:	9103      	str	r1, [sp, #12]
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e7d9      	b.n	8006d9a <__cvt+0x7e>

08006de6 <__exponent>:
 8006de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006de8:	2900      	cmp	r1, #0
 8006dea:	bfba      	itte	lt
 8006dec:	4249      	neglt	r1, r1
 8006dee:	232d      	movlt	r3, #45	@ 0x2d
 8006df0:	232b      	movge	r3, #43	@ 0x2b
 8006df2:	2909      	cmp	r1, #9
 8006df4:	7002      	strb	r2, [r0, #0]
 8006df6:	7043      	strb	r3, [r0, #1]
 8006df8:	dd29      	ble.n	8006e4e <__exponent+0x68>
 8006dfa:	f10d 0307 	add.w	r3, sp, #7
 8006dfe:	461d      	mov	r5, r3
 8006e00:	270a      	movs	r7, #10
 8006e02:	461a      	mov	r2, r3
 8006e04:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e08:	fb07 1416 	mls	r4, r7, r6, r1
 8006e0c:	3430      	adds	r4, #48	@ 0x30
 8006e0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e12:	460c      	mov	r4, r1
 8006e14:	2c63      	cmp	r4, #99	@ 0x63
 8006e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	dcf1      	bgt.n	8006e02 <__exponent+0x1c>
 8006e1e:	3130      	adds	r1, #48	@ 0x30
 8006e20:	1e94      	subs	r4, r2, #2
 8006e22:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e26:	1c41      	adds	r1, r0, #1
 8006e28:	4623      	mov	r3, r4
 8006e2a:	42ab      	cmp	r3, r5
 8006e2c:	d30a      	bcc.n	8006e44 <__exponent+0x5e>
 8006e2e:	f10d 0309 	add.w	r3, sp, #9
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	42ac      	cmp	r4, r5
 8006e36:	bf88      	it	hi
 8006e38:	2300      	movhi	r3, #0
 8006e3a:	3302      	adds	r3, #2
 8006e3c:	4403      	add	r3, r0
 8006e3e:	1a18      	subs	r0, r3, r0
 8006e40:	b003      	add	sp, #12
 8006e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e44:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e48:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e4c:	e7ed      	b.n	8006e2a <__exponent+0x44>
 8006e4e:	2330      	movs	r3, #48	@ 0x30
 8006e50:	3130      	adds	r1, #48	@ 0x30
 8006e52:	7083      	strb	r3, [r0, #2]
 8006e54:	70c1      	strb	r1, [r0, #3]
 8006e56:	1d03      	adds	r3, r0, #4
 8006e58:	e7f1      	b.n	8006e3e <__exponent+0x58>
	...

08006e5c <_printf_float>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	b08d      	sub	sp, #52	@ 0x34
 8006e62:	460c      	mov	r4, r1
 8006e64:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e68:	4616      	mov	r6, r2
 8006e6a:	461f      	mov	r7, r3
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	f000 fced 	bl	800784c <_localeconv_r>
 8006e72:	6803      	ldr	r3, [r0, #0]
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7f9 fa1a 	bl	80002b0 <strlen>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e80:	f8d8 3000 	ldr.w	r3, [r8]
 8006e84:	9005      	str	r0, [sp, #20]
 8006e86:	3307      	adds	r3, #7
 8006e88:	f023 0307 	bic.w	r3, r3, #7
 8006e8c:	f103 0208 	add.w	r2, r3, #8
 8006e90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006e94:	f8d4 b000 	ldr.w	fp, [r4]
 8006e98:	f8c8 2000 	str.w	r2, [r8]
 8006e9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ea0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ea4:	9307      	str	r3, [sp, #28]
 8006ea6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006eaa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8007124 <_printf_float+0x2c8>)
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb8:	f7f9 fe58 	bl	8000b6c <__aeabi_dcmpun>
 8006ebc:	bb70      	cbnz	r0, 8006f1c <_printf_float+0xc0>
 8006ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ec2:	4b98      	ldr	r3, [pc, #608]	@ (8007124 <_printf_float+0x2c8>)
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	f7f9 fe32 	bl	8000b30 <__aeabi_dcmple>
 8006ecc:	bb30      	cbnz	r0, 8006f1c <_printf_float+0xc0>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	f7f9 fe21 	bl	8000b1c <__aeabi_dcmplt>
 8006eda:	b110      	cbz	r0, 8006ee2 <_printf_float+0x86>
 8006edc:	232d      	movs	r3, #45	@ 0x2d
 8006ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee2:	4a91      	ldr	r2, [pc, #580]	@ (8007128 <_printf_float+0x2cc>)
 8006ee4:	4b91      	ldr	r3, [pc, #580]	@ (800712c <_printf_float+0x2d0>)
 8006ee6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006eea:	bf94      	ite	ls
 8006eec:	4690      	movls	r8, r2
 8006eee:	4698      	movhi	r8, r3
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	f02b 0304 	bic.w	r3, fp, #4
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	9700      	str	r7, [sp, #0]
 8006f00:	4633      	mov	r3, r6
 8006f02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f04:	4621      	mov	r1, r4
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 f9d2 	bl	80072b0 <_printf_common>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f040 808d 	bne.w	800702c <_printf_float+0x1d0>
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	b00d      	add	sp, #52	@ 0x34
 8006f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	4649      	mov	r1, r9
 8006f24:	f7f9 fe22 	bl	8000b6c <__aeabi_dcmpun>
 8006f28:	b140      	cbz	r0, 8006f3c <_printf_float+0xe0>
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bfbc      	itt	lt
 8006f30:	232d      	movlt	r3, #45	@ 0x2d
 8006f32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f36:	4a7e      	ldr	r2, [pc, #504]	@ (8007130 <_printf_float+0x2d4>)
 8006f38:	4b7e      	ldr	r3, [pc, #504]	@ (8007134 <_printf_float+0x2d8>)
 8006f3a:	e7d4      	b.n	8006ee6 <_printf_float+0x8a>
 8006f3c:	6863      	ldr	r3, [r4, #4]
 8006f3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f42:	9206      	str	r2, [sp, #24]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	d13b      	bne.n	8006fc0 <_printf_float+0x164>
 8006f48:	2306      	movs	r3, #6
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f50:	2300      	movs	r3, #0
 8006f52:	6022      	str	r2, [r4, #0]
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f5c:	ab09      	add	r3, sp, #36	@ 0x24
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	6861      	ldr	r1, [r4, #4]
 8006f62:	ec49 8b10 	vmov	d0, r8, r9
 8006f66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f7ff fed6 	bl	8006d1c <__cvt>
 8006f70:	9b06      	ldr	r3, [sp, #24]
 8006f72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f74:	2b47      	cmp	r3, #71	@ 0x47
 8006f76:	4680      	mov	r8, r0
 8006f78:	d129      	bne.n	8006fce <_printf_float+0x172>
 8006f7a:	1cc8      	adds	r0, r1, #3
 8006f7c:	db02      	blt.n	8006f84 <_printf_float+0x128>
 8006f7e:	6863      	ldr	r3, [r4, #4]
 8006f80:	4299      	cmp	r1, r3
 8006f82:	dd41      	ble.n	8007008 <_printf_float+0x1ac>
 8006f84:	f1aa 0a02 	sub.w	sl, sl, #2
 8006f88:	fa5f fa8a 	uxtb.w	sl, sl
 8006f8c:	3901      	subs	r1, #1
 8006f8e:	4652      	mov	r2, sl
 8006f90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006f94:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f96:	f7ff ff26 	bl	8006de6 <__exponent>
 8006f9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f9c:	1813      	adds	r3, r2, r0
 8006f9e:	2a01      	cmp	r2, #1
 8006fa0:	4681      	mov	r9, r0
 8006fa2:	6123      	str	r3, [r4, #16]
 8006fa4:	dc02      	bgt.n	8006fac <_printf_float+0x150>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	07d2      	lsls	r2, r2, #31
 8006faa:	d501      	bpl.n	8006fb0 <_printf_float+0x154>
 8006fac:	3301      	adds	r3, #1
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0a2      	beq.n	8006efe <_printf_float+0xa2>
 8006fb8:	232d      	movs	r3, #45	@ 0x2d
 8006fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fbe:	e79e      	b.n	8006efe <_printf_float+0xa2>
 8006fc0:	9a06      	ldr	r2, [sp, #24]
 8006fc2:	2a47      	cmp	r2, #71	@ 0x47
 8006fc4:	d1c2      	bne.n	8006f4c <_printf_float+0xf0>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1c0      	bne.n	8006f4c <_printf_float+0xf0>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7bd      	b.n	8006f4a <_printf_float+0xee>
 8006fce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fd2:	d9db      	bls.n	8006f8c <_printf_float+0x130>
 8006fd4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006fd8:	d118      	bne.n	800700c <_printf_float+0x1b0>
 8006fda:	2900      	cmp	r1, #0
 8006fdc:	6863      	ldr	r3, [r4, #4]
 8006fde:	dd0b      	ble.n	8006ff8 <_printf_float+0x19c>
 8006fe0:	6121      	str	r1, [r4, #16]
 8006fe2:	b913      	cbnz	r3, 8006fea <_printf_float+0x18e>
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	07d0      	lsls	r0, r2, #31
 8006fe8:	d502      	bpl.n	8006ff0 <_printf_float+0x194>
 8006fea:	3301      	adds	r3, #1
 8006fec:	440b      	add	r3, r1
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	e7db      	b.n	8006fb0 <_printf_float+0x154>
 8006ff8:	b913      	cbnz	r3, 8007000 <_printf_float+0x1a4>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	07d2      	lsls	r2, r2, #31
 8006ffe:	d501      	bpl.n	8007004 <_printf_float+0x1a8>
 8007000:	3302      	adds	r3, #2
 8007002:	e7f4      	b.n	8006fee <_printf_float+0x192>
 8007004:	2301      	movs	r3, #1
 8007006:	e7f2      	b.n	8006fee <_printf_float+0x192>
 8007008:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800700c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800700e:	4299      	cmp	r1, r3
 8007010:	db05      	blt.n	800701e <_printf_float+0x1c2>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	6121      	str	r1, [r4, #16]
 8007016:	07d8      	lsls	r0, r3, #31
 8007018:	d5ea      	bpl.n	8006ff0 <_printf_float+0x194>
 800701a:	1c4b      	adds	r3, r1, #1
 800701c:	e7e7      	b.n	8006fee <_printf_float+0x192>
 800701e:	2900      	cmp	r1, #0
 8007020:	bfd4      	ite	le
 8007022:	f1c1 0202 	rsble	r2, r1, #2
 8007026:	2201      	movgt	r2, #1
 8007028:	4413      	add	r3, r2
 800702a:	e7e0      	b.n	8006fee <_printf_float+0x192>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	055a      	lsls	r2, r3, #21
 8007030:	d407      	bmi.n	8007042 <_printf_float+0x1e6>
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	4642      	mov	r2, r8
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	d12b      	bne.n	8007098 <_printf_float+0x23c>
 8007040:	e767      	b.n	8006f12 <_printf_float+0xb6>
 8007042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007046:	f240 80dd 	bls.w	8007204 <_printf_float+0x3a8>
 800704a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800704e:	2200      	movs	r2, #0
 8007050:	2300      	movs	r3, #0
 8007052:	f7f9 fd59 	bl	8000b08 <__aeabi_dcmpeq>
 8007056:	2800      	cmp	r0, #0
 8007058:	d033      	beq.n	80070c2 <_printf_float+0x266>
 800705a:	4a37      	ldr	r2, [pc, #220]	@ (8007138 <_printf_float+0x2dc>)
 800705c:	2301      	movs	r3, #1
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	f43f af54 	beq.w	8006f12 <_printf_float+0xb6>
 800706a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800706e:	4543      	cmp	r3, r8
 8007070:	db02      	blt.n	8007078 <_printf_float+0x21c>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	07d8      	lsls	r0, r3, #31
 8007076:	d50f      	bpl.n	8007098 <_printf_float+0x23c>
 8007078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af45 	beq.w	8006f12 <_printf_float+0xb6>
 8007088:	f04f 0900 	mov.w	r9, #0
 800708c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007090:	f104 0a1a 	add.w	sl, r4, #26
 8007094:	45c8      	cmp	r8, r9
 8007096:	dc09      	bgt.n	80070ac <_printf_float+0x250>
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	079b      	lsls	r3, r3, #30
 800709c:	f100 8103 	bmi.w	80072a6 <_printf_float+0x44a>
 80070a0:	68e0      	ldr	r0, [r4, #12]
 80070a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070a4:	4298      	cmp	r0, r3
 80070a6:	bfb8      	it	lt
 80070a8:	4618      	movlt	r0, r3
 80070aa:	e734      	b.n	8006f16 <_printf_float+0xba>
 80070ac:	2301      	movs	r3, #1
 80070ae:	4652      	mov	r2, sl
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af2b 	beq.w	8006f12 <_printf_float+0xb6>
 80070bc:	f109 0901 	add.w	r9, r9, #1
 80070c0:	e7e8      	b.n	8007094 <_printf_float+0x238>
 80070c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dc39      	bgt.n	800713c <_printf_float+0x2e0>
 80070c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007138 <_printf_float+0x2dc>)
 80070ca:	2301      	movs	r3, #1
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b8      	blx	r7
 80070d2:	3001      	adds	r0, #1
 80070d4:	f43f af1d 	beq.w	8006f12 <_printf_float+0xb6>
 80070d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80070dc:	ea59 0303 	orrs.w	r3, r9, r3
 80070e0:	d102      	bne.n	80070e8 <_printf_float+0x28c>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	07d9      	lsls	r1, r3, #31
 80070e6:	d5d7      	bpl.n	8007098 <_printf_float+0x23c>
 80070e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f af0d 	beq.w	8006f12 <_printf_float+0xb6>
 80070f8:	f04f 0a00 	mov.w	sl, #0
 80070fc:	f104 0b1a 	add.w	fp, r4, #26
 8007100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007102:	425b      	negs	r3, r3
 8007104:	4553      	cmp	r3, sl
 8007106:	dc01      	bgt.n	800710c <_printf_float+0x2b0>
 8007108:	464b      	mov	r3, r9
 800710a:	e793      	b.n	8007034 <_printf_float+0x1d8>
 800710c:	2301      	movs	r3, #1
 800710e:	465a      	mov	r2, fp
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f aefb 	beq.w	8006f12 <_printf_float+0xb6>
 800711c:	f10a 0a01 	add.w	sl, sl, #1
 8007120:	e7ee      	b.n	8007100 <_printf_float+0x2a4>
 8007122:	bf00      	nop
 8007124:	7fefffff 	.word	0x7fefffff
 8007128:	080107ee 	.word	0x080107ee
 800712c:	080107f2 	.word	0x080107f2
 8007130:	080107f6 	.word	0x080107f6
 8007134:	080107fa 	.word	0x080107fa
 8007138:	080107fe 	.word	0x080107fe
 800713c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800713e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007142:	4553      	cmp	r3, sl
 8007144:	bfa8      	it	ge
 8007146:	4653      	movge	r3, sl
 8007148:	2b00      	cmp	r3, #0
 800714a:	4699      	mov	r9, r3
 800714c:	dc36      	bgt.n	80071bc <_printf_float+0x360>
 800714e:	f04f 0b00 	mov.w	fp, #0
 8007152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007156:	f104 021a 	add.w	r2, r4, #26
 800715a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800715c:	9306      	str	r3, [sp, #24]
 800715e:	eba3 0309 	sub.w	r3, r3, r9
 8007162:	455b      	cmp	r3, fp
 8007164:	dc31      	bgt.n	80071ca <_printf_float+0x36e>
 8007166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007168:	459a      	cmp	sl, r3
 800716a:	dc3a      	bgt.n	80071e2 <_printf_float+0x386>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	07da      	lsls	r2, r3, #31
 8007170:	d437      	bmi.n	80071e2 <_printf_float+0x386>
 8007172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007174:	ebaa 0903 	sub.w	r9, sl, r3
 8007178:	9b06      	ldr	r3, [sp, #24]
 800717a:	ebaa 0303 	sub.w	r3, sl, r3
 800717e:	4599      	cmp	r9, r3
 8007180:	bfa8      	it	ge
 8007182:	4699      	movge	r9, r3
 8007184:	f1b9 0f00 	cmp.w	r9, #0
 8007188:	dc33      	bgt.n	80071f2 <_printf_float+0x396>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007192:	f104 0b1a 	add.w	fp, r4, #26
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	ebaa 0303 	sub.w	r3, sl, r3
 800719c:	eba3 0309 	sub.w	r3, r3, r9
 80071a0:	4543      	cmp	r3, r8
 80071a2:	f77f af79 	ble.w	8007098 <_printf_float+0x23c>
 80071a6:	2301      	movs	r3, #1
 80071a8:	465a      	mov	r2, fp
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f aeae 	beq.w	8006f12 <_printf_float+0xb6>
 80071b6:	f108 0801 	add.w	r8, r8, #1
 80071ba:	e7ec      	b.n	8007196 <_printf_float+0x33a>
 80071bc:	4642      	mov	r2, r8
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	d1c2      	bne.n	800714e <_printf_float+0x2f2>
 80071c8:	e6a3      	b.n	8006f12 <_printf_float+0xb6>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	9206      	str	r2, [sp, #24]
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f ae9c 	beq.w	8006f12 <_printf_float+0xb6>
 80071da:	9a06      	ldr	r2, [sp, #24]
 80071dc:	f10b 0b01 	add.w	fp, fp, #1
 80071e0:	e7bb      	b.n	800715a <_printf_float+0x2fe>
 80071e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d1c0      	bne.n	8007172 <_printf_float+0x316>
 80071f0:	e68f      	b.n	8006f12 <_printf_float+0xb6>
 80071f2:	9a06      	ldr	r2, [sp, #24]
 80071f4:	464b      	mov	r3, r9
 80071f6:	4442      	add	r2, r8
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	d1c3      	bne.n	800718a <_printf_float+0x32e>
 8007202:	e686      	b.n	8006f12 <_printf_float+0xb6>
 8007204:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007208:	f1ba 0f01 	cmp.w	sl, #1
 800720c:	dc01      	bgt.n	8007212 <_printf_float+0x3b6>
 800720e:	07db      	lsls	r3, r3, #31
 8007210:	d536      	bpl.n	8007280 <_printf_float+0x424>
 8007212:	2301      	movs	r3, #1
 8007214:	4642      	mov	r2, r8
 8007216:	4631      	mov	r1, r6
 8007218:	4628      	mov	r0, r5
 800721a:	47b8      	blx	r7
 800721c:	3001      	adds	r0, #1
 800721e:	f43f ae78 	beq.w	8006f12 <_printf_float+0xb6>
 8007222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	f43f ae70 	beq.w	8006f12 <_printf_float+0xb6>
 8007232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800723e:	f7f9 fc63 	bl	8000b08 <__aeabi_dcmpeq>
 8007242:	b9c0      	cbnz	r0, 8007276 <_printf_float+0x41a>
 8007244:	4653      	mov	r3, sl
 8007246:	f108 0201 	add.w	r2, r8, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d10c      	bne.n	800726e <_printf_float+0x412>
 8007254:	e65d      	b.n	8006f12 <_printf_float+0xb6>
 8007256:	2301      	movs	r3, #1
 8007258:	465a      	mov	r2, fp
 800725a:	4631      	mov	r1, r6
 800725c:	4628      	mov	r0, r5
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f ae56 	beq.w	8006f12 <_printf_float+0xb6>
 8007266:	f108 0801 	add.w	r8, r8, #1
 800726a:	45d0      	cmp	r8, sl
 800726c:	dbf3      	blt.n	8007256 <_printf_float+0x3fa>
 800726e:	464b      	mov	r3, r9
 8007270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007274:	e6df      	b.n	8007036 <_printf_float+0x1da>
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	f104 0b1a 	add.w	fp, r4, #26
 800727e:	e7f4      	b.n	800726a <_printf_float+0x40e>
 8007280:	2301      	movs	r3, #1
 8007282:	4642      	mov	r2, r8
 8007284:	e7e1      	b.n	800724a <_printf_float+0x3ee>
 8007286:	2301      	movs	r3, #1
 8007288:	464a      	mov	r2, r9
 800728a:	4631      	mov	r1, r6
 800728c:	4628      	mov	r0, r5
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	f43f ae3e 	beq.w	8006f12 <_printf_float+0xb6>
 8007296:	f108 0801 	add.w	r8, r8, #1
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	4543      	cmp	r3, r8
 80072a2:	dcf0      	bgt.n	8007286 <_printf_float+0x42a>
 80072a4:	e6fc      	b.n	80070a0 <_printf_float+0x244>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	f104 0919 	add.w	r9, r4, #25
 80072ae:	e7f4      	b.n	800729a <_printf_float+0x43e>

080072b0 <_printf_common>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4616      	mov	r6, r2
 80072b6:	4698      	mov	r8, r3
 80072b8:	688a      	ldr	r2, [r1, #8]
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072c0:	4293      	cmp	r3, r2
 80072c2:	bfb8      	it	lt
 80072c4:	4613      	movlt	r3, r2
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072cc:	4607      	mov	r7, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	b10a      	cbz	r2, 80072d6 <_printf_common+0x26>
 80072d2:	3301      	adds	r3, #1
 80072d4:	6033      	str	r3, [r6, #0]
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	0699      	lsls	r1, r3, #26
 80072da:	bf42      	ittt	mi
 80072dc:	6833      	ldrmi	r3, [r6, #0]
 80072de:	3302      	addmi	r3, #2
 80072e0:	6033      	strmi	r3, [r6, #0]
 80072e2:	6825      	ldr	r5, [r4, #0]
 80072e4:	f015 0506 	ands.w	r5, r5, #6
 80072e8:	d106      	bne.n	80072f8 <_printf_common+0x48>
 80072ea:	f104 0a19 	add.w	sl, r4, #25
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	6832      	ldr	r2, [r6, #0]
 80072f2:	1a9b      	subs	r3, r3, r2
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dc26      	bgt.n	8007346 <_printf_common+0x96>
 80072f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	3b00      	subs	r3, #0
 8007300:	bf18      	it	ne
 8007302:	2301      	movne	r3, #1
 8007304:	0692      	lsls	r2, r2, #26
 8007306:	d42b      	bmi.n	8007360 <_printf_common+0xb0>
 8007308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800730c:	4641      	mov	r1, r8
 800730e:	4638      	mov	r0, r7
 8007310:	47c8      	blx	r9
 8007312:	3001      	adds	r0, #1
 8007314:	d01e      	beq.n	8007354 <_printf_common+0xa4>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	6922      	ldr	r2, [r4, #16]
 800731a:	f003 0306 	and.w	r3, r3, #6
 800731e:	2b04      	cmp	r3, #4
 8007320:	bf02      	ittt	eq
 8007322:	68e5      	ldreq	r5, [r4, #12]
 8007324:	6833      	ldreq	r3, [r6, #0]
 8007326:	1aed      	subeq	r5, r5, r3
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	bf0c      	ite	eq
 800732c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007330:	2500      	movne	r5, #0
 8007332:	4293      	cmp	r3, r2
 8007334:	bfc4      	itt	gt
 8007336:	1a9b      	subgt	r3, r3, r2
 8007338:	18ed      	addgt	r5, r5, r3
 800733a:	2600      	movs	r6, #0
 800733c:	341a      	adds	r4, #26
 800733e:	42b5      	cmp	r5, r6
 8007340:	d11a      	bne.n	8007378 <_printf_common+0xc8>
 8007342:	2000      	movs	r0, #0
 8007344:	e008      	b.n	8007358 <_printf_common+0xa8>
 8007346:	2301      	movs	r3, #1
 8007348:	4652      	mov	r2, sl
 800734a:	4641      	mov	r1, r8
 800734c:	4638      	mov	r0, r7
 800734e:	47c8      	blx	r9
 8007350:	3001      	adds	r0, #1
 8007352:	d103      	bne.n	800735c <_printf_common+0xac>
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735c:	3501      	adds	r5, #1
 800735e:	e7c6      	b.n	80072ee <_printf_common+0x3e>
 8007360:	18e1      	adds	r1, r4, r3
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	2030      	movs	r0, #48	@ 0x30
 8007366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800736a:	4422      	add	r2, r4
 800736c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007374:	3302      	adds	r3, #2
 8007376:	e7c7      	b.n	8007308 <_printf_common+0x58>
 8007378:	2301      	movs	r3, #1
 800737a:	4622      	mov	r2, r4
 800737c:	4641      	mov	r1, r8
 800737e:	4638      	mov	r0, r7
 8007380:	47c8      	blx	r9
 8007382:	3001      	adds	r0, #1
 8007384:	d0e6      	beq.n	8007354 <_printf_common+0xa4>
 8007386:	3601      	adds	r6, #1
 8007388:	e7d9      	b.n	800733e <_printf_common+0x8e>
	...

0800738c <_printf_i>:
 800738c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	7e0f      	ldrb	r7, [r1, #24]
 8007392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007394:	2f78      	cmp	r7, #120	@ 0x78
 8007396:	4691      	mov	r9, r2
 8007398:	4680      	mov	r8, r0
 800739a:	460c      	mov	r4, r1
 800739c:	469a      	mov	sl, r3
 800739e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073a2:	d807      	bhi.n	80073b4 <_printf_i+0x28>
 80073a4:	2f62      	cmp	r7, #98	@ 0x62
 80073a6:	d80a      	bhi.n	80073be <_printf_i+0x32>
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	f000 80d2 	beq.w	8007552 <_printf_i+0x1c6>
 80073ae:	2f58      	cmp	r7, #88	@ 0x58
 80073b0:	f000 80b9 	beq.w	8007526 <_printf_i+0x19a>
 80073b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073bc:	e03a      	b.n	8007434 <_printf_i+0xa8>
 80073be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073c2:	2b15      	cmp	r3, #21
 80073c4:	d8f6      	bhi.n	80073b4 <_printf_i+0x28>
 80073c6:	a101      	add	r1, pc, #4	@ (adr r1, 80073cc <_printf_i+0x40>)
 80073c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073cc:	08007425 	.word	0x08007425
 80073d0:	08007439 	.word	0x08007439
 80073d4:	080073b5 	.word	0x080073b5
 80073d8:	080073b5 	.word	0x080073b5
 80073dc:	080073b5 	.word	0x080073b5
 80073e0:	080073b5 	.word	0x080073b5
 80073e4:	08007439 	.word	0x08007439
 80073e8:	080073b5 	.word	0x080073b5
 80073ec:	080073b5 	.word	0x080073b5
 80073f0:	080073b5 	.word	0x080073b5
 80073f4:	080073b5 	.word	0x080073b5
 80073f8:	08007539 	.word	0x08007539
 80073fc:	08007463 	.word	0x08007463
 8007400:	080074f3 	.word	0x080074f3
 8007404:	080073b5 	.word	0x080073b5
 8007408:	080073b5 	.word	0x080073b5
 800740c:	0800755b 	.word	0x0800755b
 8007410:	080073b5 	.word	0x080073b5
 8007414:	08007463 	.word	0x08007463
 8007418:	080073b5 	.word	0x080073b5
 800741c:	080073b5 	.word	0x080073b5
 8007420:	080074fb 	.word	0x080074fb
 8007424:	6833      	ldr	r3, [r6, #0]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6032      	str	r2, [r6, #0]
 800742c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007434:	2301      	movs	r3, #1
 8007436:	e09d      	b.n	8007574 <_printf_i+0x1e8>
 8007438:	6833      	ldr	r3, [r6, #0]
 800743a:	6820      	ldr	r0, [r4, #0]
 800743c:	1d19      	adds	r1, r3, #4
 800743e:	6031      	str	r1, [r6, #0]
 8007440:	0606      	lsls	r6, r0, #24
 8007442:	d501      	bpl.n	8007448 <_printf_i+0xbc>
 8007444:	681d      	ldr	r5, [r3, #0]
 8007446:	e003      	b.n	8007450 <_printf_i+0xc4>
 8007448:	0645      	lsls	r5, r0, #25
 800744a:	d5fb      	bpl.n	8007444 <_printf_i+0xb8>
 800744c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007450:	2d00      	cmp	r5, #0
 8007452:	da03      	bge.n	800745c <_printf_i+0xd0>
 8007454:	232d      	movs	r3, #45	@ 0x2d
 8007456:	426d      	negs	r5, r5
 8007458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800745c:	4859      	ldr	r0, [pc, #356]	@ (80075c4 <_printf_i+0x238>)
 800745e:	230a      	movs	r3, #10
 8007460:	e011      	b.n	8007486 <_printf_i+0xfa>
 8007462:	6821      	ldr	r1, [r4, #0]
 8007464:	6833      	ldr	r3, [r6, #0]
 8007466:	0608      	lsls	r0, r1, #24
 8007468:	f853 5b04 	ldr.w	r5, [r3], #4
 800746c:	d402      	bmi.n	8007474 <_printf_i+0xe8>
 800746e:	0649      	lsls	r1, r1, #25
 8007470:	bf48      	it	mi
 8007472:	b2ad      	uxthmi	r5, r5
 8007474:	2f6f      	cmp	r7, #111	@ 0x6f
 8007476:	4853      	ldr	r0, [pc, #332]	@ (80075c4 <_printf_i+0x238>)
 8007478:	6033      	str	r3, [r6, #0]
 800747a:	bf14      	ite	ne
 800747c:	230a      	movne	r3, #10
 800747e:	2308      	moveq	r3, #8
 8007480:	2100      	movs	r1, #0
 8007482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007486:	6866      	ldr	r6, [r4, #4]
 8007488:	60a6      	str	r6, [r4, #8]
 800748a:	2e00      	cmp	r6, #0
 800748c:	bfa2      	ittt	ge
 800748e:	6821      	ldrge	r1, [r4, #0]
 8007490:	f021 0104 	bicge.w	r1, r1, #4
 8007494:	6021      	strge	r1, [r4, #0]
 8007496:	b90d      	cbnz	r5, 800749c <_printf_i+0x110>
 8007498:	2e00      	cmp	r6, #0
 800749a:	d04b      	beq.n	8007534 <_printf_i+0x1a8>
 800749c:	4616      	mov	r6, r2
 800749e:	fbb5 f1f3 	udiv	r1, r5, r3
 80074a2:	fb03 5711 	mls	r7, r3, r1, r5
 80074a6:	5dc7      	ldrb	r7, [r0, r7]
 80074a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074ac:	462f      	mov	r7, r5
 80074ae:	42bb      	cmp	r3, r7
 80074b0:	460d      	mov	r5, r1
 80074b2:	d9f4      	bls.n	800749e <_printf_i+0x112>
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d10b      	bne.n	80074d0 <_printf_i+0x144>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	07df      	lsls	r7, r3, #31
 80074bc:	d508      	bpl.n	80074d0 <_printf_i+0x144>
 80074be:	6923      	ldr	r3, [r4, #16]
 80074c0:	6861      	ldr	r1, [r4, #4]
 80074c2:	4299      	cmp	r1, r3
 80074c4:	bfde      	ittt	le
 80074c6:	2330      	movle	r3, #48	@ 0x30
 80074c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074d0:	1b92      	subs	r2, r2, r6
 80074d2:	6122      	str	r2, [r4, #16]
 80074d4:	f8cd a000 	str.w	sl, [sp]
 80074d8:	464b      	mov	r3, r9
 80074da:	aa03      	add	r2, sp, #12
 80074dc:	4621      	mov	r1, r4
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff fee6 	bl	80072b0 <_printf_common>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d14a      	bne.n	800757e <_printf_i+0x1f2>
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	b004      	add	sp, #16
 80074ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	f043 0320 	orr.w	r3, r3, #32
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	4833      	ldr	r0, [pc, #204]	@ (80075c8 <_printf_i+0x23c>)
 80074fc:	2778      	movs	r7, #120	@ 0x78
 80074fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	6831      	ldr	r1, [r6, #0]
 8007506:	061f      	lsls	r7, r3, #24
 8007508:	f851 5b04 	ldr.w	r5, [r1], #4
 800750c:	d402      	bmi.n	8007514 <_printf_i+0x188>
 800750e:	065f      	lsls	r7, r3, #25
 8007510:	bf48      	it	mi
 8007512:	b2ad      	uxthmi	r5, r5
 8007514:	6031      	str	r1, [r6, #0]
 8007516:	07d9      	lsls	r1, r3, #31
 8007518:	bf44      	itt	mi
 800751a:	f043 0320 	orrmi.w	r3, r3, #32
 800751e:	6023      	strmi	r3, [r4, #0]
 8007520:	b11d      	cbz	r5, 800752a <_printf_i+0x19e>
 8007522:	2310      	movs	r3, #16
 8007524:	e7ac      	b.n	8007480 <_printf_i+0xf4>
 8007526:	4827      	ldr	r0, [pc, #156]	@ (80075c4 <_printf_i+0x238>)
 8007528:	e7e9      	b.n	80074fe <_printf_i+0x172>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f023 0320 	bic.w	r3, r3, #32
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	e7f6      	b.n	8007522 <_printf_i+0x196>
 8007534:	4616      	mov	r6, r2
 8007536:	e7bd      	b.n	80074b4 <_printf_i+0x128>
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	6825      	ldr	r5, [r4, #0]
 800753c:	6961      	ldr	r1, [r4, #20]
 800753e:	1d18      	adds	r0, r3, #4
 8007540:	6030      	str	r0, [r6, #0]
 8007542:	062e      	lsls	r6, r5, #24
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	d501      	bpl.n	800754c <_printf_i+0x1c0>
 8007548:	6019      	str	r1, [r3, #0]
 800754a:	e002      	b.n	8007552 <_printf_i+0x1c6>
 800754c:	0668      	lsls	r0, r5, #25
 800754e:	d5fb      	bpl.n	8007548 <_printf_i+0x1bc>
 8007550:	8019      	strh	r1, [r3, #0]
 8007552:	2300      	movs	r3, #0
 8007554:	6123      	str	r3, [r4, #16]
 8007556:	4616      	mov	r6, r2
 8007558:	e7bc      	b.n	80074d4 <_printf_i+0x148>
 800755a:	6833      	ldr	r3, [r6, #0]
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	6032      	str	r2, [r6, #0]
 8007560:	681e      	ldr	r6, [r3, #0]
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	2100      	movs	r1, #0
 8007566:	4630      	mov	r0, r6
 8007568:	f7f8 fe52 	bl	8000210 <memchr>
 800756c:	b108      	cbz	r0, 8007572 <_printf_i+0x1e6>
 800756e:	1b80      	subs	r0, r0, r6
 8007570:	6060      	str	r0, [r4, #4]
 8007572:	6863      	ldr	r3, [r4, #4]
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	2300      	movs	r3, #0
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800757c:	e7aa      	b.n	80074d4 <_printf_i+0x148>
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	4632      	mov	r2, r6
 8007582:	4649      	mov	r1, r9
 8007584:	4640      	mov	r0, r8
 8007586:	47d0      	blx	sl
 8007588:	3001      	adds	r0, #1
 800758a:	d0ad      	beq.n	80074e8 <_printf_i+0x15c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	079b      	lsls	r3, r3, #30
 8007590:	d413      	bmi.n	80075ba <_printf_i+0x22e>
 8007592:	68e0      	ldr	r0, [r4, #12]
 8007594:	9b03      	ldr	r3, [sp, #12]
 8007596:	4298      	cmp	r0, r3
 8007598:	bfb8      	it	lt
 800759a:	4618      	movlt	r0, r3
 800759c:	e7a6      	b.n	80074ec <_printf_i+0x160>
 800759e:	2301      	movs	r3, #1
 80075a0:	4632      	mov	r2, r6
 80075a2:	4649      	mov	r1, r9
 80075a4:	4640      	mov	r0, r8
 80075a6:	47d0      	blx	sl
 80075a8:	3001      	adds	r0, #1
 80075aa:	d09d      	beq.n	80074e8 <_printf_i+0x15c>
 80075ac:	3501      	adds	r5, #1
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	9903      	ldr	r1, [sp, #12]
 80075b2:	1a5b      	subs	r3, r3, r1
 80075b4:	42ab      	cmp	r3, r5
 80075b6:	dcf2      	bgt.n	800759e <_printf_i+0x212>
 80075b8:	e7eb      	b.n	8007592 <_printf_i+0x206>
 80075ba:	2500      	movs	r5, #0
 80075bc:	f104 0619 	add.w	r6, r4, #25
 80075c0:	e7f5      	b.n	80075ae <_printf_i+0x222>
 80075c2:	bf00      	nop
 80075c4:	08010800 	.word	0x08010800
 80075c8:	08010811 	.word	0x08010811

080075cc <std>:
 80075cc:	2300      	movs	r3, #0
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	e9c0 3300 	strd	r3, r3, [r0]
 80075d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075da:	6083      	str	r3, [r0, #8]
 80075dc:	8181      	strh	r1, [r0, #12]
 80075de:	6643      	str	r3, [r0, #100]	@ 0x64
 80075e0:	81c2      	strh	r2, [r0, #14]
 80075e2:	6183      	str	r3, [r0, #24]
 80075e4:	4619      	mov	r1, r3
 80075e6:	2208      	movs	r2, #8
 80075e8:	305c      	adds	r0, #92	@ 0x5c
 80075ea:	f000 f926 	bl	800783a <memset>
 80075ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007624 <std+0x58>)
 80075f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <std+0x5c>)
 80075f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <std+0x60>)
 80075f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <std+0x64>)
 80075fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <std+0x68>)
 8007600:	6224      	str	r4, [r4, #32]
 8007602:	429c      	cmp	r4, r3
 8007604:	d006      	beq.n	8007614 <std+0x48>
 8007606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800760a:	4294      	cmp	r4, r2
 800760c:	d002      	beq.n	8007614 <std+0x48>
 800760e:	33d0      	adds	r3, #208	@ 0xd0
 8007610:	429c      	cmp	r4, r3
 8007612:	d105      	bne.n	8007620 <std+0x54>
 8007614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761c:	f000 b98a 	b.w	8007934 <__retarget_lock_init_recursive>
 8007620:	bd10      	pop	{r4, pc}
 8007622:	bf00      	nop
 8007624:	080077b5 	.word	0x080077b5
 8007628:	080077d7 	.word	0x080077d7
 800762c:	0800780f 	.word	0x0800780f
 8007630:	08007833 	.word	0x08007833
 8007634:	20024824 	.word	0x20024824

08007638 <stdio_exit_handler>:
 8007638:	4a02      	ldr	r2, [pc, #8]	@ (8007644 <stdio_exit_handler+0xc>)
 800763a:	4903      	ldr	r1, [pc, #12]	@ (8007648 <stdio_exit_handler+0x10>)
 800763c:	4803      	ldr	r0, [pc, #12]	@ (800764c <stdio_exit_handler+0x14>)
 800763e:	f000 b869 	b.w	8007714 <_fwalk_sglue>
 8007642:	bf00      	nop
 8007644:	2000023c 	.word	0x2000023c
 8007648:	08009531 	.word	0x08009531
 800764c:	2000024c 	.word	0x2000024c

08007650 <cleanup_stdio>:
 8007650:	6841      	ldr	r1, [r0, #4]
 8007652:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <cleanup_stdio+0x34>)
 8007654:	4299      	cmp	r1, r3
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	d001      	beq.n	8007660 <cleanup_stdio+0x10>
 800765c:	f001 ff68 	bl	8009530 <_fflush_r>
 8007660:	68a1      	ldr	r1, [r4, #8]
 8007662:	4b09      	ldr	r3, [pc, #36]	@ (8007688 <cleanup_stdio+0x38>)
 8007664:	4299      	cmp	r1, r3
 8007666:	d002      	beq.n	800766e <cleanup_stdio+0x1e>
 8007668:	4620      	mov	r0, r4
 800766a:	f001 ff61 	bl	8009530 <_fflush_r>
 800766e:	68e1      	ldr	r1, [r4, #12]
 8007670:	4b06      	ldr	r3, [pc, #24]	@ (800768c <cleanup_stdio+0x3c>)
 8007672:	4299      	cmp	r1, r3
 8007674:	d004      	beq.n	8007680 <cleanup_stdio+0x30>
 8007676:	4620      	mov	r0, r4
 8007678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800767c:	f001 bf58 	b.w	8009530 <_fflush_r>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	bf00      	nop
 8007684:	20024824 	.word	0x20024824
 8007688:	2002488c 	.word	0x2002488c
 800768c:	200248f4 	.word	0x200248f4

08007690 <global_stdio_init.part.0>:
 8007690:	b510      	push	{r4, lr}
 8007692:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <global_stdio_init.part.0+0x30>)
 8007694:	4c0b      	ldr	r4, [pc, #44]	@ (80076c4 <global_stdio_init.part.0+0x34>)
 8007696:	4a0c      	ldr	r2, [pc, #48]	@ (80076c8 <global_stdio_init.part.0+0x38>)
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	4620      	mov	r0, r4
 800769c:	2200      	movs	r2, #0
 800769e:	2104      	movs	r1, #4
 80076a0:	f7ff ff94 	bl	80075cc <std>
 80076a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076a8:	2201      	movs	r2, #1
 80076aa:	2109      	movs	r1, #9
 80076ac:	f7ff ff8e 	bl	80075cc <std>
 80076b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076b4:	2202      	movs	r2, #2
 80076b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ba:	2112      	movs	r1, #18
 80076bc:	f7ff bf86 	b.w	80075cc <std>
 80076c0:	2002495c 	.word	0x2002495c
 80076c4:	20024824 	.word	0x20024824
 80076c8:	08007639 	.word	0x08007639

080076cc <__sfp_lock_acquire>:
 80076cc:	4801      	ldr	r0, [pc, #4]	@ (80076d4 <__sfp_lock_acquire+0x8>)
 80076ce:	f000 b932 	b.w	8007936 <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	20024965 	.word	0x20024965

080076d8 <__sfp_lock_release>:
 80076d8:	4801      	ldr	r0, [pc, #4]	@ (80076e0 <__sfp_lock_release+0x8>)
 80076da:	f000 b92d 	b.w	8007938 <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	20024965 	.word	0x20024965

080076e4 <__sinit>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	4604      	mov	r4, r0
 80076e8:	f7ff fff0 	bl	80076cc <__sfp_lock_acquire>
 80076ec:	6a23      	ldr	r3, [r4, #32]
 80076ee:	b11b      	cbz	r3, 80076f8 <__sinit+0x14>
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f7ff bff0 	b.w	80076d8 <__sfp_lock_release>
 80076f8:	4b04      	ldr	r3, [pc, #16]	@ (800770c <__sinit+0x28>)
 80076fa:	6223      	str	r3, [r4, #32]
 80076fc:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <__sinit+0x2c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f5      	bne.n	80076f0 <__sinit+0xc>
 8007704:	f7ff ffc4 	bl	8007690 <global_stdio_init.part.0>
 8007708:	e7f2      	b.n	80076f0 <__sinit+0xc>
 800770a:	bf00      	nop
 800770c:	08007651 	.word	0x08007651
 8007710:	2002495c 	.word	0x2002495c

08007714 <_fwalk_sglue>:
 8007714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007718:	4607      	mov	r7, r0
 800771a:	4688      	mov	r8, r1
 800771c:	4614      	mov	r4, r2
 800771e:	2600      	movs	r6, #0
 8007720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007724:	f1b9 0901 	subs.w	r9, r9, #1
 8007728:	d505      	bpl.n	8007736 <_fwalk_sglue+0x22>
 800772a:	6824      	ldr	r4, [r4, #0]
 800772c:	2c00      	cmp	r4, #0
 800772e:	d1f7      	bne.n	8007720 <_fwalk_sglue+0xc>
 8007730:	4630      	mov	r0, r6
 8007732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007736:	89ab      	ldrh	r3, [r5, #12]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d907      	bls.n	800774c <_fwalk_sglue+0x38>
 800773c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007740:	3301      	adds	r3, #1
 8007742:	d003      	beq.n	800774c <_fwalk_sglue+0x38>
 8007744:	4629      	mov	r1, r5
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	4306      	orrs	r6, r0
 800774c:	3568      	adds	r5, #104	@ 0x68
 800774e:	e7e9      	b.n	8007724 <_fwalk_sglue+0x10>

08007750 <iprintf>:
 8007750:	b40f      	push	{r0, r1, r2, r3}
 8007752:	b507      	push	{r0, r1, r2, lr}
 8007754:	4906      	ldr	r1, [pc, #24]	@ (8007770 <iprintf+0x20>)
 8007756:	ab04      	add	r3, sp, #16
 8007758:	6808      	ldr	r0, [r1, #0]
 800775a:	f853 2b04 	ldr.w	r2, [r3], #4
 800775e:	6881      	ldr	r1, [r0, #8]
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	f001 fd49 	bl	80091f8 <_vfiprintf_r>
 8007766:	b003      	add	sp, #12
 8007768:	f85d eb04 	ldr.w	lr, [sp], #4
 800776c:	b004      	add	sp, #16
 800776e:	4770      	bx	lr
 8007770:	20000248 	.word	0x20000248

08007774 <siprintf>:
 8007774:	b40e      	push	{r1, r2, r3}
 8007776:	b500      	push	{lr}
 8007778:	b09c      	sub	sp, #112	@ 0x70
 800777a:	ab1d      	add	r3, sp, #116	@ 0x74
 800777c:	9002      	str	r0, [sp, #8]
 800777e:	9006      	str	r0, [sp, #24]
 8007780:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007784:	4809      	ldr	r0, [pc, #36]	@ (80077ac <siprintf+0x38>)
 8007786:	9107      	str	r1, [sp, #28]
 8007788:	9104      	str	r1, [sp, #16]
 800778a:	4909      	ldr	r1, [pc, #36]	@ (80077b0 <siprintf+0x3c>)
 800778c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007790:	9105      	str	r1, [sp, #20]
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	a902      	add	r1, sp, #8
 8007798:	f001 fc08 	bl	8008fac <_svfiprintf_r>
 800779c:	9b02      	ldr	r3, [sp, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	b01c      	add	sp, #112	@ 0x70
 80077a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a8:	b003      	add	sp, #12
 80077aa:	4770      	bx	lr
 80077ac:	20000248 	.word	0x20000248
 80077b0:	ffff0208 	.word	0xffff0208

080077b4 <__sread>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	460c      	mov	r4, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	f000 f86c 	bl	8007898 <_read_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	bfab      	itete	ge
 80077c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077c6:	89a3      	ldrhlt	r3, [r4, #12]
 80077c8:	181b      	addge	r3, r3, r0
 80077ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077ce:	bfac      	ite	ge
 80077d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80077d2:	81a3      	strhlt	r3, [r4, #12]
 80077d4:	bd10      	pop	{r4, pc}

080077d6 <__swrite>:
 80077d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077da:	461f      	mov	r7, r3
 80077dc:	898b      	ldrh	r3, [r1, #12]
 80077de:	05db      	lsls	r3, r3, #23
 80077e0:	4605      	mov	r5, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	4616      	mov	r6, r2
 80077e6:	d505      	bpl.n	80077f4 <__swrite+0x1e>
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	2302      	movs	r3, #2
 80077ee:	2200      	movs	r2, #0
 80077f0:	f000 f840 	bl	8007874 <_lseek_r>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	4632      	mov	r2, r6
 8007802:	463b      	mov	r3, r7
 8007804:	4628      	mov	r0, r5
 8007806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780a:	f000 b857 	b.w	80078bc <_write_r>

0800780e <__sseek>:
 800780e:	b510      	push	{r4, lr}
 8007810:	460c      	mov	r4, r1
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 f82d 	bl	8007874 <_lseek_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	bf15      	itete	ne
 8007820:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800782a:	81a3      	strheq	r3, [r4, #12]
 800782c:	bf18      	it	ne
 800782e:	81a3      	strhne	r3, [r4, #12]
 8007830:	bd10      	pop	{r4, pc}

08007832 <__sclose>:
 8007832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007836:	f000 b80d 	b.w	8007854 <_close_r>

0800783a <memset>:
 800783a:	4402      	add	r2, r0
 800783c:	4603      	mov	r3, r0
 800783e:	4293      	cmp	r3, r2
 8007840:	d100      	bne.n	8007844 <memset+0xa>
 8007842:	4770      	bx	lr
 8007844:	f803 1b01 	strb.w	r1, [r3], #1
 8007848:	e7f9      	b.n	800783e <memset+0x4>
	...

0800784c <_localeconv_r>:
 800784c:	4800      	ldr	r0, [pc, #0]	@ (8007850 <_localeconv_r+0x4>)
 800784e:	4770      	bx	lr
 8007850:	20000388 	.word	0x20000388

08007854 <_close_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d06      	ldr	r5, [pc, #24]	@ (8007870 <_close_r+0x1c>)
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	f7fe f8e2 	bl	8005a28 <_close>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_close_r+0x1a>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_close_r+0x1a>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20024960 	.word	0x20024960

08007874 <_lseek_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d07      	ldr	r5, [pc, #28]	@ (8007894 <_lseek_r+0x20>)
 8007878:	4604      	mov	r4, r0
 800787a:	4608      	mov	r0, r1
 800787c:	4611      	mov	r1, r2
 800787e:	2200      	movs	r2, #0
 8007880:	602a      	str	r2, [r5, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	f7fe f8da 	bl	8005a3c <_lseek>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_lseek_r+0x1e>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_lseek_r+0x1e>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	20024960 	.word	0x20024960

08007898 <_read_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	@ (80078b8 <_read_r+0x20>)
 800789c:	4604      	mov	r4, r0
 800789e:	4608      	mov	r0, r1
 80078a0:	4611      	mov	r1, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	602a      	str	r2, [r5, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f7fe f887 	bl	80059ba <_read>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_read_r+0x1e>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_read_r+0x1e>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	20024960 	.word	0x20024960

080078bc <_write_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	@ (80078dc <_write_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7fe f883 	bl	80059d6 <_write>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_write_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_write_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	20024960 	.word	0x20024960

080078e0 <__errno>:
 80078e0:	4b01      	ldr	r3, [pc, #4]	@ (80078e8 <__errno+0x8>)
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000248 	.word	0x20000248

080078ec <__libc_init_array>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007924 <__libc_init_array+0x38>)
 80078f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007928 <__libc_init_array+0x3c>)
 80078f2:	1b64      	subs	r4, r4, r5
 80078f4:	10a4      	asrs	r4, r4, #2
 80078f6:	2600      	movs	r6, #0
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	d109      	bne.n	8007910 <__libc_init_array+0x24>
 80078fc:	4d0b      	ldr	r5, [pc, #44]	@ (800792c <__libc_init_array+0x40>)
 80078fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007930 <__libc_init_array+0x44>)
 8007900:	f002 fda0 	bl	800a444 <_init>
 8007904:	1b64      	subs	r4, r4, r5
 8007906:	10a4      	asrs	r4, r4, #2
 8007908:	2600      	movs	r6, #0
 800790a:	42a6      	cmp	r6, r4
 800790c:	d105      	bne.n	800791a <__libc_init_array+0x2e>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	f855 3b04 	ldr.w	r3, [r5], #4
 8007914:	4798      	blx	r3
 8007916:	3601      	adds	r6, #1
 8007918:	e7ee      	b.n	80078f8 <__libc_init_array+0xc>
 800791a:	f855 3b04 	ldr.w	r3, [r5], #4
 800791e:	4798      	blx	r3
 8007920:	3601      	adds	r6, #1
 8007922:	e7f2      	b.n	800790a <__libc_init_array+0x1e>
 8007924:	08010f34 	.word	0x08010f34
 8007928:	08010f34 	.word	0x08010f34
 800792c:	08010f34 	.word	0x08010f34
 8007930:	08010f38 	.word	0x08010f38

08007934 <__retarget_lock_init_recursive>:
 8007934:	4770      	bx	lr

08007936 <__retarget_lock_acquire_recursive>:
 8007936:	4770      	bx	lr

08007938 <__retarget_lock_release_recursive>:
 8007938:	4770      	bx	lr

0800793a <memcpy>:
 800793a:	440a      	add	r2, r1
 800793c:	4291      	cmp	r1, r2
 800793e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007942:	d100      	bne.n	8007946 <memcpy+0xc>
 8007944:	4770      	bx	lr
 8007946:	b510      	push	{r4, lr}
 8007948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007950:	4291      	cmp	r1, r2
 8007952:	d1f9      	bne.n	8007948 <memcpy+0xe>
 8007954:	bd10      	pop	{r4, pc}

08007956 <quorem>:
 8007956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	6903      	ldr	r3, [r0, #16]
 800795c:	690c      	ldr	r4, [r1, #16]
 800795e:	42a3      	cmp	r3, r4
 8007960:	4607      	mov	r7, r0
 8007962:	db7e      	blt.n	8007a62 <quorem+0x10c>
 8007964:	3c01      	subs	r4, #1
 8007966:	f101 0814 	add.w	r8, r1, #20
 800796a:	00a3      	lsls	r3, r4, #2
 800796c:	f100 0514 	add.w	r5, r0, #20
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800797c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007980:	3301      	adds	r3, #1
 8007982:	429a      	cmp	r2, r3
 8007984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007988:	fbb2 f6f3 	udiv	r6, r2, r3
 800798c:	d32e      	bcc.n	80079ec <quorem+0x96>
 800798e:	f04f 0a00 	mov.w	sl, #0
 8007992:	46c4      	mov	ip, r8
 8007994:	46ae      	mov	lr, r5
 8007996:	46d3      	mov	fp, sl
 8007998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800799c:	b298      	uxth	r0, r3
 800799e:	fb06 a000 	mla	r0, r6, r0, sl
 80079a2:	0c02      	lsrs	r2, r0, #16
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	fb06 2303 	mla	r3, r6, r3, r2
 80079aa:	f8de 2000 	ldr.w	r2, [lr]
 80079ae:	b280      	uxth	r0, r0
 80079b0:	b292      	uxth	r2, r2
 80079b2:	1a12      	subs	r2, r2, r0
 80079b4:	445a      	add	r2, fp
 80079b6:	f8de 0000 	ldr.w	r0, [lr]
 80079ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079be:	b29b      	uxth	r3, r3
 80079c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079c8:	b292      	uxth	r2, r2
 80079ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079ce:	45e1      	cmp	r9, ip
 80079d0:	f84e 2b04 	str.w	r2, [lr], #4
 80079d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079d8:	d2de      	bcs.n	8007998 <quorem+0x42>
 80079da:	9b00      	ldr	r3, [sp, #0]
 80079dc:	58eb      	ldr	r3, [r5, r3]
 80079de:	b92b      	cbnz	r3, 80079ec <quorem+0x96>
 80079e0:	9b01      	ldr	r3, [sp, #4]
 80079e2:	3b04      	subs	r3, #4
 80079e4:	429d      	cmp	r5, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	d32f      	bcc.n	8007a4a <quorem+0xf4>
 80079ea:	613c      	str	r4, [r7, #16]
 80079ec:	4638      	mov	r0, r7
 80079ee:	f001 f979 	bl	8008ce4 <__mcmp>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	db25      	blt.n	8007a42 <quorem+0xec>
 80079f6:	4629      	mov	r1, r5
 80079f8:	2000      	movs	r0, #0
 80079fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80079fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007a02:	fa1f fe82 	uxth.w	lr, r2
 8007a06:	fa1f f38c 	uxth.w	r3, ip
 8007a0a:	eba3 030e 	sub.w	r3, r3, lr
 8007a0e:	4403      	add	r3, r0
 8007a10:	0c12      	lsrs	r2, r2, #16
 8007a12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a20:	45c1      	cmp	r9, r8
 8007a22:	f841 3b04 	str.w	r3, [r1], #4
 8007a26:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a2a:	d2e6      	bcs.n	80079fa <quorem+0xa4>
 8007a2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a34:	b922      	cbnz	r2, 8007a40 <quorem+0xea>
 8007a36:	3b04      	subs	r3, #4
 8007a38:	429d      	cmp	r5, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	d30b      	bcc.n	8007a56 <quorem+0x100>
 8007a3e:	613c      	str	r4, [r7, #16]
 8007a40:	3601      	adds	r6, #1
 8007a42:	4630      	mov	r0, r6
 8007a44:	b003      	add	sp, #12
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d1cb      	bne.n	80079ea <quorem+0x94>
 8007a52:	3c01      	subs	r4, #1
 8007a54:	e7c6      	b.n	80079e4 <quorem+0x8e>
 8007a56:	6812      	ldr	r2, [r2, #0]
 8007a58:	3b04      	subs	r3, #4
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	d1ef      	bne.n	8007a3e <quorem+0xe8>
 8007a5e:	3c01      	subs	r4, #1
 8007a60:	e7ea      	b.n	8007a38 <quorem+0xe2>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7ee      	b.n	8007a44 <quorem+0xee>
	...

08007a68 <_dtoa_r>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	69c7      	ldr	r7, [r0, #28]
 8007a6e:	b099      	sub	sp, #100	@ 0x64
 8007a70:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a74:	ec55 4b10 	vmov	r4, r5, d0
 8007a78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a7c:	4683      	mov	fp, r0
 8007a7e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a82:	b97f      	cbnz	r7, 8007aa4 <_dtoa_r+0x3c>
 8007a84:	2010      	movs	r0, #16
 8007a86:	f000 fdfd 	bl	8008684 <malloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a90:	b920      	cbnz	r0, 8007a9c <_dtoa_r+0x34>
 8007a92:	4ba7      	ldr	r3, [pc, #668]	@ (8007d30 <_dtoa_r+0x2c8>)
 8007a94:	21ef      	movs	r1, #239	@ 0xef
 8007a96:	48a7      	ldr	r0, [pc, #668]	@ (8007d34 <_dtoa_r+0x2cc>)
 8007a98:	f001 fe30 	bl	80096fc <__assert_func>
 8007a9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007aa0:	6007      	str	r7, [r0, #0]
 8007aa2:	60c7      	str	r7, [r0, #12]
 8007aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	b159      	cbz	r1, 8007ac4 <_dtoa_r+0x5c>
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	604a      	str	r2, [r1, #4]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4093      	lsls	r3, r2
 8007ab4:	608b      	str	r3, [r1, #8]
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 feda 	bl	8008870 <_Bfree>
 8007abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	1e2b      	subs	r3, r5, #0
 8007ac6:	bfb9      	ittee	lt
 8007ac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007acc:	9303      	strlt	r3, [sp, #12]
 8007ace:	2300      	movge	r3, #0
 8007ad0:	6033      	strge	r3, [r6, #0]
 8007ad2:	9f03      	ldr	r7, [sp, #12]
 8007ad4:	4b98      	ldr	r3, [pc, #608]	@ (8007d38 <_dtoa_r+0x2d0>)
 8007ad6:	bfbc      	itt	lt
 8007ad8:	2201      	movlt	r2, #1
 8007ada:	6032      	strlt	r2, [r6, #0]
 8007adc:	43bb      	bics	r3, r7
 8007ade:	d112      	bne.n	8007b06 <_dtoa_r+0x9e>
 8007ae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007aec:	4323      	orrs	r3, r4
 8007aee:	f000 854d 	beq.w	800858c <_dtoa_r+0xb24>
 8007af2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007af4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d4c <_dtoa_r+0x2e4>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 854f 	beq.w	800859c <_dtoa_r+0xb34>
 8007afe:	f10a 0303 	add.w	r3, sl, #3
 8007b02:	f000 bd49 	b.w	8008598 <_dtoa_r+0xb30>
 8007b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	ec51 0b17 	vmov	r0, r1, d7
 8007b10:	2300      	movs	r3, #0
 8007b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b16:	f7f8 fff7 	bl	8000b08 <__aeabi_dcmpeq>
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	b158      	cbz	r0, 8007b36 <_dtoa_r+0xce>
 8007b1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b20:	2301      	movs	r3, #1
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b26:	b113      	cbz	r3, 8007b2e <_dtoa_r+0xc6>
 8007b28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b2a:	4b84      	ldr	r3, [pc, #528]	@ (8007d3c <_dtoa_r+0x2d4>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007d50 <_dtoa_r+0x2e8>
 8007b32:	f000 bd33 	b.w	800859c <_dtoa_r+0xb34>
 8007b36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b3a:	aa16      	add	r2, sp, #88	@ 0x58
 8007b3c:	a917      	add	r1, sp, #92	@ 0x5c
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f001 f980 	bl	8008e44 <__d2b>
 8007b44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b48:	4681      	mov	r9, r0
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	d077      	beq.n	8007c3e <_dtoa_r+0x1d6>
 8007b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b68:	4619      	mov	r1, r3
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b74      	ldr	r3, [pc, #464]	@ (8007d40 <_dtoa_r+0x2d8>)
 8007b6e:	f7f8 fbab 	bl	80002c8 <__aeabi_dsub>
 8007b72:	a369      	add	r3, pc, #420	@ (adr r3, 8007d18 <_dtoa_r+0x2b0>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fd5e 	bl	8000638 <__aeabi_dmul>
 8007b7c:	a368      	add	r3, pc, #416	@ (adr r3, 8007d20 <_dtoa_r+0x2b8>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fba3 	bl	80002cc <__adddf3>
 8007b86:	4604      	mov	r4, r0
 8007b88:	4630      	mov	r0, r6
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	f7f8 fcea 	bl	8000564 <__aeabi_i2d>
 8007b90:	a365      	add	r3, pc, #404	@ (adr r3, 8007d28 <_dtoa_r+0x2c0>)
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	f7f8 fd4f 	bl	8000638 <__aeabi_dmul>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fb93 	bl	80002cc <__adddf3>
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	f7f8 fff5 	bl	8000b98 <__aeabi_d2iz>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 ffb0 	bl	8000b1c <__aeabi_dcmplt>
 8007bbc:	b140      	cbz	r0, 8007bd0 <_dtoa_r+0x168>
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7f8 fcd0 	bl	8000564 <__aeabi_i2d>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	f7f8 ff9e 	bl	8000b08 <__aeabi_dcmpeq>
 8007bcc:	b900      	cbnz	r0, 8007bd0 <_dtoa_r+0x168>
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	2f16      	cmp	r7, #22
 8007bd2:	d851      	bhi.n	8007c78 <_dtoa_r+0x210>
 8007bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d44 <_dtoa_r+0x2dc>)
 8007bd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be2:	f7f8 ff9b 	bl	8000b1c <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d048      	beq.n	8007c7c <_dtoa_r+0x214>
 8007bea:	3f01      	subs	r7, #1
 8007bec:	2300      	movs	r3, #0
 8007bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007bf2:	1b9b      	subs	r3, r3, r6
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	bf44      	itt	mi
 8007bf8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007bfc:	2300      	movmi	r3, #0
 8007bfe:	9208      	str	r2, [sp, #32]
 8007c00:	bf54      	ite	pl
 8007c02:	f04f 0800 	movpl.w	r8, #0
 8007c06:	9308      	strmi	r3, [sp, #32]
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	db39      	blt.n	8007c80 <_dtoa_r+0x218>
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c10:	443b      	add	r3, r7
 8007c12:	9308      	str	r3, [sp, #32]
 8007c14:	2300      	movs	r3, #0
 8007c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d864      	bhi.n	8007ce8 <_dtoa_r+0x280>
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	bfc4      	itt	gt
 8007c22:	3b04      	subgt	r3, #4
 8007c24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c28:	f1a3 0302 	sub.w	r3, r3, #2
 8007c2c:	bfcc      	ite	gt
 8007c2e:	2400      	movgt	r4, #0
 8007c30:	2401      	movle	r4, #1
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d863      	bhi.n	8007cfe <_dtoa_r+0x296>
 8007c36:	e8df f003 	tbb	[pc, r3]
 8007c3a:	372a      	.short	0x372a
 8007c3c:	5535      	.short	0x5535
 8007c3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007c42:	441e      	add	r6, r3
 8007c44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	bfc1      	itttt	gt
 8007c4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c50:	409f      	lslgt	r7, r3
 8007c52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c5a:	bfd6      	itet	le
 8007c5c:	f1c3 0320 	rsble	r3, r3, #32
 8007c60:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c64:	fa04 f003 	lslle.w	r0, r4, r3
 8007c68:	f7f8 fc6c 	bl	8000544 <__aeabi_ui2d>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c72:	3e01      	subs	r6, #1
 8007c74:	9214      	str	r2, [sp, #80]	@ 0x50
 8007c76:	e777      	b.n	8007b68 <_dtoa_r+0x100>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7b8      	b.n	8007bee <_dtoa_r+0x186>
 8007c7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c7e:	e7b7      	b.n	8007bf0 <_dtoa_r+0x188>
 8007c80:	427b      	negs	r3, r7
 8007c82:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c84:	2300      	movs	r3, #0
 8007c86:	eba8 0807 	sub.w	r8, r8, r7
 8007c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c8c:	e7c4      	b.n	8007c18 <_dtoa_r+0x1b0>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc35      	bgt.n	8007d04 <_dtoa_r+0x29c>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ca2:	e00b      	b.n	8007cbc <_dtoa_r+0x254>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e7f3      	b.n	8007c90 <_dtoa_r+0x228>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cae:	18fb      	adds	r3, r7, r3
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	9307      	str	r3, [sp, #28]
 8007cb8:	bfb8      	it	lt
 8007cba:	2301      	movlt	r3, #1
 8007cbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2204      	movs	r2, #4
 8007cc4:	f102 0514 	add.w	r5, r2, #20
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	d91f      	bls.n	8007d0c <_dtoa_r+0x2a4>
 8007ccc:	6041      	str	r1, [r0, #4]
 8007cce:	4658      	mov	r0, fp
 8007cd0:	f000 fd8e 	bl	80087f0 <_Balloc>
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d13c      	bne.n	8007d54 <_dtoa_r+0x2ec>
 8007cda:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <_dtoa_r+0x2e0>)
 8007cdc:	4602      	mov	r2, r0
 8007cde:	f240 11af 	movw	r1, #431	@ 0x1af
 8007ce2:	e6d8      	b.n	8007a96 <_dtoa_r+0x2e>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e7e0      	b.n	8007caa <_dtoa_r+0x242>
 8007ce8:	2401      	movs	r4, #1
 8007cea:	2300      	movs	r3, #0
 8007cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	9307      	str	r3, [sp, #28]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2312      	movs	r3, #18
 8007cfc:	e7d0      	b.n	8007ca0 <_dtoa_r+0x238>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d02:	e7f5      	b.n	8007cf0 <_dtoa_r+0x288>
 8007d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	e7d7      	b.n	8007cbc <_dtoa_r+0x254>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	0052      	lsls	r2, r2, #1
 8007d10:	e7d8      	b.n	8007cc4 <_dtoa_r+0x25c>
 8007d12:	bf00      	nop
 8007d14:	f3af 8000 	nop.w
 8007d18:	636f4361 	.word	0x636f4361
 8007d1c:	3fd287a7 	.word	0x3fd287a7
 8007d20:	8b60c8b3 	.word	0x8b60c8b3
 8007d24:	3fc68a28 	.word	0x3fc68a28
 8007d28:	509f79fb 	.word	0x509f79fb
 8007d2c:	3fd34413 	.word	0x3fd34413
 8007d30:	0801082f 	.word	0x0801082f
 8007d34:	08010846 	.word	0x08010846
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	080107ff 	.word	0x080107ff
 8007d40:	3ff80000 	.word	0x3ff80000
 8007d44:	08010940 	.word	0x08010940
 8007d48:	0801089e 	.word	0x0801089e
 8007d4c:	0801082b 	.word	0x0801082b
 8007d50:	080107fe 	.word	0x080107fe
 8007d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d58:	6018      	str	r0, [r3, #0]
 8007d5a:	9b07      	ldr	r3, [sp, #28]
 8007d5c:	2b0e      	cmp	r3, #14
 8007d5e:	f200 80a4 	bhi.w	8007eaa <_dtoa_r+0x442>
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	f000 80a1 	beq.w	8007eaa <_dtoa_r+0x442>
 8007d68:	2f00      	cmp	r7, #0
 8007d6a:	dd33      	ble.n	8007dd4 <_dtoa_r+0x36c>
 8007d6c:	4bad      	ldr	r3, [pc, #692]	@ (8008024 <_dtoa_r+0x5bc>)
 8007d6e:	f007 020f 	and.w	r2, r7, #15
 8007d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d76:	ed93 7b00 	vldr	d7, [r3]
 8007d7a:	05f8      	lsls	r0, r7, #23
 8007d7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d84:	d516      	bpl.n	8007db4 <_dtoa_r+0x34c>
 8007d86:	4ba8      	ldr	r3, [pc, #672]	@ (8008028 <_dtoa_r+0x5c0>)
 8007d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d90:	f7f8 fd7c 	bl	800088c <__aeabi_ddiv>
 8007d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d98:	f004 040f 	and.w	r4, r4, #15
 8007d9c:	2603      	movs	r6, #3
 8007d9e:	4da2      	ldr	r5, [pc, #648]	@ (8008028 <_dtoa_r+0x5c0>)
 8007da0:	b954      	cbnz	r4, 8007db8 <_dtoa_r+0x350>
 8007da2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007daa:	f7f8 fd6f 	bl	800088c <__aeabi_ddiv>
 8007dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db2:	e028      	b.n	8007e06 <_dtoa_r+0x39e>
 8007db4:	2602      	movs	r6, #2
 8007db6:	e7f2      	b.n	8007d9e <_dtoa_r+0x336>
 8007db8:	07e1      	lsls	r1, r4, #31
 8007dba:	d508      	bpl.n	8007dce <_dtoa_r+0x366>
 8007dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dc4:	f7f8 fc38 	bl	8000638 <__aeabi_dmul>
 8007dc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dcc:	3601      	adds	r6, #1
 8007dce:	1064      	asrs	r4, r4, #1
 8007dd0:	3508      	adds	r5, #8
 8007dd2:	e7e5      	b.n	8007da0 <_dtoa_r+0x338>
 8007dd4:	f000 80d2 	beq.w	8007f7c <_dtoa_r+0x514>
 8007dd8:	427c      	negs	r4, r7
 8007dda:	4b92      	ldr	r3, [pc, #584]	@ (8008024 <_dtoa_r+0x5bc>)
 8007ddc:	4d92      	ldr	r5, [pc, #584]	@ (8008028 <_dtoa_r+0x5c0>)
 8007dde:	f004 020f 	and.w	r2, r4, #15
 8007de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dee:	f7f8 fc23 	bl	8000638 <__aeabi_dmul>
 8007df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df6:	1124      	asrs	r4, r4, #4
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2602      	movs	r6, #2
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	f040 80b2 	bne.w	8007f66 <_dtoa_r+0x4fe>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1d3      	bne.n	8007dae <_dtoa_r+0x346>
 8007e06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 80b7 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e12:	4b86      	ldr	r3, [pc, #536]	@ (800802c <_dtoa_r+0x5c4>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	4620      	mov	r0, r4
 8007e18:	4629      	mov	r1, r5
 8007e1a:	f7f8 fe7f 	bl	8000b1c <__aeabi_dcmplt>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f000 80ae 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80aa 	beq.w	8007f80 <_dtoa_r+0x518>
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dd37      	ble.n	8007ea2 <_dtoa_r+0x43a>
 8007e32:	1e7b      	subs	r3, r7, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	4620      	mov	r0, r4
 8007e38:	4b7d      	ldr	r3, [pc, #500]	@ (8008030 <_dtoa_r+0x5c8>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fbfb 	bl	8000638 <__aeabi_dmul>
 8007e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e46:	9c00      	ldr	r4, [sp, #0]
 8007e48:	3601      	adds	r6, #1
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7f8 fb8a 	bl	8000564 <__aeabi_i2d>
 8007e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e54:	f7f8 fbf0 	bl	8000638 <__aeabi_dmul>
 8007e58:	4b76      	ldr	r3, [pc, #472]	@ (8008034 <_dtoa_r+0x5cc>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f7f8 fa36 	bl	80002cc <__adddf3>
 8007e60:	4605      	mov	r5, r0
 8007e62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	f040 808d 	bne.w	8007f86 <_dtoa_r+0x51e>
 8007e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e70:	4b71      	ldr	r3, [pc, #452]	@ (8008038 <_dtoa_r+0x5d0>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	f7f8 fa28 	bl	80002c8 <__aeabi_dsub>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e80:	462a      	mov	r2, r5
 8007e82:	4633      	mov	r3, r6
 8007e84:	f7f8 fe68 	bl	8000b58 <__aeabi_dcmpgt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f040 828b 	bne.w	80083a4 <_dtoa_r+0x93c>
 8007e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e92:	462a      	mov	r2, r5
 8007e94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e98:	f7f8 fe40 	bl	8000b1c <__aeabi_dcmplt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 8128 	bne.w	80080f2 <_dtoa_r+0x68a>
 8007ea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007eaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f2c0 815a 	blt.w	8008166 <_dtoa_r+0x6fe>
 8007eb2:	2f0e      	cmp	r7, #14
 8007eb4:	f300 8157 	bgt.w	8008166 <_dtoa_r+0x6fe>
 8007eb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008024 <_dtoa_r+0x5bc>)
 8007eba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ebe:	ed93 7b00 	vldr	d7, [r3]
 8007ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	ed8d 7b00 	vstr	d7, [sp]
 8007eca:	da03      	bge.n	8007ed4 <_dtoa_r+0x46c>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f340 8101 	ble.w	80080d6 <_dtoa_r+0x66e>
 8007ed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ed8:	4656      	mov	r6, sl
 8007eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fcd3 	bl	800088c <__aeabi_ddiv>
 8007ee6:	f7f8 fe57 	bl	8000b98 <__aeabi_d2iz>
 8007eea:	4680      	mov	r8, r0
 8007eec:	f7f8 fb3a 	bl	8000564 <__aeabi_i2d>
 8007ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef4:	f7f8 fba0 	bl	8000638 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f04:	f7f8 f9e0 	bl	80002c8 <__aeabi_dsub>
 8007f08:	f806 4b01 	strb.w	r4, [r6], #1
 8007f0c:	9d07      	ldr	r5, [sp, #28]
 8007f0e:	eba6 040a 	sub.w	r4, r6, sl
 8007f12:	42a5      	cmp	r5, r4
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	f040 8117 	bne.w	800814a <_dtoa_r+0x6e2>
 8007f1c:	f7f8 f9d6 	bl	80002cc <__adddf3>
 8007f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f24:	4604      	mov	r4, r0
 8007f26:	460d      	mov	r5, r1
 8007f28:	f7f8 fe16 	bl	8000b58 <__aeabi_dcmpgt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	f040 80f9 	bne.w	8008124 <_dtoa_r+0x6bc>
 8007f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	f7f8 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8007f3e:	b118      	cbz	r0, 8007f48 <_dtoa_r+0x4e0>
 8007f40:	f018 0f01 	tst.w	r8, #1
 8007f44:	f040 80ee 	bne.w	8008124 <_dtoa_r+0x6bc>
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fc90 	bl	8008870 <_Bfree>
 8007f50:	2300      	movs	r3, #0
 8007f52:	7033      	strb	r3, [r6, #0]
 8007f54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f56:	3701      	adds	r7, #1
 8007f58:	601f      	str	r7, [r3, #0]
 8007f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 831d 	beq.w	800859c <_dtoa_r+0xb34>
 8007f62:	601e      	str	r6, [r3, #0]
 8007f64:	e31a      	b.n	800859c <_dtoa_r+0xb34>
 8007f66:	07e2      	lsls	r2, r4, #31
 8007f68:	d505      	bpl.n	8007f76 <_dtoa_r+0x50e>
 8007f6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f6e:	f7f8 fb63 	bl	8000638 <__aeabi_dmul>
 8007f72:	3601      	adds	r6, #1
 8007f74:	2301      	movs	r3, #1
 8007f76:	1064      	asrs	r4, r4, #1
 8007f78:	3508      	adds	r5, #8
 8007f7a:	e73f      	b.n	8007dfc <_dtoa_r+0x394>
 8007f7c:	2602      	movs	r6, #2
 8007f7e:	e742      	b.n	8007e06 <_dtoa_r+0x39e>
 8007f80:	9c07      	ldr	r4, [sp, #28]
 8007f82:	9704      	str	r7, [sp, #16]
 8007f84:	e761      	b.n	8007e4a <_dtoa_r+0x3e2>
 8007f86:	4b27      	ldr	r3, [pc, #156]	@ (8008024 <_dtoa_r+0x5bc>)
 8007f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f92:	4454      	add	r4, sl
 8007f94:	2900      	cmp	r1, #0
 8007f96:	d053      	beq.n	8008040 <_dtoa_r+0x5d8>
 8007f98:	4928      	ldr	r1, [pc, #160]	@ (800803c <_dtoa_r+0x5d4>)
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f7f8 fc76 	bl	800088c <__aeabi_ddiv>
 8007fa0:	4633      	mov	r3, r6
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	f7f8 f990 	bl	80002c8 <__aeabi_dsub>
 8007fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fac:	4656      	mov	r6, sl
 8007fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb2:	f7f8 fdf1 	bl	8000b98 <__aeabi_d2iz>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	f7f8 fad4 	bl	8000564 <__aeabi_i2d>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc4:	f7f8 f980 	bl	80002c8 <__aeabi_dsub>
 8007fc8:	3530      	adds	r5, #48	@ 0x30
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd2:	f806 5b01 	strb.w	r5, [r6], #1
 8007fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fda:	f7f8 fd9f 	bl	8000b1c <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d171      	bne.n	80080c6 <_dtoa_r+0x65e>
 8007fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fe6:	4911      	ldr	r1, [pc, #68]	@ (800802c <_dtoa_r+0x5c4>)
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f7f8 f96d 	bl	80002c8 <__aeabi_dsub>
 8007fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ff2:	f7f8 fd93 	bl	8000b1c <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f040 8095 	bne.w	8008126 <_dtoa_r+0x6be>
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	f43f af50 	beq.w	8007ea2 <_dtoa_r+0x43a>
 8008002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008006:	4b0a      	ldr	r3, [pc, #40]	@ (8008030 <_dtoa_r+0x5c8>)
 8008008:	2200      	movs	r2, #0
 800800a:	f7f8 fb15 	bl	8000638 <__aeabi_dmul>
 800800e:	4b08      	ldr	r3, [pc, #32]	@ (8008030 <_dtoa_r+0x5c8>)
 8008010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008014:	2200      	movs	r2, #0
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 fb0d 	bl	8000638 <__aeabi_dmul>
 800801e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008022:	e7c4      	b.n	8007fae <_dtoa_r+0x546>
 8008024:	08010940 	.word	0x08010940
 8008028:	08010918 	.word	0x08010918
 800802c:	3ff00000 	.word	0x3ff00000
 8008030:	40240000 	.word	0x40240000
 8008034:	401c0000 	.word	0x401c0000
 8008038:	40140000 	.word	0x40140000
 800803c:	3fe00000 	.word	0x3fe00000
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	f7f8 faf8 	bl	8000638 <__aeabi_dmul>
 8008048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800804c:	9415      	str	r4, [sp, #84]	@ 0x54
 800804e:	4656      	mov	r6, sl
 8008050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008054:	f7f8 fda0 	bl	8000b98 <__aeabi_d2iz>
 8008058:	4605      	mov	r5, r0
 800805a:	f7f8 fa83 	bl	8000564 <__aeabi_i2d>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008066:	f7f8 f92f 	bl	80002c8 <__aeabi_dsub>
 800806a:	3530      	adds	r5, #48	@ 0x30
 800806c:	f806 5b01 	strb.w	r5, [r6], #1
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	42a6      	cmp	r6, r4
 8008076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	d124      	bne.n	80080ca <_dtoa_r+0x662>
 8008080:	4bac      	ldr	r3, [pc, #688]	@ (8008334 <_dtoa_r+0x8cc>)
 8008082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008086:	f7f8 f921 	bl	80002cc <__adddf3>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008092:	f7f8 fd61 	bl	8000b58 <__aeabi_dcmpgt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d145      	bne.n	8008126 <_dtoa_r+0x6be>
 800809a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800809e:	49a5      	ldr	r1, [pc, #660]	@ (8008334 <_dtoa_r+0x8cc>)
 80080a0:	2000      	movs	r0, #0
 80080a2:	f7f8 f911 	bl	80002c8 <__aeabi_dsub>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ae:	f7f8 fd35 	bl	8000b1c <__aeabi_dcmplt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f aef5 	beq.w	8007ea2 <_dtoa_r+0x43a>
 80080b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80080ba:	1e73      	subs	r3, r6, #1
 80080bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80080be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080c2:	2b30      	cmp	r3, #48	@ 0x30
 80080c4:	d0f8      	beq.n	80080b8 <_dtoa_r+0x650>
 80080c6:	9f04      	ldr	r7, [sp, #16]
 80080c8:	e73e      	b.n	8007f48 <_dtoa_r+0x4e0>
 80080ca:	4b9b      	ldr	r3, [pc, #620]	@ (8008338 <_dtoa_r+0x8d0>)
 80080cc:	f7f8 fab4 	bl	8000638 <__aeabi_dmul>
 80080d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080d4:	e7bc      	b.n	8008050 <_dtoa_r+0x5e8>
 80080d6:	d10c      	bne.n	80080f2 <_dtoa_r+0x68a>
 80080d8:	4b98      	ldr	r3, [pc, #608]	@ (800833c <_dtoa_r+0x8d4>)
 80080da:	2200      	movs	r2, #0
 80080dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e0:	f7f8 faaa 	bl	8000638 <__aeabi_dmul>
 80080e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080e8:	f7f8 fd2c 	bl	8000b44 <__aeabi_dcmpge>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f000 8157 	beq.w	80083a0 <_dtoa_r+0x938>
 80080f2:	2400      	movs	r4, #0
 80080f4:	4625      	mov	r5, r4
 80080f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080f8:	43db      	mvns	r3, r3
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	4656      	mov	r6, sl
 80080fe:	2700      	movs	r7, #0
 8008100:	4621      	mov	r1, r4
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fbb4 	bl	8008870 <_Bfree>
 8008108:	2d00      	cmp	r5, #0
 800810a:	d0dc      	beq.n	80080c6 <_dtoa_r+0x65e>
 800810c:	b12f      	cbz	r7, 800811a <_dtoa_r+0x6b2>
 800810e:	42af      	cmp	r7, r5
 8008110:	d003      	beq.n	800811a <_dtoa_r+0x6b2>
 8008112:	4639      	mov	r1, r7
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fbab 	bl	8008870 <_Bfree>
 800811a:	4629      	mov	r1, r5
 800811c:	4658      	mov	r0, fp
 800811e:	f000 fba7 	bl	8008870 <_Bfree>
 8008122:	e7d0      	b.n	80080c6 <_dtoa_r+0x65e>
 8008124:	9704      	str	r7, [sp, #16]
 8008126:	4633      	mov	r3, r6
 8008128:	461e      	mov	r6, r3
 800812a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800812e:	2a39      	cmp	r2, #57	@ 0x39
 8008130:	d107      	bne.n	8008142 <_dtoa_r+0x6da>
 8008132:	459a      	cmp	sl, r3
 8008134:	d1f8      	bne.n	8008128 <_dtoa_r+0x6c0>
 8008136:	9a04      	ldr	r2, [sp, #16]
 8008138:	3201      	adds	r2, #1
 800813a:	9204      	str	r2, [sp, #16]
 800813c:	2230      	movs	r2, #48	@ 0x30
 800813e:	f88a 2000 	strb.w	r2, [sl]
 8008142:	781a      	ldrb	r2, [r3, #0]
 8008144:	3201      	adds	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e7bd      	b.n	80080c6 <_dtoa_r+0x65e>
 800814a:	4b7b      	ldr	r3, [pc, #492]	@ (8008338 <_dtoa_r+0x8d0>)
 800814c:	2200      	movs	r2, #0
 800814e:	f7f8 fa73 	bl	8000638 <__aeabi_dmul>
 8008152:	2200      	movs	r2, #0
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	460d      	mov	r5, r1
 800815a:	f7f8 fcd5 	bl	8000b08 <__aeabi_dcmpeq>
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f aebb 	beq.w	8007eda <_dtoa_r+0x472>
 8008164:	e6f0      	b.n	8007f48 <_dtoa_r+0x4e0>
 8008166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008168:	2a00      	cmp	r2, #0
 800816a:	f000 80db 	beq.w	8008324 <_dtoa_r+0x8bc>
 800816e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008170:	2a01      	cmp	r2, #1
 8008172:	f300 80bf 	bgt.w	80082f4 <_dtoa_r+0x88c>
 8008176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008178:	2a00      	cmp	r2, #0
 800817a:	f000 80b7 	beq.w	80082ec <_dtoa_r+0x884>
 800817e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008184:	4646      	mov	r6, r8
 8008186:	9a08      	ldr	r2, [sp, #32]
 8008188:	2101      	movs	r1, #1
 800818a:	441a      	add	r2, r3
 800818c:	4658      	mov	r0, fp
 800818e:	4498      	add	r8, r3
 8008190:	9208      	str	r2, [sp, #32]
 8008192:	f000 fc21 	bl	80089d8 <__i2b>
 8008196:	4605      	mov	r5, r0
 8008198:	b15e      	cbz	r6, 80081b2 <_dtoa_r+0x74a>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd08      	ble.n	80081b2 <_dtoa_r+0x74a>
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	9a08      	ldr	r2, [sp, #32]
 80081a4:	bfa8      	it	ge
 80081a6:	4633      	movge	r3, r6
 80081a8:	eba8 0803 	sub.w	r8, r8, r3
 80081ac:	1af6      	subs	r6, r6, r3
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	9308      	str	r3, [sp, #32]
 80081b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b4:	b1f3      	cbz	r3, 80081f4 <_dtoa_r+0x78c>
 80081b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 80b7 	beq.w	800832c <_dtoa_r+0x8c4>
 80081be:	b18c      	cbz	r4, 80081e4 <_dtoa_r+0x77c>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4622      	mov	r2, r4
 80081c4:	4658      	mov	r0, fp
 80081c6:	f000 fcc7 	bl	8008b58 <__pow5mult>
 80081ca:	464a      	mov	r2, r9
 80081cc:	4601      	mov	r1, r0
 80081ce:	4605      	mov	r5, r0
 80081d0:	4658      	mov	r0, fp
 80081d2:	f000 fc17 	bl	8008a04 <__multiply>
 80081d6:	4649      	mov	r1, r9
 80081d8:	9004      	str	r0, [sp, #16]
 80081da:	4658      	mov	r0, fp
 80081dc:	f000 fb48 	bl	8008870 <_Bfree>
 80081e0:	9b04      	ldr	r3, [sp, #16]
 80081e2:	4699      	mov	r9, r3
 80081e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e6:	1b1a      	subs	r2, r3, r4
 80081e8:	d004      	beq.n	80081f4 <_dtoa_r+0x78c>
 80081ea:	4649      	mov	r1, r9
 80081ec:	4658      	mov	r0, fp
 80081ee:	f000 fcb3 	bl	8008b58 <__pow5mult>
 80081f2:	4681      	mov	r9, r0
 80081f4:	2101      	movs	r1, #1
 80081f6:	4658      	mov	r0, fp
 80081f8:	f000 fbee 	bl	80089d8 <__i2b>
 80081fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081fe:	4604      	mov	r4, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 81cf 	beq.w	80085a4 <_dtoa_r+0xb3c>
 8008206:	461a      	mov	r2, r3
 8008208:	4601      	mov	r1, r0
 800820a:	4658      	mov	r0, fp
 800820c:	f000 fca4 	bl	8008b58 <__pow5mult>
 8008210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008212:	2b01      	cmp	r3, #1
 8008214:	4604      	mov	r4, r0
 8008216:	f300 8095 	bgt.w	8008344 <_dtoa_r+0x8dc>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8087 	bne.w	8008330 <_dtoa_r+0x8c8>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008228:	2b00      	cmp	r3, #0
 800822a:	f040 8089 	bne.w	8008340 <_dtoa_r+0x8d8>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008234:	0d1b      	lsrs	r3, r3, #20
 8008236:	051b      	lsls	r3, r3, #20
 8008238:	b12b      	cbz	r3, 8008246 <_dtoa_r+0x7de>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	3301      	adds	r3, #1
 800823e:	9308      	str	r3, [sp, #32]
 8008240:	f108 0801 	add.w	r8, r8, #1
 8008244:	2301      	movs	r3, #1
 8008246:	930a      	str	r3, [sp, #40]	@ 0x28
 8008248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 81b0 	beq.w	80085b0 <_dtoa_r+0xb48>
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008256:	6918      	ldr	r0, [r3, #16]
 8008258:	f000 fb72 	bl	8008940 <__hi0bits>
 800825c:	f1c0 0020 	rsb	r0, r0, #32
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	4418      	add	r0, r3
 8008264:	f010 001f 	ands.w	r0, r0, #31
 8008268:	d077      	beq.n	800835a <_dtoa_r+0x8f2>
 800826a:	f1c0 0320 	rsb	r3, r0, #32
 800826e:	2b04      	cmp	r3, #4
 8008270:	dd6b      	ble.n	800834a <_dtoa_r+0x8e2>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	f1c0 001c 	rsb	r0, r0, #28
 8008278:	4403      	add	r3, r0
 800827a:	4480      	add	r8, r0
 800827c:	4406      	add	r6, r0
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	f1b8 0f00 	cmp.w	r8, #0
 8008284:	dd05      	ble.n	8008292 <_dtoa_r+0x82a>
 8008286:	4649      	mov	r1, r9
 8008288:	4642      	mov	r2, r8
 800828a:	4658      	mov	r0, fp
 800828c:	f000 fcbe 	bl	8008c0c <__lshift>
 8008290:	4681      	mov	r9, r0
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dd05      	ble.n	80082a4 <_dtoa_r+0x83c>
 8008298:	4621      	mov	r1, r4
 800829a:	461a      	mov	r2, r3
 800829c:	4658      	mov	r0, fp
 800829e:	f000 fcb5 	bl	8008c0c <__lshift>
 80082a2:	4604      	mov	r4, r0
 80082a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d059      	beq.n	800835e <_dtoa_r+0x8f6>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4648      	mov	r0, r9
 80082ae:	f000 fd19 	bl	8008ce4 <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	da53      	bge.n	800835e <_dtoa_r+0x8f6>
 80082b6:	1e7b      	subs	r3, r7, #1
 80082b8:	9304      	str	r3, [sp, #16]
 80082ba:	4649      	mov	r1, r9
 80082bc:	2300      	movs	r3, #0
 80082be:	220a      	movs	r2, #10
 80082c0:	4658      	mov	r0, fp
 80082c2:	f000 faf7 	bl	80088b4 <__multadd>
 80082c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082c8:	4681      	mov	r9, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8172 	beq.w	80085b4 <_dtoa_r+0xb4c>
 80082d0:	2300      	movs	r3, #0
 80082d2:	4629      	mov	r1, r5
 80082d4:	220a      	movs	r2, #10
 80082d6:	4658      	mov	r0, fp
 80082d8:	f000 faec 	bl	80088b4 <__multadd>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	4605      	mov	r5, r0
 80082e2:	dc67      	bgt.n	80083b4 <_dtoa_r+0x94c>
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dc41      	bgt.n	800836e <_dtoa_r+0x906>
 80082ea:	e063      	b.n	80083b4 <_dtoa_r+0x94c>
 80082ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082f2:	e746      	b.n	8008182 <_dtoa_r+0x71a>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	1e5c      	subs	r4, r3, #1
 80082f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	bfbf      	itttt	lt
 80082fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008304:	1ae3      	sublt	r3, r4, r3
 8008306:	bfb4      	ite	lt
 8008308:	18d2      	addlt	r2, r2, r3
 800830a:	1b1c      	subge	r4, r3, r4
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	bfbc      	itt	lt
 8008310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008312:	2400      	movlt	r4, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfb5      	itete	lt
 8008318:	eba8 0603 	sublt.w	r6, r8, r3
 800831c:	9b07      	ldrge	r3, [sp, #28]
 800831e:	2300      	movlt	r3, #0
 8008320:	4646      	movge	r6, r8
 8008322:	e730      	b.n	8008186 <_dtoa_r+0x71e>
 8008324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008328:	4646      	mov	r6, r8
 800832a:	e735      	b.n	8008198 <_dtoa_r+0x730>
 800832c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800832e:	e75c      	b.n	80081ea <_dtoa_r+0x782>
 8008330:	2300      	movs	r3, #0
 8008332:	e788      	b.n	8008246 <_dtoa_r+0x7de>
 8008334:	3fe00000 	.word	0x3fe00000
 8008338:	40240000 	.word	0x40240000
 800833c:	40140000 	.word	0x40140000
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	e780      	b.n	8008246 <_dtoa_r+0x7de>
 8008344:	2300      	movs	r3, #0
 8008346:	930a      	str	r3, [sp, #40]	@ 0x28
 8008348:	e782      	b.n	8008250 <_dtoa_r+0x7e8>
 800834a:	d099      	beq.n	8008280 <_dtoa_r+0x818>
 800834c:	9a08      	ldr	r2, [sp, #32]
 800834e:	331c      	adds	r3, #28
 8008350:	441a      	add	r2, r3
 8008352:	4498      	add	r8, r3
 8008354:	441e      	add	r6, r3
 8008356:	9208      	str	r2, [sp, #32]
 8008358:	e792      	b.n	8008280 <_dtoa_r+0x818>
 800835a:	4603      	mov	r3, r0
 800835c:	e7f6      	b.n	800834c <_dtoa_r+0x8e4>
 800835e:	9b07      	ldr	r3, [sp, #28]
 8008360:	9704      	str	r7, [sp, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	dc20      	bgt.n	80083a8 <_dtoa_r+0x940>
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836a:	2b02      	cmp	r3, #2
 800836c:	dd1e      	ble.n	80083ac <_dtoa_r+0x944>
 800836e:	9b00      	ldr	r3, [sp, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f47f aec0 	bne.w	80080f6 <_dtoa_r+0x68e>
 8008376:	4621      	mov	r1, r4
 8008378:	2205      	movs	r2, #5
 800837a:	4658      	mov	r0, fp
 800837c:	f000 fa9a 	bl	80088b4 <__multadd>
 8008380:	4601      	mov	r1, r0
 8008382:	4604      	mov	r4, r0
 8008384:	4648      	mov	r0, r9
 8008386:	f000 fcad 	bl	8008ce4 <__mcmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	f77f aeb3 	ble.w	80080f6 <_dtoa_r+0x68e>
 8008390:	4656      	mov	r6, sl
 8008392:	2331      	movs	r3, #49	@ 0x31
 8008394:	f806 3b01 	strb.w	r3, [r6], #1
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	3301      	adds	r3, #1
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	e6ae      	b.n	80080fe <_dtoa_r+0x696>
 80083a0:	9c07      	ldr	r4, [sp, #28]
 80083a2:	9704      	str	r7, [sp, #16]
 80083a4:	4625      	mov	r5, r4
 80083a6:	e7f3      	b.n	8008390 <_dtoa_r+0x928>
 80083a8:	9b07      	ldr	r3, [sp, #28]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 8104 	beq.w	80085bc <_dtoa_r+0xb54>
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	dd05      	ble.n	80083c4 <_dtoa_r+0x95c>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4632      	mov	r2, r6
 80083bc:	4658      	mov	r0, fp
 80083be:	f000 fc25 	bl	8008c0c <__lshift>
 80083c2:	4605      	mov	r5, r0
 80083c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d05a      	beq.n	8008480 <_dtoa_r+0xa18>
 80083ca:	6869      	ldr	r1, [r5, #4]
 80083cc:	4658      	mov	r0, fp
 80083ce:	f000 fa0f 	bl	80087f0 <_Balloc>
 80083d2:	4606      	mov	r6, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <_dtoa_r+0x97a>
 80083d6:	4b84      	ldr	r3, [pc, #528]	@ (80085e8 <_dtoa_r+0xb80>)
 80083d8:	4602      	mov	r2, r0
 80083da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083de:	f7ff bb5a 	b.w	8007a96 <_dtoa_r+0x2e>
 80083e2:	692a      	ldr	r2, [r5, #16]
 80083e4:	3202      	adds	r2, #2
 80083e6:	0092      	lsls	r2, r2, #2
 80083e8:	f105 010c 	add.w	r1, r5, #12
 80083ec:	300c      	adds	r0, #12
 80083ee:	f7ff faa4 	bl	800793a <memcpy>
 80083f2:	2201      	movs	r2, #1
 80083f4:	4631      	mov	r1, r6
 80083f6:	4658      	mov	r0, fp
 80083f8:	f000 fc08 	bl	8008c0c <__lshift>
 80083fc:	f10a 0301 	add.w	r3, sl, #1
 8008400:	9307      	str	r3, [sp, #28]
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	4453      	add	r3, sl
 8008406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	462f      	mov	r7, r5
 8008410:	930a      	str	r3, [sp, #40]	@ 0x28
 8008412:	4605      	mov	r5, r0
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	4621      	mov	r1, r4
 8008418:	3b01      	subs	r3, #1
 800841a:	4648      	mov	r0, r9
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	f7ff fa9a 	bl	8007956 <quorem>
 8008422:	4639      	mov	r1, r7
 8008424:	9002      	str	r0, [sp, #8]
 8008426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800842a:	4648      	mov	r0, r9
 800842c:	f000 fc5a 	bl	8008ce4 <__mcmp>
 8008430:	462a      	mov	r2, r5
 8008432:	9008      	str	r0, [sp, #32]
 8008434:	4621      	mov	r1, r4
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fc70 	bl	8008d1c <__mdiff>
 800843c:	68c2      	ldr	r2, [r0, #12]
 800843e:	4606      	mov	r6, r0
 8008440:	bb02      	cbnz	r2, 8008484 <_dtoa_r+0xa1c>
 8008442:	4601      	mov	r1, r0
 8008444:	4648      	mov	r0, r9
 8008446:	f000 fc4d 	bl	8008ce4 <__mcmp>
 800844a:	4602      	mov	r2, r0
 800844c:	4631      	mov	r1, r6
 800844e:	4658      	mov	r0, fp
 8008450:	920e      	str	r2, [sp, #56]	@ 0x38
 8008452:	f000 fa0d 	bl	8008870 <_Bfree>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800845a:	9e07      	ldr	r6, [sp, #28]
 800845c:	ea43 0102 	orr.w	r1, r3, r2
 8008460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008462:	4319      	orrs	r1, r3
 8008464:	d110      	bne.n	8008488 <_dtoa_r+0xa20>
 8008466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800846a:	d029      	beq.n	80084c0 <_dtoa_r+0xa58>
 800846c:	9b08      	ldr	r3, [sp, #32]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dd02      	ble.n	8008478 <_dtoa_r+0xa10>
 8008472:	9b02      	ldr	r3, [sp, #8]
 8008474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	f883 8000 	strb.w	r8, [r3]
 800847e:	e63f      	b.n	8008100 <_dtoa_r+0x698>
 8008480:	4628      	mov	r0, r5
 8008482:	e7bb      	b.n	80083fc <_dtoa_r+0x994>
 8008484:	2201      	movs	r2, #1
 8008486:	e7e1      	b.n	800844c <_dtoa_r+0x9e4>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	db04      	blt.n	8008498 <_dtoa_r+0xa30>
 800848e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008490:	430b      	orrs	r3, r1
 8008492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008494:	430b      	orrs	r3, r1
 8008496:	d120      	bne.n	80084da <_dtoa_r+0xa72>
 8008498:	2a00      	cmp	r2, #0
 800849a:	dded      	ble.n	8008478 <_dtoa_r+0xa10>
 800849c:	4649      	mov	r1, r9
 800849e:	2201      	movs	r2, #1
 80084a0:	4658      	mov	r0, fp
 80084a2:	f000 fbb3 	bl	8008c0c <__lshift>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4681      	mov	r9, r0
 80084aa:	f000 fc1b 	bl	8008ce4 <__mcmp>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	dc03      	bgt.n	80084ba <_dtoa_r+0xa52>
 80084b2:	d1e1      	bne.n	8008478 <_dtoa_r+0xa10>
 80084b4:	f018 0f01 	tst.w	r8, #1
 80084b8:	d0de      	beq.n	8008478 <_dtoa_r+0xa10>
 80084ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084be:	d1d8      	bne.n	8008472 <_dtoa_r+0xa0a>
 80084c0:	9a00      	ldr	r2, [sp, #0]
 80084c2:	2339      	movs	r3, #57	@ 0x39
 80084c4:	7013      	strb	r3, [r2, #0]
 80084c6:	4633      	mov	r3, r6
 80084c8:	461e      	mov	r6, r3
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084d0:	2a39      	cmp	r2, #57	@ 0x39
 80084d2:	d052      	beq.n	800857a <_dtoa_r+0xb12>
 80084d4:	3201      	adds	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e612      	b.n	8008100 <_dtoa_r+0x698>
 80084da:	2a00      	cmp	r2, #0
 80084dc:	dd07      	ble.n	80084ee <_dtoa_r+0xa86>
 80084de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084e2:	d0ed      	beq.n	80084c0 <_dtoa_r+0xa58>
 80084e4:	9a00      	ldr	r2, [sp, #0]
 80084e6:	f108 0301 	add.w	r3, r8, #1
 80084ea:	7013      	strb	r3, [r2, #0]
 80084ec:	e608      	b.n	8008100 <_dtoa_r+0x698>
 80084ee:	9b07      	ldr	r3, [sp, #28]
 80084f0:	9a07      	ldr	r2, [sp, #28]
 80084f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d028      	beq.n	800854e <_dtoa_r+0xae6>
 80084fc:	4649      	mov	r1, r9
 80084fe:	2300      	movs	r3, #0
 8008500:	220a      	movs	r2, #10
 8008502:	4658      	mov	r0, fp
 8008504:	f000 f9d6 	bl	80088b4 <__multadd>
 8008508:	42af      	cmp	r7, r5
 800850a:	4681      	mov	r9, r0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f04f 020a 	mov.w	r2, #10
 8008514:	4639      	mov	r1, r7
 8008516:	4658      	mov	r0, fp
 8008518:	d107      	bne.n	800852a <_dtoa_r+0xac2>
 800851a:	f000 f9cb 	bl	80088b4 <__multadd>
 800851e:	4607      	mov	r7, r0
 8008520:	4605      	mov	r5, r0
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	3301      	adds	r3, #1
 8008526:	9307      	str	r3, [sp, #28]
 8008528:	e774      	b.n	8008414 <_dtoa_r+0x9ac>
 800852a:	f000 f9c3 	bl	80088b4 <__multadd>
 800852e:	4629      	mov	r1, r5
 8008530:	4607      	mov	r7, r0
 8008532:	2300      	movs	r3, #0
 8008534:	220a      	movs	r2, #10
 8008536:	4658      	mov	r0, fp
 8008538:	f000 f9bc 	bl	80088b4 <__multadd>
 800853c:	4605      	mov	r5, r0
 800853e:	e7f0      	b.n	8008522 <_dtoa_r+0xaba>
 8008540:	9b00      	ldr	r3, [sp, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfcc      	ite	gt
 8008546:	461e      	movgt	r6, r3
 8008548:	2601      	movle	r6, #1
 800854a:	4456      	add	r6, sl
 800854c:	2700      	movs	r7, #0
 800854e:	4649      	mov	r1, r9
 8008550:	2201      	movs	r2, #1
 8008552:	4658      	mov	r0, fp
 8008554:	f000 fb5a 	bl	8008c0c <__lshift>
 8008558:	4621      	mov	r1, r4
 800855a:	4681      	mov	r9, r0
 800855c:	f000 fbc2 	bl	8008ce4 <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	dcb0      	bgt.n	80084c6 <_dtoa_r+0xa5e>
 8008564:	d102      	bne.n	800856c <_dtoa_r+0xb04>
 8008566:	f018 0f01 	tst.w	r8, #1
 800856a:	d1ac      	bne.n	80084c6 <_dtoa_r+0xa5e>
 800856c:	4633      	mov	r3, r6
 800856e:	461e      	mov	r6, r3
 8008570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008574:	2a30      	cmp	r2, #48	@ 0x30
 8008576:	d0fa      	beq.n	800856e <_dtoa_r+0xb06>
 8008578:	e5c2      	b.n	8008100 <_dtoa_r+0x698>
 800857a:	459a      	cmp	sl, r3
 800857c:	d1a4      	bne.n	80084c8 <_dtoa_r+0xa60>
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	3301      	adds	r3, #1
 8008582:	9304      	str	r3, [sp, #16]
 8008584:	2331      	movs	r3, #49	@ 0x31
 8008586:	f88a 3000 	strb.w	r3, [sl]
 800858a:	e5b9      	b.n	8008100 <_dtoa_r+0x698>
 800858c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800858e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80085ec <_dtoa_r+0xb84>
 8008592:	b11b      	cbz	r3, 800859c <_dtoa_r+0xb34>
 8008594:	f10a 0308 	add.w	r3, sl, #8
 8008598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4650      	mov	r0, sl
 800859e:	b019      	add	sp, #100	@ 0x64
 80085a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	f77f ae37 	ble.w	800821a <_dtoa_r+0x7b2>
 80085ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80085b0:	2001      	movs	r0, #1
 80085b2:	e655      	b.n	8008260 <_dtoa_r+0x7f8>
 80085b4:	9b00      	ldr	r3, [sp, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f77f aed6 	ble.w	8008368 <_dtoa_r+0x900>
 80085bc:	4656      	mov	r6, sl
 80085be:	4621      	mov	r1, r4
 80085c0:	4648      	mov	r0, r9
 80085c2:	f7ff f9c8 	bl	8007956 <quorem>
 80085c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085ca:	f806 8b01 	strb.w	r8, [r6], #1
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	eba6 020a 	sub.w	r2, r6, sl
 80085d4:	4293      	cmp	r3, r2
 80085d6:	ddb3      	ble.n	8008540 <_dtoa_r+0xad8>
 80085d8:	4649      	mov	r1, r9
 80085da:	2300      	movs	r3, #0
 80085dc:	220a      	movs	r2, #10
 80085de:	4658      	mov	r0, fp
 80085e0:	f000 f968 	bl	80088b4 <__multadd>
 80085e4:	4681      	mov	r9, r0
 80085e6:	e7ea      	b.n	80085be <_dtoa_r+0xb56>
 80085e8:	0801089e 	.word	0x0801089e
 80085ec:	08010822 	.word	0x08010822

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d041      	beq.n	800867c <_free_r+0x8c>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f000 f8e8 	bl	80087d8 <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f000 b8e4 	b.w	80087e4 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4408      	add	r0, r1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x22>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	2002496c 	.word	0x2002496c

08008684 <malloc>:
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <malloc+0xc>)
 8008686:	4601      	mov	r1, r0
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f000 b825 	b.w	80086d8 <_malloc_r>
 800868e:	bf00      	nop
 8008690:	20000248 	.word	0x20000248

08008694 <sbrk_aligned>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0f      	ldr	r6, [pc, #60]	@ (80086d4 <sbrk_aligned+0x40>)
 8008698:	460c      	mov	r4, r1
 800869a:	6831      	ldr	r1, [r6, #0]
 800869c:	4605      	mov	r5, r0
 800869e:	b911      	cbnz	r1, 80086a6 <sbrk_aligned+0x12>
 80086a0:	f001 f81c 	bl	80096dc <_sbrk_r>
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f001 f817 	bl	80096dc <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <sbrk_aligned+0x26>
 80086b2:	f04f 34ff 	mov.w	r4, #4294967295
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d0f8      	beq.n	80086b6 <sbrk_aligned+0x22>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f001 f808 	bl	80096dc <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1f2      	bne.n	80086b6 <sbrk_aligned+0x22>
 80086d0:	e7ef      	b.n	80086b2 <sbrk_aligned+0x1e>
 80086d2:	bf00      	nop
 80086d4:	20024968 	.word	0x20024968

080086d8 <_malloc_r>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d904      	bls.n	80086fe <_malloc_r+0x26>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d4 <_malloc_r+0xfc>
 8008702:	f000 f869 	bl	80087d8 <__malloc_lock>
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	461c      	mov	r4, r3
 800870c:	bb44      	cbnz	r4, 8008760 <_malloc_r+0x88>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbf 	bl	8008694 <sbrk_aligned>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	4604      	mov	r4, r0
 800871a:	d158      	bne.n	80087ce <_malloc_r+0xf6>
 800871c:	f8d8 4000 	ldr.w	r4, [r8]
 8008720:	4627      	mov	r7, r4
 8008722:	2f00      	cmp	r7, #0
 8008724:	d143      	bne.n	80087ae <_malloc_r+0xd6>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d04b      	beq.n	80087c2 <_malloc_r+0xea>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	eb04 0903 	add.w	r9, r4, r3
 8008734:	f000 ffd2 	bl	80096dc <_sbrk_r>
 8008738:	4581      	cmp	r9, r0
 800873a:	d142      	bne.n	80087c2 <_malloc_r+0xea>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	1a6d      	subs	r5, r5, r1
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ffa6 	bl	8008694 <sbrk_aligned>
 8008748:	3001      	adds	r0, #1
 800874a:	d03a      	beq.n	80087c2 <_malloc_r+0xea>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	442b      	add	r3, r5
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	bb62      	cbnz	r2, 80087b4 <_malloc_r+0xdc>
 800875a:	f8c8 7000 	str.w	r7, [r8]
 800875e:	e00f      	b.n	8008780 <_malloc_r+0xa8>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	d420      	bmi.n	80087a8 <_malloc_r+0xd0>
 8008766:	2a0b      	cmp	r2, #11
 8008768:	d917      	bls.n	800879a <_malloc_r+0xc2>
 800876a:	1961      	adds	r1, r4, r5
 800876c:	42a3      	cmp	r3, r4
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	6059      	strne	r1, [r3, #4]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	bf08      	it	eq
 8008778:	f8c8 1000 	streq.w	r1, [r8]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f82f 	bl	80087e4 <__malloc_unlock>
 8008786:	f104 000b 	add.w	r0, r4, #11
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	f020 0007 	bic.w	r0, r0, #7
 8008790:	1ac2      	subs	r2, r0, r3
 8008792:	bf1c      	itt	ne
 8008794:	1a1b      	subne	r3, r3, r0
 8008796:	50a3      	strne	r3, [r4, r2]
 8008798:	e7af      	b.n	80086fa <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	f8c8 2000 	streq.w	r2, [r8]
 80087a4:	605a      	strne	r2, [r3, #4]
 80087a6:	e7eb      	b.n	8008780 <_malloc_r+0xa8>
 80087a8:	4623      	mov	r3, r4
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	e7ae      	b.n	800870c <_malloc_r+0x34>
 80087ae:	463c      	mov	r4, r7
 80087b0:	687f      	ldr	r7, [r7, #4]
 80087b2:	e7b6      	b.n	8008722 <_malloc_r+0x4a>
 80087b4:	461a      	mov	r2, r3
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d1fb      	bne.n	80087b4 <_malloc_r+0xdc>
 80087bc:	2300      	movs	r3, #0
 80087be:	6053      	str	r3, [r2, #4]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa8>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f80c 	bl	80087e4 <__malloc_unlock>
 80087cc:	e794      	b.n	80086f8 <_malloc_r+0x20>
 80087ce:	6005      	str	r5, [r0, #0]
 80087d0:	e7d6      	b.n	8008780 <_malloc_r+0xa8>
 80087d2:	bf00      	nop
 80087d4:	2002496c 	.word	0x2002496c

080087d8 <__malloc_lock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__malloc_lock+0x8>)
 80087da:	f7ff b8ac 	b.w	8007936 <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	20024964 	.word	0x20024964

080087e4 <__malloc_unlock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__malloc_unlock+0x8>)
 80087e6:	f7ff b8a7 	b.w	8007938 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	20024964 	.word	0x20024964

080087f0 <_Balloc>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Balloc+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff42 	bl	8008684 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e0      	str	r0, [r4, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Balloc+0x20>
 8008806:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <_Balloc+0x78>)
 8008808:	4818      	ldr	r0, [pc, #96]	@ (800886c <_Balloc+0x7c>)
 800880a:	216b      	movs	r1, #107	@ 0x6b
 800880c:	f000 ff76 	bl	80096fc <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	69e6      	ldr	r6, [r4, #28]
 800881a:	68f3      	ldr	r3, [r6, #12]
 800881c:	b183      	cbz	r3, 8008840 <_Balloc+0x50>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008826:	b9b8      	cbnz	r0, 8008858 <_Balloc+0x68>
 8008828:	2101      	movs	r1, #1
 800882a:	fa01 f605 	lsl.w	r6, r1, r5
 800882e:	1d72      	adds	r2, r6, #5
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	4620      	mov	r0, r4
 8008834:	f000 ff80 	bl	8009738 <_calloc_r>
 8008838:	b160      	cbz	r0, 8008854 <_Balloc+0x64>
 800883a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800883e:	e00e      	b.n	800885e <_Balloc+0x6e>
 8008840:	2221      	movs	r2, #33	@ 0x21
 8008842:	2104      	movs	r1, #4
 8008844:	4620      	mov	r0, r4
 8008846:	f000 ff77 	bl	8009738 <_calloc_r>
 800884a:	69e3      	ldr	r3, [r4, #28]
 800884c:	60f0      	str	r0, [r6, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e4      	bne.n	800881e <_Balloc+0x2e>
 8008854:	2000      	movs	r0, #0
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	6802      	ldr	r2, [r0, #0]
 800885a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800885e:	2300      	movs	r3, #0
 8008860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008864:	e7f7      	b.n	8008856 <_Balloc+0x66>
 8008866:	bf00      	nop
 8008868:	0801082f 	.word	0x0801082f
 800886c:	080108af 	.word	0x080108af

08008870 <_Bfree>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	69c6      	ldr	r6, [r0, #28]
 8008874:	4605      	mov	r5, r0
 8008876:	460c      	mov	r4, r1
 8008878:	b976      	cbnz	r6, 8008898 <_Bfree+0x28>
 800887a:	2010      	movs	r0, #16
 800887c:	f7ff ff02 	bl	8008684 <malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	61e8      	str	r0, [r5, #28]
 8008884:	b920      	cbnz	r0, 8008890 <_Bfree+0x20>
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <_Bfree+0x3c>)
 8008888:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <_Bfree+0x40>)
 800888a:	218f      	movs	r1, #143	@ 0x8f
 800888c:	f000 ff36 	bl	80096fc <__assert_func>
 8008890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008894:	6006      	str	r6, [r0, #0]
 8008896:	60c6      	str	r6, [r0, #12]
 8008898:	b13c      	cbz	r4, 80088aa <_Bfree+0x3a>
 800889a:	69eb      	ldr	r3, [r5, #28]
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a4:	6021      	str	r1, [r4, #0]
 80088a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	0801082f 	.word	0x0801082f
 80088b0:	080108af 	.word	0x080108af

080088b4 <__multadd>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	690d      	ldr	r5, [r1, #16]
 80088ba:	4607      	mov	r7, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	461e      	mov	r6, r3
 80088c0:	f101 0c14 	add.w	ip, r1, #20
 80088c4:	2000      	movs	r0, #0
 80088c6:	f8dc 3000 	ldr.w	r3, [ip]
 80088ca:	b299      	uxth	r1, r3
 80088cc:	fb02 6101 	mla	r1, r2, r1, r6
 80088d0:	0c1e      	lsrs	r6, r3, #16
 80088d2:	0c0b      	lsrs	r3, r1, #16
 80088d4:	fb02 3306 	mla	r3, r2, r6, r3
 80088d8:	b289      	uxth	r1, r1
 80088da:	3001      	adds	r0, #1
 80088dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088e0:	4285      	cmp	r5, r0
 80088e2:	f84c 1b04 	str.w	r1, [ip], #4
 80088e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ea:	dcec      	bgt.n	80088c6 <__multadd+0x12>
 80088ec:	b30e      	cbz	r6, 8008932 <__multadd+0x7e>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc19      	bgt.n	8008928 <__multadd+0x74>
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	4638      	mov	r0, r7
 80088f8:	3101      	adds	r1, #1
 80088fa:	f7ff ff79 	bl	80087f0 <_Balloc>
 80088fe:	4680      	mov	r8, r0
 8008900:	b928      	cbnz	r0, 800890e <__multadd+0x5a>
 8008902:	4602      	mov	r2, r0
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <__multadd+0x84>)
 8008906:	480d      	ldr	r0, [pc, #52]	@ (800893c <__multadd+0x88>)
 8008908:	21ba      	movs	r1, #186	@ 0xba
 800890a:	f000 fef7 	bl	80096fc <__assert_func>
 800890e:	6922      	ldr	r2, [r4, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	f104 010c 	add.w	r1, r4, #12
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	300c      	adds	r0, #12
 800891a:	f7ff f80e 	bl	800793a <memcpy>
 800891e:	4621      	mov	r1, r4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ffa5 	bl	8008870 <_Bfree>
 8008926:	4644      	mov	r4, r8
 8008928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800892c:	3501      	adds	r5, #1
 800892e:	615e      	str	r6, [r3, #20]
 8008930:	6125      	str	r5, [r4, #16]
 8008932:	4620      	mov	r0, r4
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	0801089e 	.word	0x0801089e
 800893c:	080108af 	.word	0x080108af

08008940 <__hi0bits>:
 8008940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008944:	4603      	mov	r3, r0
 8008946:	bf36      	itet	cc
 8008948:	0403      	lslcc	r3, r0, #16
 800894a:	2000      	movcs	r0, #0
 800894c:	2010      	movcc	r0, #16
 800894e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008952:	bf3c      	itt	cc
 8008954:	021b      	lslcc	r3, r3, #8
 8008956:	3008      	addcc	r0, #8
 8008958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800895c:	bf3c      	itt	cc
 800895e:	011b      	lslcc	r3, r3, #4
 8008960:	3004      	addcc	r0, #4
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008966:	bf3c      	itt	cc
 8008968:	009b      	lslcc	r3, r3, #2
 800896a:	3002      	addcc	r0, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	db05      	blt.n	800897c <__hi0bits+0x3c>
 8008970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008974:	f100 0001 	add.w	r0, r0, #1
 8008978:	bf08      	it	eq
 800897a:	2020      	moveq	r0, #32
 800897c:	4770      	bx	lr

0800897e <__lo0bits>:
 800897e:	6803      	ldr	r3, [r0, #0]
 8008980:	4602      	mov	r2, r0
 8008982:	f013 0007 	ands.w	r0, r3, #7
 8008986:	d00b      	beq.n	80089a0 <__lo0bits+0x22>
 8008988:	07d9      	lsls	r1, r3, #31
 800898a:	d421      	bmi.n	80089d0 <__lo0bits+0x52>
 800898c:	0798      	lsls	r0, r3, #30
 800898e:	bf49      	itett	mi
 8008990:	085b      	lsrmi	r3, r3, #1
 8008992:	089b      	lsrpl	r3, r3, #2
 8008994:	2001      	movmi	r0, #1
 8008996:	6013      	strmi	r3, [r2, #0]
 8008998:	bf5c      	itt	pl
 800899a:	6013      	strpl	r3, [r2, #0]
 800899c:	2002      	movpl	r0, #2
 800899e:	4770      	bx	lr
 80089a0:	b299      	uxth	r1, r3
 80089a2:	b909      	cbnz	r1, 80089a8 <__lo0bits+0x2a>
 80089a4:	0c1b      	lsrs	r3, r3, #16
 80089a6:	2010      	movs	r0, #16
 80089a8:	b2d9      	uxtb	r1, r3
 80089aa:	b909      	cbnz	r1, 80089b0 <__lo0bits+0x32>
 80089ac:	3008      	adds	r0, #8
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	0719      	lsls	r1, r3, #28
 80089b2:	bf04      	itt	eq
 80089b4:	091b      	lsreq	r3, r3, #4
 80089b6:	3004      	addeq	r0, #4
 80089b8:	0799      	lsls	r1, r3, #30
 80089ba:	bf04      	itt	eq
 80089bc:	089b      	lsreq	r3, r3, #2
 80089be:	3002      	addeq	r0, #2
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d403      	bmi.n	80089cc <__lo0bits+0x4e>
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	f100 0001 	add.w	r0, r0, #1
 80089ca:	d003      	beq.n	80089d4 <__lo0bits+0x56>
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4770      	bx	lr
 80089d0:	2000      	movs	r0, #0
 80089d2:	4770      	bx	lr
 80089d4:	2020      	movs	r0, #32
 80089d6:	4770      	bx	lr

080089d8 <__i2b>:
 80089d8:	b510      	push	{r4, lr}
 80089da:	460c      	mov	r4, r1
 80089dc:	2101      	movs	r1, #1
 80089de:	f7ff ff07 	bl	80087f0 <_Balloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	b928      	cbnz	r0, 80089f2 <__i2b+0x1a>
 80089e6:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <__i2b+0x24>)
 80089e8:	4805      	ldr	r0, [pc, #20]	@ (8008a00 <__i2b+0x28>)
 80089ea:	f240 1145 	movw	r1, #325	@ 0x145
 80089ee:	f000 fe85 	bl	80096fc <__assert_func>
 80089f2:	2301      	movs	r3, #1
 80089f4:	6144      	str	r4, [r0, #20]
 80089f6:	6103      	str	r3, [r0, #16]
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	0801089e 	.word	0x0801089e
 8008a00:	080108af 	.word	0x080108af

08008a04 <__multiply>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	4614      	mov	r4, r2
 8008a0a:	690a      	ldr	r2, [r1, #16]
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	bfa8      	it	ge
 8008a12:	4623      	movge	r3, r4
 8008a14:	460f      	mov	r7, r1
 8008a16:	bfa4      	itt	ge
 8008a18:	460c      	movge	r4, r1
 8008a1a:	461f      	movge	r7, r3
 8008a1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a24:	68a3      	ldr	r3, [r4, #8]
 8008a26:	6861      	ldr	r1, [r4, #4]
 8008a28:	eb0a 0609 	add.w	r6, sl, r9
 8008a2c:	42b3      	cmp	r3, r6
 8008a2e:	b085      	sub	sp, #20
 8008a30:	bfb8      	it	lt
 8008a32:	3101      	addlt	r1, #1
 8008a34:	f7ff fedc 	bl	80087f0 <_Balloc>
 8008a38:	b930      	cbnz	r0, 8008a48 <__multiply+0x44>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b44      	ldr	r3, [pc, #272]	@ (8008b50 <__multiply+0x14c>)
 8008a3e:	4845      	ldr	r0, [pc, #276]	@ (8008b54 <__multiply+0x150>)
 8008a40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a44:	f000 fe5a 	bl	80096fc <__assert_func>
 8008a48:	f100 0514 	add.w	r5, r0, #20
 8008a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a50:	462b      	mov	r3, r5
 8008a52:	2200      	movs	r2, #0
 8008a54:	4543      	cmp	r3, r8
 8008a56:	d321      	bcc.n	8008a9c <__multiply+0x98>
 8008a58:	f107 0114 	add.w	r1, r7, #20
 8008a5c:	f104 0214 	add.w	r2, r4, #20
 8008a60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a68:	9302      	str	r3, [sp, #8]
 8008a6a:	1b13      	subs	r3, r2, r4
 8008a6c:	3b15      	subs	r3, #21
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	3304      	adds	r3, #4
 8008a74:	f104 0715 	add.w	r7, r4, #21
 8008a78:	42ba      	cmp	r2, r7
 8008a7a:	bf38      	it	cc
 8008a7c:	2304      	movcc	r3, #4
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	9103      	str	r1, [sp, #12]
 8008a84:	428b      	cmp	r3, r1
 8008a86:	d80c      	bhi.n	8008aa2 <__multiply+0x9e>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	dd03      	ble.n	8008a94 <__multiply+0x90>
 8008a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d05b      	beq.n	8008b4c <__multiply+0x148>
 8008a94:	6106      	str	r6, [r0, #16]
 8008a96:	b005      	add	sp, #20
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	f843 2b04 	str.w	r2, [r3], #4
 8008aa0:	e7d8      	b.n	8008a54 <__multiply+0x50>
 8008aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008aa6:	f1ba 0f00 	cmp.w	sl, #0
 8008aaa:	d024      	beq.n	8008af6 <__multiply+0xf2>
 8008aac:	f104 0e14 	add.w	lr, r4, #20
 8008ab0:	46a9      	mov	r9, r5
 8008ab2:	f04f 0c00 	mov.w	ip, #0
 8008ab6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aba:	f8d9 3000 	ldr.w	r3, [r9]
 8008abe:	fa1f fb87 	uxth.w	fp, r7
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ac8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008acc:	f8d9 7000 	ldr.w	r7, [r9]
 8008ad0:	4463      	add	r3, ip
 8008ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ad6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ada:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ae4:	4572      	cmp	r2, lr
 8008ae6:	f849 3b04 	str.w	r3, [r9], #4
 8008aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008aee:	d8e2      	bhi.n	8008ab6 <__multiply+0xb2>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f845 c003 	str.w	ip, [r5, r3]
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008afc:	3104      	adds	r1, #4
 8008afe:	f1b9 0f00 	cmp.w	r9, #0
 8008b02:	d021      	beq.n	8008b48 <__multiply+0x144>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	f104 0c14 	add.w	ip, r4, #20
 8008b0a:	46ae      	mov	lr, r5
 8008b0c:	f04f 0a00 	mov.w	sl, #0
 8008b10:	f8bc b000 	ldrh.w	fp, [ip]
 8008b14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b18:	fb09 770b 	mla	r7, r9, fp, r7
 8008b1c:	4457      	add	r7, sl
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b24:	f84e 3b04 	str.w	r3, [lr], #4
 8008b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b30:	f8be 3000 	ldrh.w	r3, [lr]
 8008b34:	fb09 330a 	mla	r3, r9, sl, r3
 8008b38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b3c:	4562      	cmp	r2, ip
 8008b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b42:	d8e5      	bhi.n	8008b10 <__multiply+0x10c>
 8008b44:	9f01      	ldr	r7, [sp, #4]
 8008b46:	51eb      	str	r3, [r5, r7]
 8008b48:	3504      	adds	r5, #4
 8008b4a:	e799      	b.n	8008a80 <__multiply+0x7c>
 8008b4c:	3e01      	subs	r6, #1
 8008b4e:	e79b      	b.n	8008a88 <__multiply+0x84>
 8008b50:	0801089e 	.word	0x0801089e
 8008b54:	080108af 	.word	0x080108af

08008b58 <__pow5mult>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	f012 0203 	ands.w	r2, r2, #3
 8008b62:	4607      	mov	r7, r0
 8008b64:	460e      	mov	r6, r1
 8008b66:	d007      	beq.n	8008b78 <__pow5mult+0x20>
 8008b68:	4c25      	ldr	r4, [pc, #148]	@ (8008c00 <__pow5mult+0xa8>)
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b72:	f7ff fe9f 	bl	80088b4 <__multadd>
 8008b76:	4606      	mov	r6, r0
 8008b78:	10ad      	asrs	r5, r5, #2
 8008b7a:	d03d      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008b7c:	69fc      	ldr	r4, [r7, #28]
 8008b7e:	b97c      	cbnz	r4, 8008ba0 <__pow5mult+0x48>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f7ff fd7f 	bl	8008684 <malloc>
 8008b86:	4602      	mov	r2, r0
 8008b88:	61f8      	str	r0, [r7, #28]
 8008b8a:	b928      	cbnz	r0, 8008b98 <__pow5mult+0x40>
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008c04 <__pow5mult+0xac>)
 8008b8e:	481e      	ldr	r0, [pc, #120]	@ (8008c08 <__pow5mult+0xb0>)
 8008b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b94:	f000 fdb2 	bl	80096fc <__assert_func>
 8008b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b9c:	6004      	str	r4, [r0, #0]
 8008b9e:	60c4      	str	r4, [r0, #12]
 8008ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ba8:	b94c      	cbnz	r4, 8008bbe <__pow5mult+0x66>
 8008baa:	f240 2171 	movw	r1, #625	@ 0x271
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7ff ff12 	bl	80089d8 <__i2b>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bba:	4604      	mov	r4, r0
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	f04f 0900 	mov.w	r9, #0
 8008bc2:	07eb      	lsls	r3, r5, #31
 8008bc4:	d50a      	bpl.n	8008bdc <__pow5mult+0x84>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4638      	mov	r0, r7
 8008bcc:	f7ff ff1a 	bl	8008a04 <__multiply>
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff fe4b 	bl	8008870 <_Bfree>
 8008bda:	4646      	mov	r6, r8
 8008bdc:	106d      	asrs	r5, r5, #1
 8008bde:	d00b      	beq.n	8008bf8 <__pow5mult+0xa0>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	b938      	cbnz	r0, 8008bf4 <__pow5mult+0x9c>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4621      	mov	r1, r4
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ff0b 	bl	8008a04 <__multiply>
 8008bee:	6020      	str	r0, [r4, #0]
 8008bf0:	f8c0 9000 	str.w	r9, [r0]
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	e7e4      	b.n	8008bc2 <__pow5mult+0x6a>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	bf00      	nop
 8008c00:	08010908 	.word	0x08010908
 8008c04:	0801082f 	.word	0x0801082f
 8008c08:	080108af 	.word	0x080108af

08008c0c <__lshift>:
 8008c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	460c      	mov	r4, r1
 8008c12:	6849      	ldr	r1, [r1, #4]
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c1a:	68a3      	ldr	r3, [r4, #8]
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	4691      	mov	r9, r2
 8008c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c24:	f108 0601 	add.w	r6, r8, #1
 8008c28:	42b3      	cmp	r3, r6
 8008c2a:	db0b      	blt.n	8008c44 <__lshift+0x38>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f7ff fddf 	bl	80087f0 <_Balloc>
 8008c32:	4605      	mov	r5, r0
 8008c34:	b948      	cbnz	r0, 8008c4a <__lshift+0x3e>
 8008c36:	4602      	mov	r2, r0
 8008c38:	4b28      	ldr	r3, [pc, #160]	@ (8008cdc <__lshift+0xd0>)
 8008c3a:	4829      	ldr	r0, [pc, #164]	@ (8008ce0 <__lshift+0xd4>)
 8008c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c40:	f000 fd5c 	bl	80096fc <__assert_func>
 8008c44:	3101      	adds	r1, #1
 8008c46:	005b      	lsls	r3, r3, #1
 8008c48:	e7ee      	b.n	8008c28 <__lshift+0x1c>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f100 0114 	add.w	r1, r0, #20
 8008c50:	f100 0210 	add.w	r2, r0, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	4553      	cmp	r3, sl
 8008c58:	db33      	blt.n	8008cc2 <__lshift+0xb6>
 8008c5a:	6920      	ldr	r0, [r4, #16]
 8008c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c60:	f104 0314 	add.w	r3, r4, #20
 8008c64:	f019 091f 	ands.w	r9, r9, #31
 8008c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c70:	d02b      	beq.n	8008cca <__lshift+0xbe>
 8008c72:	f1c9 0e20 	rsb	lr, r9, #32
 8008c76:	468a      	mov	sl, r1
 8008c78:	2200      	movs	r2, #0
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8008c80:	4310      	orrs	r0, r2
 8008c82:	f84a 0b04 	str.w	r0, [sl], #4
 8008c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8a:	459c      	cmp	ip, r3
 8008c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c90:	d8f3      	bhi.n	8008c7a <__lshift+0x6e>
 8008c92:	ebac 0304 	sub.w	r3, ip, r4
 8008c96:	3b15      	subs	r3, #21
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	f104 0015 	add.w	r0, r4, #21
 8008ca2:	4584      	cmp	ip, r0
 8008ca4:	bf38      	it	cc
 8008ca6:	2304      	movcc	r3, #4
 8008ca8:	50ca      	str	r2, [r1, r3]
 8008caa:	b10a      	cbz	r2, 8008cb0 <__lshift+0xa4>
 8008cac:	f108 0602 	add.w	r6, r8, #2
 8008cb0:	3e01      	subs	r6, #1
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	612e      	str	r6, [r5, #16]
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	f7ff fdda 	bl	8008870 <_Bfree>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	e7c5      	b.n	8008c56 <__lshift+0x4a>
 8008cca:	3904      	subs	r1, #4
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cd4:	459c      	cmp	ip, r3
 8008cd6:	d8f9      	bhi.n	8008ccc <__lshift+0xc0>
 8008cd8:	e7ea      	b.n	8008cb0 <__lshift+0xa4>
 8008cda:	bf00      	nop
 8008cdc:	0801089e 	.word	0x0801089e
 8008ce0:	080108af 	.word	0x080108af

08008ce4 <__mcmp>:
 8008ce4:	690a      	ldr	r2, [r1, #16]
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6900      	ldr	r0, [r0, #16]
 8008cea:	1a80      	subs	r0, r0, r2
 8008cec:	b530      	push	{r4, r5, lr}
 8008cee:	d10e      	bne.n	8008d0e <__mcmp+0x2a>
 8008cf0:	3314      	adds	r3, #20
 8008cf2:	3114      	adds	r1, #20
 8008cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d04:	4295      	cmp	r5, r2
 8008d06:	d003      	beq.n	8008d10 <__mcmp+0x2c>
 8008d08:	d205      	bcs.n	8008d16 <__mcmp+0x32>
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	bd30      	pop	{r4, r5, pc}
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d3f3      	bcc.n	8008cfc <__mcmp+0x18>
 8008d14:	e7fb      	b.n	8008d0e <__mcmp+0x2a>
 8008d16:	2001      	movs	r0, #1
 8008d18:	e7f9      	b.n	8008d0e <__mcmp+0x2a>
	...

08008d1c <__mdiff>:
 8008d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	4689      	mov	r9, r1
 8008d22:	4606      	mov	r6, r0
 8008d24:	4611      	mov	r1, r2
 8008d26:	4648      	mov	r0, r9
 8008d28:	4614      	mov	r4, r2
 8008d2a:	f7ff ffdb 	bl	8008ce4 <__mcmp>
 8008d2e:	1e05      	subs	r5, r0, #0
 8008d30:	d112      	bne.n	8008d58 <__mdiff+0x3c>
 8008d32:	4629      	mov	r1, r5
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff fd5b 	bl	80087f0 <_Balloc>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	b928      	cbnz	r0, 8008d4a <__mdiff+0x2e>
 8008d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e3c <__mdiff+0x120>)
 8008d40:	f240 2137 	movw	r1, #567	@ 0x237
 8008d44:	483e      	ldr	r0, [pc, #248]	@ (8008e40 <__mdiff+0x124>)
 8008d46:	f000 fcd9 	bl	80096fc <__assert_func>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d50:	4610      	mov	r0, r2
 8008d52:	b003      	add	sp, #12
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	bfbc      	itt	lt
 8008d5a:	464b      	movlt	r3, r9
 8008d5c:	46a1      	movlt	r9, r4
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d64:	bfba      	itte	lt
 8008d66:	461c      	movlt	r4, r3
 8008d68:	2501      	movlt	r5, #1
 8008d6a:	2500      	movge	r5, #0
 8008d6c:	f7ff fd40 	bl	80087f0 <_Balloc>
 8008d70:	4602      	mov	r2, r0
 8008d72:	b918      	cbnz	r0, 8008d7c <__mdiff+0x60>
 8008d74:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <__mdiff+0x120>)
 8008d76:	f240 2145 	movw	r1, #581	@ 0x245
 8008d7a:	e7e3      	b.n	8008d44 <__mdiff+0x28>
 8008d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008d80:	6926      	ldr	r6, [r4, #16]
 8008d82:	60c5      	str	r5, [r0, #12]
 8008d84:	f109 0310 	add.w	r3, r9, #16
 8008d88:	f109 0514 	add.w	r5, r9, #20
 8008d8c:	f104 0e14 	add.w	lr, r4, #20
 8008d90:	f100 0b14 	add.w	fp, r0, #20
 8008d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	46d9      	mov	r9, fp
 8008da0:	f04f 0c00 	mov.w	ip, #0
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	fa1f f38a 	uxth.w	r3, sl
 8008db4:	4619      	mov	r1, r3
 8008db6:	b283      	uxth	r3, r0
 8008db8:	1acb      	subs	r3, r1, r3
 8008dba:	0c00      	lsrs	r0, r0, #16
 8008dbc:	4463      	add	r3, ip
 8008dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008dcc:	4576      	cmp	r6, lr
 8008dce:	f849 3b04 	str.w	r3, [r9], #4
 8008dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dd6:	d8e5      	bhi.n	8008da4 <__mdiff+0x88>
 8008dd8:	1b33      	subs	r3, r6, r4
 8008dda:	3b15      	subs	r3, #21
 8008ddc:	f023 0303 	bic.w	r3, r3, #3
 8008de0:	3415      	adds	r4, #21
 8008de2:	3304      	adds	r3, #4
 8008de4:	42a6      	cmp	r6, r4
 8008de6:	bf38      	it	cc
 8008de8:	2304      	movcc	r3, #4
 8008dea:	441d      	add	r5, r3
 8008dec:	445b      	add	r3, fp
 8008dee:	461e      	mov	r6, r3
 8008df0:	462c      	mov	r4, r5
 8008df2:	4544      	cmp	r4, r8
 8008df4:	d30e      	bcc.n	8008e14 <__mdiff+0xf8>
 8008df6:	f108 0103 	add.w	r1, r8, #3
 8008dfa:	1b49      	subs	r1, r1, r5
 8008dfc:	f021 0103 	bic.w	r1, r1, #3
 8008e00:	3d03      	subs	r5, #3
 8008e02:	45a8      	cmp	r8, r5
 8008e04:	bf38      	it	cc
 8008e06:	2100      	movcc	r1, #0
 8008e08:	440b      	add	r3, r1
 8008e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e0e:	b191      	cbz	r1, 8008e36 <__mdiff+0x11a>
 8008e10:	6117      	str	r7, [r2, #16]
 8008e12:	e79d      	b.n	8008d50 <__mdiff+0x34>
 8008e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e18:	46e6      	mov	lr, ip
 8008e1a:	0c08      	lsrs	r0, r1, #16
 8008e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e20:	4471      	add	r1, lr
 8008e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e26:	b289      	uxth	r1, r1
 8008e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e2c:	f846 1b04 	str.w	r1, [r6], #4
 8008e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e34:	e7dd      	b.n	8008df2 <__mdiff+0xd6>
 8008e36:	3f01      	subs	r7, #1
 8008e38:	e7e7      	b.n	8008e0a <__mdiff+0xee>
 8008e3a:	bf00      	nop
 8008e3c:	0801089e 	.word	0x0801089e
 8008e40:	080108af 	.word	0x080108af

08008e44 <__d2b>:
 8008e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	460f      	mov	r7, r1
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	ec59 8b10 	vmov	r8, r9, d0
 8008e50:	4616      	mov	r6, r2
 8008e52:	f7ff fccd 	bl	80087f0 <_Balloc>
 8008e56:	4604      	mov	r4, r0
 8008e58:	b930      	cbnz	r0, 8008e68 <__d2b+0x24>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b23      	ldr	r3, [pc, #140]	@ (8008eec <__d2b+0xa8>)
 8008e5e:	4824      	ldr	r0, [pc, #144]	@ (8008ef0 <__d2b+0xac>)
 8008e60:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e64:	f000 fc4a 	bl	80096fc <__assert_func>
 8008e68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e70:	b10d      	cbz	r5, 8008e76 <__d2b+0x32>
 8008e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	f1b8 0300 	subs.w	r3, r8, #0
 8008e7c:	d023      	beq.n	8008ec6 <__d2b+0x82>
 8008e7e:	4668      	mov	r0, sp
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	f7ff fd7c 	bl	800897e <__lo0bits>
 8008e86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e8a:	b1d0      	cbz	r0, 8008ec2 <__d2b+0x7e>
 8008e8c:	f1c0 0320 	rsb	r3, r0, #32
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	430b      	orrs	r3, r1
 8008e96:	40c2      	lsrs	r2, r0
 8008e98:	6163      	str	r3, [r4, #20]
 8008e9a:	9201      	str	r2, [sp, #4]
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	61a3      	str	r3, [r4, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf0c      	ite	eq
 8008ea4:	2201      	moveq	r2, #1
 8008ea6:	2202      	movne	r2, #2
 8008ea8:	6122      	str	r2, [r4, #16]
 8008eaa:	b1a5      	cbz	r5, 8008ed6 <__d2b+0x92>
 8008eac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008eb0:	4405      	add	r5, r0
 8008eb2:	603d      	str	r5, [r7, #0]
 8008eb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008eb8:	6030      	str	r0, [r6, #0]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	6161      	str	r1, [r4, #20]
 8008ec4:	e7ea      	b.n	8008e9c <__d2b+0x58>
 8008ec6:	a801      	add	r0, sp, #4
 8008ec8:	f7ff fd59 	bl	800897e <__lo0bits>
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	6163      	str	r3, [r4, #20]
 8008ed0:	3020      	adds	r0, #32
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	e7e8      	b.n	8008ea8 <__d2b+0x64>
 8008ed6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ede:	6038      	str	r0, [r7, #0]
 8008ee0:	6918      	ldr	r0, [r3, #16]
 8008ee2:	f7ff fd2d 	bl	8008940 <__hi0bits>
 8008ee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eea:	e7e5      	b.n	8008eb8 <__d2b+0x74>
 8008eec:	0801089e 	.word	0x0801089e
 8008ef0:	080108af 	.word	0x080108af

08008ef4 <__ssputs_r>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	688e      	ldr	r6, [r1, #8]
 8008efa:	461f      	mov	r7, r3
 8008efc:	42be      	cmp	r6, r7
 8008efe:	680b      	ldr	r3, [r1, #0]
 8008f00:	4682      	mov	sl, r0
 8008f02:	460c      	mov	r4, r1
 8008f04:	4690      	mov	r8, r2
 8008f06:	d82d      	bhi.n	8008f64 <__ssputs_r+0x70>
 8008f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f10:	d026      	beq.n	8008f60 <__ssputs_r+0x6c>
 8008f12:	6965      	ldr	r5, [r4, #20]
 8008f14:	6909      	ldr	r1, [r1, #16]
 8008f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f1a:	eba3 0901 	sub.w	r9, r3, r1
 8008f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f22:	1c7b      	adds	r3, r7, #1
 8008f24:	444b      	add	r3, r9
 8008f26:	106d      	asrs	r5, r5, #1
 8008f28:	429d      	cmp	r5, r3
 8008f2a:	bf38      	it	cc
 8008f2c:	461d      	movcc	r5, r3
 8008f2e:	0553      	lsls	r3, r2, #21
 8008f30:	d527      	bpl.n	8008f82 <__ssputs_r+0x8e>
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7ff fbd0 	bl	80086d8 <_malloc_r>
 8008f38:	4606      	mov	r6, r0
 8008f3a:	b360      	cbz	r0, 8008f96 <__ssputs_r+0xa2>
 8008f3c:	6921      	ldr	r1, [r4, #16]
 8008f3e:	464a      	mov	r2, r9
 8008f40:	f7fe fcfb 	bl	800793a <memcpy>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	6126      	str	r6, [r4, #16]
 8008f52:	6165      	str	r5, [r4, #20]
 8008f54:	444e      	add	r6, r9
 8008f56:	eba5 0509 	sub.w	r5, r5, r9
 8008f5a:	6026      	str	r6, [r4, #0]
 8008f5c:	60a5      	str	r5, [r4, #8]
 8008f5e:	463e      	mov	r6, r7
 8008f60:	42be      	cmp	r6, r7
 8008f62:	d900      	bls.n	8008f66 <__ssputs_r+0x72>
 8008f64:	463e      	mov	r6, r7
 8008f66:	6820      	ldr	r0, [r4, #0]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	f000 fb9c 	bl	80096a8 <memmove>
 8008f70:	68a3      	ldr	r3, [r4, #8]
 8008f72:	1b9b      	subs	r3, r3, r6
 8008f74:	60a3      	str	r3, [r4, #8]
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	4433      	add	r3, r6
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	462a      	mov	r2, r5
 8008f84:	f000 fbfe 	bl	8009784 <_realloc_r>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1e0      	bne.n	8008f50 <__ssputs_r+0x5c>
 8008f8e:	6921      	ldr	r1, [r4, #16]
 8008f90:	4650      	mov	r0, sl
 8008f92:	f7ff fb2d 	bl	80085f0 <_free_r>
 8008f96:	230c      	movs	r3, #12
 8008f98:	f8ca 3000 	str.w	r3, [sl]
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e7e9      	b.n	8008f7e <__ssputs_r+0x8a>
	...

08008fac <_svfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	4698      	mov	r8, r3
 8008fb2:	898b      	ldrh	r3, [r1, #12]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	b09d      	sub	sp, #116	@ 0x74
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	d510      	bpl.n	8008fe2 <_svfiprintf_r+0x36>
 8008fc0:	690b      	ldr	r3, [r1, #16]
 8008fc2:	b973      	cbnz	r3, 8008fe2 <_svfiprintf_r+0x36>
 8008fc4:	2140      	movs	r1, #64	@ 0x40
 8008fc6:	f7ff fb87 	bl	80086d8 <_malloc_r>
 8008fca:	6028      	str	r0, [r5, #0]
 8008fcc:	6128      	str	r0, [r5, #16]
 8008fce:	b930      	cbnz	r0, 8008fde <_svfiprintf_r+0x32>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	b01d      	add	sp, #116	@ 0x74
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	2340      	movs	r3, #64	@ 0x40
 8008fe0:	616b      	str	r3, [r5, #20]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff0:	2330      	movs	r3, #48	@ 0x30
 8008ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009190 <_svfiprintf_r+0x1e4>
 8008ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ffa:	f04f 0901 	mov.w	r9, #1
 8008ffe:	4623      	mov	r3, r4
 8009000:	469a      	mov	sl, r3
 8009002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009006:	b10a      	cbz	r2, 800900c <_svfiprintf_r+0x60>
 8009008:	2a25      	cmp	r2, #37	@ 0x25
 800900a:	d1f9      	bne.n	8009000 <_svfiprintf_r+0x54>
 800900c:	ebba 0b04 	subs.w	fp, sl, r4
 8009010:	d00b      	beq.n	800902a <_svfiprintf_r+0x7e>
 8009012:	465b      	mov	r3, fp
 8009014:	4622      	mov	r2, r4
 8009016:	4629      	mov	r1, r5
 8009018:	4638      	mov	r0, r7
 800901a:	f7ff ff6b 	bl	8008ef4 <__ssputs_r>
 800901e:	3001      	adds	r0, #1
 8009020:	f000 80a7 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009026:	445a      	add	r2, fp
 8009028:	9209      	str	r2, [sp, #36]	@ 0x24
 800902a:	f89a 3000 	ldrb.w	r3, [sl]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 809f 	beq.w	8009172 <_svfiprintf_r+0x1c6>
 8009034:	2300      	movs	r3, #0
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903e:	f10a 0a01 	add.w	sl, sl, #1
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800904a:	931a      	str	r3, [sp, #104]	@ 0x68
 800904c:	4654      	mov	r4, sl
 800904e:	2205      	movs	r2, #5
 8009050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009054:	484e      	ldr	r0, [pc, #312]	@ (8009190 <_svfiprintf_r+0x1e4>)
 8009056:	f7f7 f8db 	bl	8000210 <memchr>
 800905a:	9a04      	ldr	r2, [sp, #16]
 800905c:	b9d8      	cbnz	r0, 8009096 <_svfiprintf_r+0xea>
 800905e:	06d0      	lsls	r0, r2, #27
 8009060:	bf44      	itt	mi
 8009062:	2320      	movmi	r3, #32
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	0711      	lsls	r1, r2, #28
 800906a:	bf44      	itt	mi
 800906c:	232b      	movmi	r3, #43	@ 0x2b
 800906e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009072:	f89a 3000 	ldrb.w	r3, [sl]
 8009076:	2b2a      	cmp	r3, #42	@ 0x2a
 8009078:	d015      	beq.n	80090a6 <_svfiprintf_r+0xfa>
 800907a:	9a07      	ldr	r2, [sp, #28]
 800907c:	4654      	mov	r4, sl
 800907e:	2000      	movs	r0, #0
 8009080:	f04f 0c0a 	mov.w	ip, #10
 8009084:	4621      	mov	r1, r4
 8009086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908a:	3b30      	subs	r3, #48	@ 0x30
 800908c:	2b09      	cmp	r3, #9
 800908e:	d94b      	bls.n	8009128 <_svfiprintf_r+0x17c>
 8009090:	b1b0      	cbz	r0, 80090c0 <_svfiprintf_r+0x114>
 8009092:	9207      	str	r2, [sp, #28]
 8009094:	e014      	b.n	80090c0 <_svfiprintf_r+0x114>
 8009096:	eba0 0308 	sub.w	r3, r0, r8
 800909a:	fa09 f303 	lsl.w	r3, r9, r3
 800909e:	4313      	orrs	r3, r2
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	46a2      	mov	sl, r4
 80090a4:	e7d2      	b.n	800904c <_svfiprintf_r+0xa0>
 80090a6:	9b03      	ldr	r3, [sp, #12]
 80090a8:	1d19      	adds	r1, r3, #4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	9103      	str	r1, [sp, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bfbb      	ittet	lt
 80090b2:	425b      	neglt	r3, r3
 80090b4:	f042 0202 	orrlt.w	r2, r2, #2
 80090b8:	9307      	strge	r3, [sp, #28]
 80090ba:	9307      	strlt	r3, [sp, #28]
 80090bc:	bfb8      	it	lt
 80090be:	9204      	strlt	r2, [sp, #16]
 80090c0:	7823      	ldrb	r3, [r4, #0]
 80090c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090c4:	d10a      	bne.n	80090dc <_svfiprintf_r+0x130>
 80090c6:	7863      	ldrb	r3, [r4, #1]
 80090c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ca:	d132      	bne.n	8009132 <_svfiprintf_r+0x186>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	9203      	str	r2, [sp, #12]
 80090d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d8:	3402      	adds	r4, #2
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091a0 <_svfiprintf_r+0x1f4>
 80090e0:	7821      	ldrb	r1, [r4, #0]
 80090e2:	2203      	movs	r2, #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	f7f7 f893 	bl	8000210 <memchr>
 80090ea:	b138      	cbz	r0, 80090fc <_svfiprintf_r+0x150>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	eba0 000a 	sub.w	r0, r0, sl
 80090f2:	2240      	movs	r2, #64	@ 0x40
 80090f4:	4082      	lsls	r2, r0
 80090f6:	4313      	orrs	r3, r2
 80090f8:	3401      	adds	r4, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	4824      	ldr	r0, [pc, #144]	@ (8009194 <_svfiprintf_r+0x1e8>)
 8009102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009106:	2206      	movs	r2, #6
 8009108:	f7f7 f882 	bl	8000210 <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d036      	beq.n	800917e <_svfiprintf_r+0x1d2>
 8009110:	4b21      	ldr	r3, [pc, #132]	@ (8009198 <_svfiprintf_r+0x1ec>)
 8009112:	bb1b      	cbnz	r3, 800915c <_svfiprintf_r+0x1b0>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	3307      	adds	r3, #7
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	3308      	adds	r3, #8
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	4433      	add	r3, r6
 8009124:	9309      	str	r3, [sp, #36]	@ 0x24
 8009126:	e76a      	b.n	8008ffe <_svfiprintf_r+0x52>
 8009128:	fb0c 3202 	mla	r2, ip, r2, r3
 800912c:	460c      	mov	r4, r1
 800912e:	2001      	movs	r0, #1
 8009130:	e7a8      	b.n	8009084 <_svfiprintf_r+0xd8>
 8009132:	2300      	movs	r3, #0
 8009134:	3401      	adds	r4, #1
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4620      	mov	r0, r4
 8009140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009144:	3a30      	subs	r2, #48	@ 0x30
 8009146:	2a09      	cmp	r2, #9
 8009148:	d903      	bls.n	8009152 <_svfiprintf_r+0x1a6>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c6      	beq.n	80090dc <_svfiprintf_r+0x130>
 800914e:	9105      	str	r1, [sp, #20]
 8009150:	e7c4      	b.n	80090dc <_svfiprintf_r+0x130>
 8009152:	fb0c 2101 	mla	r1, ip, r1, r2
 8009156:	4604      	mov	r4, r0
 8009158:	2301      	movs	r3, #1
 800915a:	e7f0      	b.n	800913e <_svfiprintf_r+0x192>
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4b0e      	ldr	r3, [pc, #56]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009164:	a904      	add	r1, sp, #16
 8009166:	4638      	mov	r0, r7
 8009168:	f7fd fe78 	bl	8006e5c <_printf_float>
 800916c:	1c42      	adds	r2, r0, #1
 800916e:	4606      	mov	r6, r0
 8009170:	d1d6      	bne.n	8009120 <_svfiprintf_r+0x174>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	065b      	lsls	r3, r3, #25
 8009176:	f53f af2d 	bmi.w	8008fd4 <_svfiprintf_r+0x28>
 800917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800917c:	e72c      	b.n	8008fd8 <_svfiprintf_r+0x2c>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <_svfiprintf_r+0x1f0>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4638      	mov	r0, r7
 800918a:	f7fe f8ff 	bl	800738c <_printf_i>
 800918e:	e7ed      	b.n	800916c <_svfiprintf_r+0x1c0>
 8009190:	08010a08 	.word	0x08010a08
 8009194:	08010a12 	.word	0x08010a12
 8009198:	08006e5d 	.word	0x08006e5d
 800919c:	08008ef5 	.word	0x08008ef5
 80091a0:	08010a0e 	.word	0x08010a0e

080091a4 <__sfputc_r>:
 80091a4:	6893      	ldr	r3, [r2, #8]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	b410      	push	{r4}
 80091ac:	6093      	str	r3, [r2, #8]
 80091ae:	da08      	bge.n	80091c2 <__sfputc_r+0x1e>
 80091b0:	6994      	ldr	r4, [r2, #24]
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	db01      	blt.n	80091ba <__sfputc_r+0x16>
 80091b6:	290a      	cmp	r1, #10
 80091b8:	d103      	bne.n	80091c2 <__sfputc_r+0x1e>
 80091ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091be:	f000 b9df 	b.w	8009580 <__swbuf_r>
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	1c58      	adds	r0, r3, #1
 80091c6:	6010      	str	r0, [r2, #0]
 80091c8:	7019      	strb	r1, [r3, #0]
 80091ca:	4608      	mov	r0, r1
 80091cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <__sfputs_r>:
 80091d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	18d5      	adds	r5, r2, r3
 80091dc:	42ac      	cmp	r4, r5
 80091de:	d101      	bne.n	80091e4 <__sfputs_r+0x12>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e007      	b.n	80091f4 <__sfputs_r+0x22>
 80091e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e8:	463a      	mov	r2, r7
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ffda 	bl	80091a4 <__sfputc_r>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d1f3      	bne.n	80091dc <__sfputs_r+0xa>
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091f8 <_vfiprintf_r>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	460d      	mov	r5, r1
 80091fe:	b09d      	sub	sp, #116	@ 0x74
 8009200:	4614      	mov	r4, r2
 8009202:	4698      	mov	r8, r3
 8009204:	4606      	mov	r6, r0
 8009206:	b118      	cbz	r0, 8009210 <_vfiprintf_r+0x18>
 8009208:	6a03      	ldr	r3, [r0, #32]
 800920a:	b90b      	cbnz	r3, 8009210 <_vfiprintf_r+0x18>
 800920c:	f7fe fa6a 	bl	80076e4 <__sinit>
 8009210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009212:	07d9      	lsls	r1, r3, #31
 8009214:	d405      	bmi.n	8009222 <_vfiprintf_r+0x2a>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	059a      	lsls	r2, r3, #22
 800921a:	d402      	bmi.n	8009222 <_vfiprintf_r+0x2a>
 800921c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800921e:	f7fe fb8a 	bl	8007936 <__retarget_lock_acquire_recursive>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	071b      	lsls	r3, r3, #28
 8009226:	d501      	bpl.n	800922c <_vfiprintf_r+0x34>
 8009228:	692b      	ldr	r3, [r5, #16]
 800922a:	b99b      	cbnz	r3, 8009254 <_vfiprintf_r+0x5c>
 800922c:	4629      	mov	r1, r5
 800922e:	4630      	mov	r0, r6
 8009230:	f000 f9e4 	bl	80095fc <__swsetup_r>
 8009234:	b170      	cbz	r0, 8009254 <_vfiprintf_r+0x5c>
 8009236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009238:	07dc      	lsls	r4, r3, #31
 800923a:	d504      	bpl.n	8009246 <_vfiprintf_r+0x4e>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	b01d      	add	sp, #116	@ 0x74
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	0598      	lsls	r0, r3, #22
 800924a:	d4f7      	bmi.n	800923c <_vfiprintf_r+0x44>
 800924c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924e:	f7fe fb73 	bl	8007938 <__retarget_lock_release_recursive>
 8009252:	e7f3      	b.n	800923c <_vfiprintf_r+0x44>
 8009254:	2300      	movs	r3, #0
 8009256:	9309      	str	r3, [sp, #36]	@ 0x24
 8009258:	2320      	movs	r3, #32
 800925a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800925e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009262:	2330      	movs	r3, #48	@ 0x30
 8009264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009414 <_vfiprintf_r+0x21c>
 8009268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800926c:	f04f 0901 	mov.w	r9, #1
 8009270:	4623      	mov	r3, r4
 8009272:	469a      	mov	sl, r3
 8009274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009278:	b10a      	cbz	r2, 800927e <_vfiprintf_r+0x86>
 800927a:	2a25      	cmp	r2, #37	@ 0x25
 800927c:	d1f9      	bne.n	8009272 <_vfiprintf_r+0x7a>
 800927e:	ebba 0b04 	subs.w	fp, sl, r4
 8009282:	d00b      	beq.n	800929c <_vfiprintf_r+0xa4>
 8009284:	465b      	mov	r3, fp
 8009286:	4622      	mov	r2, r4
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ffa1 	bl	80091d2 <__sfputs_r>
 8009290:	3001      	adds	r0, #1
 8009292:	f000 80a7 	beq.w	80093e4 <_vfiprintf_r+0x1ec>
 8009296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009298:	445a      	add	r2, fp
 800929a:	9209      	str	r2, [sp, #36]	@ 0x24
 800929c:	f89a 3000 	ldrb.w	r3, [sl]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 809f 	beq.w	80093e4 <_vfiprintf_r+0x1ec>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b0:	f10a 0a01 	add.w	sl, sl, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80092be:	4654      	mov	r4, sl
 80092c0:	2205      	movs	r2, #5
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	4853      	ldr	r0, [pc, #332]	@ (8009414 <_vfiprintf_r+0x21c>)
 80092c8:	f7f6 ffa2 	bl	8000210 <memchr>
 80092cc:	9a04      	ldr	r2, [sp, #16]
 80092ce:	b9d8      	cbnz	r0, 8009308 <_vfiprintf_r+0x110>
 80092d0:	06d1      	lsls	r1, r2, #27
 80092d2:	bf44      	itt	mi
 80092d4:	2320      	movmi	r3, #32
 80092d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092da:	0713      	lsls	r3, r2, #28
 80092dc:	bf44      	itt	mi
 80092de:	232b      	movmi	r3, #43	@ 0x2b
 80092e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e4:	f89a 3000 	ldrb.w	r3, [sl]
 80092e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ea:	d015      	beq.n	8009318 <_vfiprintf_r+0x120>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	4654      	mov	r4, sl
 80092f0:	2000      	movs	r0, #0
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4621      	mov	r1, r4
 80092f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092fc:	3b30      	subs	r3, #48	@ 0x30
 80092fe:	2b09      	cmp	r3, #9
 8009300:	d94b      	bls.n	800939a <_vfiprintf_r+0x1a2>
 8009302:	b1b0      	cbz	r0, 8009332 <_vfiprintf_r+0x13a>
 8009304:	9207      	str	r2, [sp, #28]
 8009306:	e014      	b.n	8009332 <_vfiprintf_r+0x13a>
 8009308:	eba0 0308 	sub.w	r3, r0, r8
 800930c:	fa09 f303 	lsl.w	r3, r9, r3
 8009310:	4313      	orrs	r3, r2
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	46a2      	mov	sl, r4
 8009316:	e7d2      	b.n	80092be <_vfiprintf_r+0xc6>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	1d19      	adds	r1, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	9103      	str	r1, [sp, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfbb      	ittet	lt
 8009324:	425b      	neglt	r3, r3
 8009326:	f042 0202 	orrlt.w	r2, r2, #2
 800932a:	9307      	strge	r3, [sp, #28]
 800932c:	9307      	strlt	r3, [sp, #28]
 800932e:	bfb8      	it	lt
 8009330:	9204      	strlt	r2, [sp, #16]
 8009332:	7823      	ldrb	r3, [r4, #0]
 8009334:	2b2e      	cmp	r3, #46	@ 0x2e
 8009336:	d10a      	bne.n	800934e <_vfiprintf_r+0x156>
 8009338:	7863      	ldrb	r3, [r4, #1]
 800933a:	2b2a      	cmp	r3, #42	@ 0x2a
 800933c:	d132      	bne.n	80093a4 <_vfiprintf_r+0x1ac>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	9203      	str	r2, [sp, #12]
 8009346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800934a:	3402      	adds	r4, #2
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009424 <_vfiprintf_r+0x22c>
 8009352:	7821      	ldrb	r1, [r4, #0]
 8009354:	2203      	movs	r2, #3
 8009356:	4650      	mov	r0, sl
 8009358:	f7f6 ff5a 	bl	8000210 <memchr>
 800935c:	b138      	cbz	r0, 800936e <_vfiprintf_r+0x176>
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	eba0 000a 	sub.w	r0, r0, sl
 8009364:	2240      	movs	r2, #64	@ 0x40
 8009366:	4082      	lsls	r2, r0
 8009368:	4313      	orrs	r3, r2
 800936a:	3401      	adds	r4, #1
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009372:	4829      	ldr	r0, [pc, #164]	@ (8009418 <_vfiprintf_r+0x220>)
 8009374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009378:	2206      	movs	r2, #6
 800937a:	f7f6 ff49 	bl	8000210 <memchr>
 800937e:	2800      	cmp	r0, #0
 8009380:	d03f      	beq.n	8009402 <_vfiprintf_r+0x20a>
 8009382:	4b26      	ldr	r3, [pc, #152]	@ (800941c <_vfiprintf_r+0x224>)
 8009384:	bb1b      	cbnz	r3, 80093ce <_vfiprintf_r+0x1d6>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	3307      	adds	r3, #7
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	3308      	adds	r3, #8
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	443b      	add	r3, r7
 8009396:	9309      	str	r3, [sp, #36]	@ 0x24
 8009398:	e76a      	b.n	8009270 <_vfiprintf_r+0x78>
 800939a:	fb0c 3202 	mla	r2, ip, r2, r3
 800939e:	460c      	mov	r4, r1
 80093a0:	2001      	movs	r0, #1
 80093a2:	e7a8      	b.n	80092f6 <_vfiprintf_r+0xfe>
 80093a4:	2300      	movs	r3, #0
 80093a6:	3401      	adds	r4, #1
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	4619      	mov	r1, r3
 80093ac:	f04f 0c0a 	mov.w	ip, #10
 80093b0:	4620      	mov	r0, r4
 80093b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b6:	3a30      	subs	r2, #48	@ 0x30
 80093b8:	2a09      	cmp	r2, #9
 80093ba:	d903      	bls.n	80093c4 <_vfiprintf_r+0x1cc>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0c6      	beq.n	800934e <_vfiprintf_r+0x156>
 80093c0:	9105      	str	r1, [sp, #20]
 80093c2:	e7c4      	b.n	800934e <_vfiprintf_r+0x156>
 80093c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c8:	4604      	mov	r4, r0
 80093ca:	2301      	movs	r3, #1
 80093cc:	e7f0      	b.n	80093b0 <_vfiprintf_r+0x1b8>
 80093ce:	ab03      	add	r3, sp, #12
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	462a      	mov	r2, r5
 80093d4:	4b12      	ldr	r3, [pc, #72]	@ (8009420 <_vfiprintf_r+0x228>)
 80093d6:	a904      	add	r1, sp, #16
 80093d8:	4630      	mov	r0, r6
 80093da:	f7fd fd3f 	bl	8006e5c <_printf_float>
 80093de:	4607      	mov	r7, r0
 80093e0:	1c78      	adds	r0, r7, #1
 80093e2:	d1d6      	bne.n	8009392 <_vfiprintf_r+0x19a>
 80093e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093e6:	07d9      	lsls	r1, r3, #31
 80093e8:	d405      	bmi.n	80093f6 <_vfiprintf_r+0x1fe>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	059a      	lsls	r2, r3, #22
 80093ee:	d402      	bmi.n	80093f6 <_vfiprintf_r+0x1fe>
 80093f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093f2:	f7fe faa1 	bl	8007938 <__retarget_lock_release_recursive>
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	065b      	lsls	r3, r3, #25
 80093fa:	f53f af1f 	bmi.w	800923c <_vfiprintf_r+0x44>
 80093fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009400:	e71e      	b.n	8009240 <_vfiprintf_r+0x48>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b05      	ldr	r3, [pc, #20]	@ (8009420 <_vfiprintf_r+0x228>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4630      	mov	r0, r6
 800940e:	f7fd ffbd 	bl	800738c <_printf_i>
 8009412:	e7e4      	b.n	80093de <_vfiprintf_r+0x1e6>
 8009414:	08010a08 	.word	0x08010a08
 8009418:	08010a12 	.word	0x08010a12
 800941c:	08006e5d 	.word	0x08006e5d
 8009420:	080091d3 	.word	0x080091d3
 8009424:	08010a0e 	.word	0x08010a0e

08009428 <__sflush_r>:
 8009428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	0716      	lsls	r6, r2, #28
 8009432:	4605      	mov	r5, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d454      	bmi.n	80094e2 <__sflush_r+0xba>
 8009438:	684b      	ldr	r3, [r1, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dc02      	bgt.n	8009444 <__sflush_r+0x1c>
 800943e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	dd48      	ble.n	80094d6 <__sflush_r+0xae>
 8009444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009446:	2e00      	cmp	r6, #0
 8009448:	d045      	beq.n	80094d6 <__sflush_r+0xae>
 800944a:	2300      	movs	r3, #0
 800944c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009450:	682f      	ldr	r7, [r5, #0]
 8009452:	6a21      	ldr	r1, [r4, #32]
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	d030      	beq.n	80094ba <__sflush_r+0x92>
 8009458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	0759      	lsls	r1, r3, #29
 800945e:	d505      	bpl.n	800946c <__sflush_r+0x44>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009466:	b10b      	cbz	r3, 800946c <__sflush_r+0x44>
 8009468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	2300      	movs	r3, #0
 800946e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009470:	6a21      	ldr	r1, [r4, #32]
 8009472:	4628      	mov	r0, r5
 8009474:	47b0      	blx	r6
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	d106      	bne.n	800948a <__sflush_r+0x62>
 800947c:	6829      	ldr	r1, [r5, #0]
 800947e:	291d      	cmp	r1, #29
 8009480:	d82b      	bhi.n	80094da <__sflush_r+0xb2>
 8009482:	4a2a      	ldr	r2, [pc, #168]	@ (800952c <__sflush_r+0x104>)
 8009484:	410a      	asrs	r2, r1
 8009486:	07d6      	lsls	r6, r2, #31
 8009488:	d427      	bmi.n	80094da <__sflush_r+0xb2>
 800948a:	2200      	movs	r2, #0
 800948c:	6062      	str	r2, [r4, #4]
 800948e:	04d9      	lsls	r1, r3, #19
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	6022      	str	r2, [r4, #0]
 8009494:	d504      	bpl.n	80094a0 <__sflush_r+0x78>
 8009496:	1c42      	adds	r2, r0, #1
 8009498:	d101      	bne.n	800949e <__sflush_r+0x76>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	b903      	cbnz	r3, 80094a0 <__sflush_r+0x78>
 800949e:	6560      	str	r0, [r4, #84]	@ 0x54
 80094a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	b1b9      	cbz	r1, 80094d6 <__sflush_r+0xae>
 80094a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094aa:	4299      	cmp	r1, r3
 80094ac:	d002      	beq.n	80094b4 <__sflush_r+0x8c>
 80094ae:	4628      	mov	r0, r5
 80094b0:	f7ff f89e 	bl	80085f0 <_free_r>
 80094b4:	2300      	movs	r3, #0
 80094b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80094b8:	e00d      	b.n	80094d6 <__sflush_r+0xae>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4628      	mov	r0, r5
 80094be:	47b0      	blx	r6
 80094c0:	4602      	mov	r2, r0
 80094c2:	1c50      	adds	r0, r2, #1
 80094c4:	d1c9      	bne.n	800945a <__sflush_r+0x32>
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0c6      	beq.n	800945a <__sflush_r+0x32>
 80094cc:	2b1d      	cmp	r3, #29
 80094ce:	d001      	beq.n	80094d4 <__sflush_r+0xac>
 80094d0:	2b16      	cmp	r3, #22
 80094d2:	d11e      	bne.n	8009512 <__sflush_r+0xea>
 80094d4:	602f      	str	r7, [r5, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	e022      	b.n	8009520 <__sflush_r+0xf8>
 80094da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094de:	b21b      	sxth	r3, r3
 80094e0:	e01b      	b.n	800951a <__sflush_r+0xf2>
 80094e2:	690f      	ldr	r7, [r1, #16]
 80094e4:	2f00      	cmp	r7, #0
 80094e6:	d0f6      	beq.n	80094d6 <__sflush_r+0xae>
 80094e8:	0793      	lsls	r3, r2, #30
 80094ea:	680e      	ldr	r6, [r1, #0]
 80094ec:	bf08      	it	eq
 80094ee:	694b      	ldreq	r3, [r1, #20]
 80094f0:	600f      	str	r7, [r1, #0]
 80094f2:	bf18      	it	ne
 80094f4:	2300      	movne	r3, #0
 80094f6:	eba6 0807 	sub.w	r8, r6, r7
 80094fa:	608b      	str	r3, [r1, #8]
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	dde9      	ble.n	80094d6 <__sflush_r+0xae>
 8009502:	6a21      	ldr	r1, [r4, #32]
 8009504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009506:	4643      	mov	r3, r8
 8009508:	463a      	mov	r2, r7
 800950a:	4628      	mov	r0, r5
 800950c:	47b0      	blx	r6
 800950e:	2800      	cmp	r0, #0
 8009510:	dc08      	bgt.n	8009524 <__sflush_r+0xfc>
 8009512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4407      	add	r7, r0
 8009526:	eba8 0800 	sub.w	r8, r8, r0
 800952a:	e7e7      	b.n	80094fc <__sflush_r+0xd4>
 800952c:	dfbffffe 	.word	0xdfbffffe

08009530 <_fflush_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	690b      	ldr	r3, [r1, #16]
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	b913      	cbnz	r3, 8009540 <_fflush_r+0x10>
 800953a:	2500      	movs	r5, #0
 800953c:	4628      	mov	r0, r5
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	b118      	cbz	r0, 800954a <_fflush_r+0x1a>
 8009542:	6a03      	ldr	r3, [r0, #32]
 8009544:	b90b      	cbnz	r3, 800954a <_fflush_r+0x1a>
 8009546:	f7fe f8cd 	bl	80076e4 <__sinit>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0f3      	beq.n	800953a <_fflush_r+0xa>
 8009552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009554:	07d0      	lsls	r0, r2, #31
 8009556:	d404      	bmi.n	8009562 <_fflush_r+0x32>
 8009558:	0599      	lsls	r1, r3, #22
 800955a:	d402      	bmi.n	8009562 <_fflush_r+0x32>
 800955c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800955e:	f7fe f9ea 	bl	8007936 <__retarget_lock_acquire_recursive>
 8009562:	4628      	mov	r0, r5
 8009564:	4621      	mov	r1, r4
 8009566:	f7ff ff5f 	bl	8009428 <__sflush_r>
 800956a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	4605      	mov	r5, r0
 8009570:	d4e4      	bmi.n	800953c <_fflush_r+0xc>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	059b      	lsls	r3, r3, #22
 8009576:	d4e1      	bmi.n	800953c <_fflush_r+0xc>
 8009578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800957a:	f7fe f9dd 	bl	8007938 <__retarget_lock_release_recursive>
 800957e:	e7dd      	b.n	800953c <_fflush_r+0xc>

08009580 <__swbuf_r>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	460e      	mov	r6, r1
 8009584:	4614      	mov	r4, r2
 8009586:	4605      	mov	r5, r0
 8009588:	b118      	cbz	r0, 8009592 <__swbuf_r+0x12>
 800958a:	6a03      	ldr	r3, [r0, #32]
 800958c:	b90b      	cbnz	r3, 8009592 <__swbuf_r+0x12>
 800958e:	f7fe f8a9 	bl	80076e4 <__sinit>
 8009592:	69a3      	ldr	r3, [r4, #24]
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	071a      	lsls	r2, r3, #28
 800959a:	d501      	bpl.n	80095a0 <__swbuf_r+0x20>
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	b943      	cbnz	r3, 80095b2 <__swbuf_r+0x32>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f82a 	bl	80095fc <__swsetup_r>
 80095a8:	b118      	cbz	r0, 80095b2 <__swbuf_r+0x32>
 80095aa:	f04f 37ff 	mov.w	r7, #4294967295
 80095ae:	4638      	mov	r0, r7
 80095b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	1a98      	subs	r0, r3, r2
 80095b8:	6963      	ldr	r3, [r4, #20]
 80095ba:	b2f6      	uxtb	r6, r6
 80095bc:	4283      	cmp	r3, r0
 80095be:	4637      	mov	r7, r6
 80095c0:	dc05      	bgt.n	80095ce <__swbuf_r+0x4e>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7ff ffb3 	bl	8009530 <_fflush_r>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1ed      	bne.n	80095aa <__swbuf_r+0x2a>
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	701e      	strb	r6, [r3, #0]
 80095dc:	6962      	ldr	r2, [r4, #20]
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d004      	beq.n	80095ee <__swbuf_r+0x6e>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d5e1      	bpl.n	80095ae <__swbuf_r+0x2e>
 80095ea:	2e0a      	cmp	r6, #10
 80095ec:	d1df      	bne.n	80095ae <__swbuf_r+0x2e>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7ff ff9d 	bl	8009530 <_fflush_r>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0d9      	beq.n	80095ae <__swbuf_r+0x2e>
 80095fa:	e7d6      	b.n	80095aa <__swbuf_r+0x2a>

080095fc <__swsetup_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4b29      	ldr	r3, [pc, #164]	@ (80096a4 <__swsetup_r+0xa8>)
 8009600:	4605      	mov	r5, r0
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	460c      	mov	r4, r1
 8009606:	b118      	cbz	r0, 8009610 <__swsetup_r+0x14>
 8009608:	6a03      	ldr	r3, [r0, #32]
 800960a:	b90b      	cbnz	r3, 8009610 <__swsetup_r+0x14>
 800960c:	f7fe f86a 	bl	80076e4 <__sinit>
 8009610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009614:	0719      	lsls	r1, r3, #28
 8009616:	d422      	bmi.n	800965e <__swsetup_r+0x62>
 8009618:	06da      	lsls	r2, r3, #27
 800961a:	d407      	bmi.n	800962c <__swsetup_r+0x30>
 800961c:	2209      	movs	r2, #9
 800961e:	602a      	str	r2, [r5, #0]
 8009620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e033      	b.n	8009694 <__swsetup_r+0x98>
 800962c:	0758      	lsls	r0, r3, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x5a>
 8009630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x4a>
 8009634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x46>
 800963c:	4628      	mov	r0, r5
 800963e:	f7fe ffd7 	bl	80085f0 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	@ 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x7a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x7a>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f8fb 	bl	800986c <__smakebuf_r>
 8009676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967a:	f013 0201 	ands.w	r2, r3, #1
 800967e:	d00a      	beq.n	8009696 <__swsetup_r+0x9a>
 8009680:	2200      	movs	r2, #0
 8009682:	60a2      	str	r2, [r4, #8]
 8009684:	6962      	ldr	r2, [r4, #20]
 8009686:	4252      	negs	r2, r2
 8009688:	61a2      	str	r2, [r4, #24]
 800968a:	6922      	ldr	r2, [r4, #16]
 800968c:	b942      	cbnz	r2, 80096a0 <__swsetup_r+0xa4>
 800968e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009692:	d1c5      	bne.n	8009620 <__swsetup_r+0x24>
 8009694:	bd38      	pop	{r3, r4, r5, pc}
 8009696:	0799      	lsls	r1, r3, #30
 8009698:	bf58      	it	pl
 800969a:	6962      	ldrpl	r2, [r4, #20]
 800969c:	60a2      	str	r2, [r4, #8]
 800969e:	e7f4      	b.n	800968a <__swsetup_r+0x8e>
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7f7      	b.n	8009694 <__swsetup_r+0x98>
 80096a4:	20000248 	.word	0x20000248

080096a8 <memmove>:
 80096a8:	4288      	cmp	r0, r1
 80096aa:	b510      	push	{r4, lr}
 80096ac:	eb01 0402 	add.w	r4, r1, r2
 80096b0:	d902      	bls.n	80096b8 <memmove+0x10>
 80096b2:	4284      	cmp	r4, r0
 80096b4:	4623      	mov	r3, r4
 80096b6:	d807      	bhi.n	80096c8 <memmove+0x20>
 80096b8:	1e43      	subs	r3, r0, #1
 80096ba:	42a1      	cmp	r1, r4
 80096bc:	d008      	beq.n	80096d0 <memmove+0x28>
 80096be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096c6:	e7f8      	b.n	80096ba <memmove+0x12>
 80096c8:	4402      	add	r2, r0
 80096ca:	4601      	mov	r1, r0
 80096cc:	428a      	cmp	r2, r1
 80096ce:	d100      	bne.n	80096d2 <memmove+0x2a>
 80096d0:	bd10      	pop	{r4, pc}
 80096d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80096da:	e7f7      	b.n	80096cc <memmove+0x24>

080096dc <_sbrk_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d06      	ldr	r5, [pc, #24]	@ (80096f8 <_sbrk_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7fc f984 	bl	80059f4 <_sbrk>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_sbrk_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_sbrk_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	20024960 	.word	0x20024960

080096fc <__assert_func>:
 80096fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096fe:	4614      	mov	r4, r2
 8009700:	461a      	mov	r2, r3
 8009702:	4b09      	ldr	r3, [pc, #36]	@ (8009728 <__assert_func+0x2c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4605      	mov	r5, r0
 8009708:	68d8      	ldr	r0, [r3, #12]
 800970a:	b954      	cbnz	r4, 8009722 <__assert_func+0x26>
 800970c:	4b07      	ldr	r3, [pc, #28]	@ (800972c <__assert_func+0x30>)
 800970e:	461c      	mov	r4, r3
 8009710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009714:	9100      	str	r1, [sp, #0]
 8009716:	462b      	mov	r3, r5
 8009718:	4905      	ldr	r1, [pc, #20]	@ (8009730 <__assert_func+0x34>)
 800971a:	f000 f86f 	bl	80097fc <fiprintf>
 800971e:	f000 f903 	bl	8009928 <abort>
 8009722:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <__assert_func+0x38>)
 8009724:	e7f4      	b.n	8009710 <__assert_func+0x14>
 8009726:	bf00      	nop
 8009728:	20000248 	.word	0x20000248
 800972c:	08010a5a 	.word	0x08010a5a
 8009730:	08010a2c 	.word	0x08010a2c
 8009734:	08010a1f 	.word	0x08010a1f

08009738 <_calloc_r>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	fba1 5402 	umull	r5, r4, r1, r2
 800973e:	b93c      	cbnz	r4, 8009750 <_calloc_r+0x18>
 8009740:	4629      	mov	r1, r5
 8009742:	f7fe ffc9 	bl	80086d8 <_malloc_r>
 8009746:	4606      	mov	r6, r0
 8009748:	b928      	cbnz	r0, 8009756 <_calloc_r+0x1e>
 800974a:	2600      	movs	r6, #0
 800974c:	4630      	mov	r0, r6
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	220c      	movs	r2, #12
 8009752:	6002      	str	r2, [r0, #0]
 8009754:	e7f9      	b.n	800974a <_calloc_r+0x12>
 8009756:	462a      	mov	r2, r5
 8009758:	4621      	mov	r1, r4
 800975a:	f7fe f86e 	bl	800783a <memset>
 800975e:	e7f5      	b.n	800974c <_calloc_r+0x14>

08009760 <__ascii_mbtowc>:
 8009760:	b082      	sub	sp, #8
 8009762:	b901      	cbnz	r1, 8009766 <__ascii_mbtowc+0x6>
 8009764:	a901      	add	r1, sp, #4
 8009766:	b142      	cbz	r2, 800977a <__ascii_mbtowc+0x1a>
 8009768:	b14b      	cbz	r3, 800977e <__ascii_mbtowc+0x1e>
 800976a:	7813      	ldrb	r3, [r2, #0]
 800976c:	600b      	str	r3, [r1, #0]
 800976e:	7812      	ldrb	r2, [r2, #0]
 8009770:	1e10      	subs	r0, r2, #0
 8009772:	bf18      	it	ne
 8009774:	2001      	movne	r0, #1
 8009776:	b002      	add	sp, #8
 8009778:	4770      	bx	lr
 800977a:	4610      	mov	r0, r2
 800977c:	e7fb      	b.n	8009776 <__ascii_mbtowc+0x16>
 800977e:	f06f 0001 	mvn.w	r0, #1
 8009782:	e7f8      	b.n	8009776 <__ascii_mbtowc+0x16>

08009784 <_realloc_r>:
 8009784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009788:	4680      	mov	r8, r0
 800978a:	4615      	mov	r5, r2
 800978c:	460c      	mov	r4, r1
 800978e:	b921      	cbnz	r1, 800979a <_realloc_r+0x16>
 8009790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	4611      	mov	r1, r2
 8009796:	f7fe bf9f 	b.w	80086d8 <_malloc_r>
 800979a:	b92a      	cbnz	r2, 80097a8 <_realloc_r+0x24>
 800979c:	f7fe ff28 	bl	80085f0 <_free_r>
 80097a0:	2400      	movs	r4, #0
 80097a2:	4620      	mov	r0, r4
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a8:	f000 f8c5 	bl	8009936 <_malloc_usable_size_r>
 80097ac:	4285      	cmp	r5, r0
 80097ae:	4606      	mov	r6, r0
 80097b0:	d802      	bhi.n	80097b8 <_realloc_r+0x34>
 80097b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097b6:	d8f4      	bhi.n	80097a2 <_realloc_r+0x1e>
 80097b8:	4629      	mov	r1, r5
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7fe ff8c 	bl	80086d8 <_malloc_r>
 80097c0:	4607      	mov	r7, r0
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d0ec      	beq.n	80097a0 <_realloc_r+0x1c>
 80097c6:	42b5      	cmp	r5, r6
 80097c8:	462a      	mov	r2, r5
 80097ca:	4621      	mov	r1, r4
 80097cc:	bf28      	it	cs
 80097ce:	4632      	movcs	r2, r6
 80097d0:	f7fe f8b3 	bl	800793a <memcpy>
 80097d4:	4621      	mov	r1, r4
 80097d6:	4640      	mov	r0, r8
 80097d8:	f7fe ff0a 	bl	80085f0 <_free_r>
 80097dc:	463c      	mov	r4, r7
 80097de:	e7e0      	b.n	80097a2 <_realloc_r+0x1e>

080097e0 <__ascii_wctomb>:
 80097e0:	4603      	mov	r3, r0
 80097e2:	4608      	mov	r0, r1
 80097e4:	b141      	cbz	r1, 80097f8 <__ascii_wctomb+0x18>
 80097e6:	2aff      	cmp	r2, #255	@ 0xff
 80097e8:	d904      	bls.n	80097f4 <__ascii_wctomb+0x14>
 80097ea:	228a      	movs	r2, #138	@ 0x8a
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f04f 30ff 	mov.w	r0, #4294967295
 80097f2:	4770      	bx	lr
 80097f4:	700a      	strb	r2, [r1, #0]
 80097f6:	2001      	movs	r0, #1
 80097f8:	4770      	bx	lr
	...

080097fc <fiprintf>:
 80097fc:	b40e      	push	{r1, r2, r3}
 80097fe:	b503      	push	{r0, r1, lr}
 8009800:	4601      	mov	r1, r0
 8009802:	ab03      	add	r3, sp, #12
 8009804:	4805      	ldr	r0, [pc, #20]	@ (800981c <fiprintf+0x20>)
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	f7ff fcf3 	bl	80091f8 <_vfiprintf_r>
 8009812:	b002      	add	sp, #8
 8009814:	f85d eb04 	ldr.w	lr, [sp], #4
 8009818:	b003      	add	sp, #12
 800981a:	4770      	bx	lr
 800981c:	20000248 	.word	0x20000248

08009820 <__swhatbuf_r>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	460c      	mov	r4, r1
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	2900      	cmp	r1, #0
 800982a:	b096      	sub	sp, #88	@ 0x58
 800982c:	4615      	mov	r5, r2
 800982e:	461e      	mov	r6, r3
 8009830:	da0d      	bge.n	800984e <__swhatbuf_r+0x2e>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009838:	f04f 0100 	mov.w	r1, #0
 800983c:	bf14      	ite	ne
 800983e:	2340      	movne	r3, #64	@ 0x40
 8009840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009844:	2000      	movs	r0, #0
 8009846:	6031      	str	r1, [r6, #0]
 8009848:	602b      	str	r3, [r5, #0]
 800984a:	b016      	add	sp, #88	@ 0x58
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	466a      	mov	r2, sp
 8009850:	f000 f848 	bl	80098e4 <_fstat_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	dbec      	blt.n	8009832 <__swhatbuf_r+0x12>
 8009858:	9901      	ldr	r1, [sp, #4]
 800985a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800985e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009862:	4259      	negs	r1, r3
 8009864:	4159      	adcs	r1, r3
 8009866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986a:	e7eb      	b.n	8009844 <__swhatbuf_r+0x24>

0800986c <__smakebuf_r>:
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009870:	079d      	lsls	r5, r3, #30
 8009872:	4606      	mov	r6, r0
 8009874:	460c      	mov	r4, r1
 8009876:	d507      	bpl.n	8009888 <__smakebuf_r+0x1c>
 8009878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	2301      	movs	r3, #1
 8009882:	6163      	str	r3, [r4, #20]
 8009884:	b003      	add	sp, #12
 8009886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009888:	ab01      	add	r3, sp, #4
 800988a:	466a      	mov	r2, sp
 800988c:	f7ff ffc8 	bl	8009820 <__swhatbuf_r>
 8009890:	9f00      	ldr	r7, [sp, #0]
 8009892:	4605      	mov	r5, r0
 8009894:	4639      	mov	r1, r7
 8009896:	4630      	mov	r0, r6
 8009898:	f7fe ff1e 	bl	80086d8 <_malloc_r>
 800989c:	b948      	cbnz	r0, 80098b2 <__smakebuf_r+0x46>
 800989e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a2:	059a      	lsls	r2, r3, #22
 80098a4:	d4ee      	bmi.n	8009884 <__smakebuf_r+0x18>
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	f043 0302 	orr.w	r3, r3, #2
 80098ae:	81a3      	strh	r3, [r4, #12]
 80098b0:	e7e2      	b.n	8009878 <__smakebuf_r+0xc>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	6020      	str	r0, [r4, #0]
 80098b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	9b01      	ldr	r3, [sp, #4]
 80098be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80098c2:	b15b      	cbz	r3, 80098dc <__smakebuf_r+0x70>
 80098c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f81d 	bl	8009908 <_isatty_r>
 80098ce:	b128      	cbz	r0, 80098dc <__smakebuf_r+0x70>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	431d      	orrs	r5, r3
 80098e0:	81a5      	strh	r5, [r4, #12]
 80098e2:	e7cf      	b.n	8009884 <__smakebuf_r+0x18>

080098e4 <_fstat_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d07      	ldr	r5, [pc, #28]	@ (8009904 <_fstat_r+0x20>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	602b      	str	r3, [r5, #0]
 80098f2:	f7fc f89c 	bl	8005a2e <_fstat>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d102      	bne.n	8009900 <_fstat_r+0x1c>
 80098fa:	682b      	ldr	r3, [r5, #0]
 80098fc:	b103      	cbz	r3, 8009900 <_fstat_r+0x1c>
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	20024960 	.word	0x20024960

08009908 <_isatty_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d06      	ldr	r5, [pc, #24]	@ (8009924 <_isatty_r+0x1c>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	602b      	str	r3, [r5, #0]
 8009914:	f7fc f890 	bl	8005a38 <_isatty>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_isatty_r+0x1a>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_isatty_r+0x1a>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20024960 	.word	0x20024960

08009928 <abort>:
 8009928:	b508      	push	{r3, lr}
 800992a:	2006      	movs	r0, #6
 800992c:	f000 f834 	bl	8009998 <raise>
 8009930:	2001      	movs	r0, #1
 8009932:	f7fc f83c 	bl	80059ae <_exit>

08009936 <_malloc_usable_size_r>:
 8009936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993a:	1f18      	subs	r0, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	bfbc      	itt	lt
 8009940:	580b      	ldrlt	r3, [r1, r0]
 8009942:	18c0      	addlt	r0, r0, r3
 8009944:	4770      	bx	lr

08009946 <_raise_r>:
 8009946:	291f      	cmp	r1, #31
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	460c      	mov	r4, r1
 800994e:	d904      	bls.n	800995a <_raise_r+0x14>
 8009950:	2316      	movs	r3, #22
 8009952:	6003      	str	r3, [r0, #0]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800995c:	b112      	cbz	r2, 8009964 <_raise_r+0x1e>
 800995e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009962:	b94b      	cbnz	r3, 8009978 <_raise_r+0x32>
 8009964:	4628      	mov	r0, r5
 8009966:	f000 f831 	bl	80099cc <_getpid_r>
 800996a:	4622      	mov	r2, r4
 800996c:	4601      	mov	r1, r0
 800996e:	4628      	mov	r0, r5
 8009970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009974:	f000 b818 	b.w	80099a8 <_kill_r>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d00a      	beq.n	8009992 <_raise_r+0x4c>
 800997c:	1c59      	adds	r1, r3, #1
 800997e:	d103      	bne.n	8009988 <_raise_r+0x42>
 8009980:	2316      	movs	r3, #22
 8009982:	6003      	str	r3, [r0, #0]
 8009984:	2001      	movs	r0, #1
 8009986:	e7e7      	b.n	8009958 <_raise_r+0x12>
 8009988:	2100      	movs	r1, #0
 800998a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800998e:	4620      	mov	r0, r4
 8009990:	4798      	blx	r3
 8009992:	2000      	movs	r0, #0
 8009994:	e7e0      	b.n	8009958 <_raise_r+0x12>
	...

08009998 <raise>:
 8009998:	4b02      	ldr	r3, [pc, #8]	@ (80099a4 <raise+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f7ff bfd2 	b.w	8009946 <_raise_r>
 80099a2:	bf00      	nop
 80099a4:	20000248 	.word	0x20000248

080099a8 <_kill_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	@ (80099c8 <_kill_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	f7fb fff2 	bl	800599e <_kill>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_kill_r+0x1c>
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_kill_r+0x1c>
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20024960 	.word	0x20024960

080099cc <_getpid_r>:
 80099cc:	f7fb bfe5 	b.w	800599a <_getpid>

080099d0 <sinf>:
 80099d0:	ee10 3a10 	vmov	r3, s0
 80099d4:	b507      	push	{r0, r1, r2, lr}
 80099d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a54 <sinf+0x84>)
 80099d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099dc:	4293      	cmp	r3, r2
 80099de:	d807      	bhi.n	80099f0 <sinf+0x20>
 80099e0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009a58 <sinf+0x88>
 80099e4:	2000      	movs	r0, #0
 80099e6:	b003      	add	sp, #12
 80099e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ec:	f000 b88e 	b.w	8009b0c <__kernel_sinf>
 80099f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80099f4:	d304      	bcc.n	8009a00 <sinf+0x30>
 80099f6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80099fa:	b003      	add	sp, #12
 80099fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a00:	4668      	mov	r0, sp
 8009a02:	f000 f8cb 	bl	8009b9c <__ieee754_rem_pio2f>
 8009a06:	f000 0003 	and.w	r0, r0, #3
 8009a0a:	2801      	cmp	r0, #1
 8009a0c:	d00a      	beq.n	8009a24 <sinf+0x54>
 8009a0e:	2802      	cmp	r0, #2
 8009a10:	d00f      	beq.n	8009a32 <sinf+0x62>
 8009a12:	b9c0      	cbnz	r0, 8009a46 <sinf+0x76>
 8009a14:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a18:	ed9d 0a00 	vldr	s0, [sp]
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	f000 f875 	bl	8009b0c <__kernel_sinf>
 8009a22:	e7ea      	b.n	80099fa <sinf+0x2a>
 8009a24:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a28:	ed9d 0a00 	vldr	s0, [sp]
 8009a2c:	f000 f816 	bl	8009a5c <__kernel_cosf>
 8009a30:	e7e3      	b.n	80099fa <sinf+0x2a>
 8009a32:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a36:	ed9d 0a00 	vldr	s0, [sp]
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	f000 f866 	bl	8009b0c <__kernel_sinf>
 8009a40:	eeb1 0a40 	vneg.f32	s0, s0
 8009a44:	e7d9      	b.n	80099fa <sinf+0x2a>
 8009a46:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a4a:	ed9d 0a00 	vldr	s0, [sp]
 8009a4e:	f000 f805 	bl	8009a5c <__kernel_cosf>
 8009a52:	e7f5      	b.n	8009a40 <sinf+0x70>
 8009a54:	3f490fd8 	.word	0x3f490fd8
 8009a58:	00000000 	.word	0x00000000

08009a5c <__kernel_cosf>:
 8009a5c:	ee10 3a10 	vmov	r3, s0
 8009a60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009a68:	eef0 6a40 	vmov.f32	s13, s0
 8009a6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009a70:	d204      	bcs.n	8009a7c <__kernel_cosf+0x20>
 8009a72:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009a76:	ee17 2a90 	vmov	r2, s15
 8009a7a:	b342      	cbz	r2, 8009ace <__kernel_cosf+0x72>
 8009a7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009a80:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009aec <__kernel_cosf+0x90>
 8009a84:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009af0 <__kernel_cosf+0x94>
 8009a88:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <__kernel_cosf+0x98>)
 8009a8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009af8 <__kernel_cosf+0x9c>
 8009a94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a98:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009afc <__kernel_cosf+0xa0>
 8009a9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009aa0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009b00 <__kernel_cosf+0xa4>
 8009aa4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009aa8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009b04 <__kernel_cosf+0xa8>
 8009aac:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009ab0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009ab4:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009ab8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009abc:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac4:	d804      	bhi.n	8009ad0 <__kernel_cosf+0x74>
 8009ac6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009aca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009ace:	4770      	bx	lr
 8009ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8009b08 <__kernel_cosf+0xac>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	bf9a      	itte	ls
 8009ad6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009ada:	ee07 3a10 	vmovls	s14, r3
 8009ade:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009ae2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009aea:	e7ec      	b.n	8009ac6 <__kernel_cosf+0x6a>
 8009aec:	ad47d74e 	.word	0xad47d74e
 8009af0:	310f74f6 	.word	0x310f74f6
 8009af4:	3e999999 	.word	0x3e999999
 8009af8:	b493f27c 	.word	0xb493f27c
 8009afc:	37d00d01 	.word	0x37d00d01
 8009b00:	bab60b61 	.word	0xbab60b61
 8009b04:	3d2aaaab 	.word	0x3d2aaaab
 8009b08:	3f480000 	.word	0x3f480000

08009b0c <__kernel_sinf>:
 8009b0c:	ee10 3a10 	vmov	r3, s0
 8009b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009b18:	d204      	bcs.n	8009b24 <__kernel_sinf+0x18>
 8009b1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009b1e:	ee17 3a90 	vmov	r3, s15
 8009b22:	b35b      	cbz	r3, 8009b7c <__kernel_sinf+0x70>
 8009b24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009b28:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009b80 <__kernel_sinf+0x74>
 8009b2c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009b84 <__kernel_sinf+0x78>
 8009b30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b34:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009b88 <__kernel_sinf+0x7c>
 8009b38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b3c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009b8c <__kernel_sinf+0x80>
 8009b40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009b44:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009b90 <__kernel_sinf+0x84>
 8009b48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009b4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009b50:	b930      	cbnz	r0, 8009b60 <__kernel_sinf+0x54>
 8009b52:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009b94 <__kernel_sinf+0x88>
 8009b56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009b5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009b5e:	4770      	bx	lr
 8009b60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009b64:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009b68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009b6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009b70:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009b98 <__kernel_sinf+0x8c>
 8009b74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009b78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	2f2ec9d3 	.word	0x2f2ec9d3
 8009b84:	b2d72f34 	.word	0xb2d72f34
 8009b88:	3638ef1b 	.word	0x3638ef1b
 8009b8c:	b9500d01 	.word	0xb9500d01
 8009b90:	3c088889 	.word	0x3c088889
 8009b94:	be2aaaab 	.word	0xbe2aaaab
 8009b98:	3e2aaaab 	.word	0x3e2aaaab

08009b9c <__ieee754_rem_pio2f>:
 8009b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9e:	ee10 6a10 	vmov	r6, s0
 8009ba2:	4b88      	ldr	r3, [pc, #544]	@ (8009dc4 <__ieee754_rem_pio2f+0x228>)
 8009ba4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	b087      	sub	sp, #28
 8009bac:	4604      	mov	r4, r0
 8009bae:	d805      	bhi.n	8009bbc <__ieee754_rem_pio2f+0x20>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	ed80 0a00 	vstr	s0, [r0]
 8009bb6:	6043      	str	r3, [r0, #4]
 8009bb8:	2000      	movs	r0, #0
 8009bba:	e022      	b.n	8009c02 <__ieee754_rem_pio2f+0x66>
 8009bbc:	4b82      	ldr	r3, [pc, #520]	@ (8009dc8 <__ieee754_rem_pio2f+0x22c>)
 8009bbe:	429d      	cmp	r5, r3
 8009bc0:	d83a      	bhi.n	8009c38 <__ieee754_rem_pio2f+0x9c>
 8009bc2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009dcc <__ieee754_rem_pio2f+0x230>
 8009bcc:	4a80      	ldr	r2, [pc, #512]	@ (8009dd0 <__ieee754_rem_pio2f+0x234>)
 8009bce:	f023 030f 	bic.w	r3, r3, #15
 8009bd2:	dd18      	ble.n	8009c06 <__ieee754_rem_pio2f+0x6a>
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009bda:	bf09      	itett	eq
 8009bdc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009dd4 <__ieee754_rem_pio2f+0x238>
 8009be0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009dd8 <__ieee754_rem_pio2f+0x23c>
 8009be4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009ddc <__ieee754_rem_pio2f+0x240>
 8009be8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009bec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009bf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bf4:	ed80 7a00 	vstr	s14, [r0]
 8009bf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009bfc:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c00:	2001      	movs	r0, #1
 8009c02:	b007      	add	sp, #28
 8009c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c06:	4293      	cmp	r3, r2
 8009c08:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009c0c:	bf09      	itett	eq
 8009c0e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009dd4 <__ieee754_rem_pio2f+0x238>
 8009c12:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009dd8 <__ieee754_rem_pio2f+0x23c>
 8009c16:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009ddc <__ieee754_rem_pio2f+0x240>
 8009c1a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009c1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c26:	ed80 7a00 	vstr	s14, [r0]
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295
 8009c36:	e7e4      	b.n	8009c02 <__ieee754_rem_pio2f+0x66>
 8009c38:	4b69      	ldr	r3, [pc, #420]	@ (8009de0 <__ieee754_rem_pio2f+0x244>)
 8009c3a:	429d      	cmp	r5, r3
 8009c3c:	d873      	bhi.n	8009d26 <__ieee754_rem_pio2f+0x18a>
 8009c3e:	f000 f8dd 	bl	8009dfc <fabsf>
 8009c42:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009de4 <__ieee754_rem_pio2f+0x248>
 8009c46:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009c4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c56:	ee17 0a90 	vmov	r0, s15
 8009c5a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009dcc <__ieee754_rem_pio2f+0x230>
 8009c5e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009c62:	281f      	cmp	r0, #31
 8009c64:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009dd8 <__ieee754_rem_pio2f+0x23c>
 8009c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6c:	eeb1 6a47 	vneg.f32	s12, s14
 8009c70:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009c74:	ee16 1a90 	vmov	r1, s13
 8009c78:	dc09      	bgt.n	8009c8e <__ieee754_rem_pio2f+0xf2>
 8009c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8009de8 <__ieee754_rem_pio2f+0x24c>)
 8009c7c:	1e47      	subs	r7, r0, #1
 8009c7e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009c82:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009c86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d107      	bne.n	8009c9e <__ieee754_rem_pio2f+0x102>
 8009c8e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009c92:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009c96:	2a08      	cmp	r2, #8
 8009c98:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009c9c:	dc14      	bgt.n	8009cc8 <__ieee754_rem_pio2f+0x12c>
 8009c9e:	6021      	str	r1, [r4, #0]
 8009ca0:	ed94 7a00 	vldr	s14, [r4]
 8009ca4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009cae:	ed84 0a01 	vstr	s0, [r4, #4]
 8009cb2:	daa6      	bge.n	8009c02 <__ieee754_rem_pio2f+0x66>
 8009cb4:	eeb1 7a47 	vneg.f32	s14, s14
 8009cb8:	eeb1 0a40 	vneg.f32	s0, s0
 8009cbc:	ed84 7a00 	vstr	s14, [r4]
 8009cc0:	ed84 0a01 	vstr	s0, [r4, #4]
 8009cc4:	4240      	negs	r0, r0
 8009cc6:	e79c      	b.n	8009c02 <__ieee754_rem_pio2f+0x66>
 8009cc8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009dd4 <__ieee754_rem_pio2f+0x238>
 8009ccc:	eef0 6a40 	vmov.f32	s13, s0
 8009cd0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009cd4:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009cd8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009cdc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ddc <__ieee754_rem_pio2f+0x240>
 8009ce0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009ce4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009ce8:	ee15 2a90 	vmov	r2, s11
 8009cec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009cf0:	1a5b      	subs	r3, r3, r1
 8009cf2:	2b19      	cmp	r3, #25
 8009cf4:	dc04      	bgt.n	8009d00 <__ieee754_rem_pio2f+0x164>
 8009cf6:	edc4 5a00 	vstr	s11, [r4]
 8009cfa:	eeb0 0a66 	vmov.f32	s0, s13
 8009cfe:	e7cf      	b.n	8009ca0 <__ieee754_rem_pio2f+0x104>
 8009d00:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009dec <__ieee754_rem_pio2f+0x250>
 8009d04:	eeb0 0a66 	vmov.f32	s0, s13
 8009d08:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009d0c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009d10:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009df0 <__ieee754_rem_pio2f+0x254>
 8009d14:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009d18:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009d1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d20:	ed84 7a00 	vstr	s14, [r4]
 8009d24:	e7bc      	b.n	8009ca0 <__ieee754_rem_pio2f+0x104>
 8009d26:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009d2a:	d306      	bcc.n	8009d3a <__ieee754_rem_pio2f+0x19e>
 8009d2c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009d30:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d34:	edc0 7a00 	vstr	s15, [r0]
 8009d38:	e73e      	b.n	8009bb8 <__ieee754_rem_pio2f+0x1c>
 8009d3a:	15ea      	asrs	r2, r5, #23
 8009d3c:	3a86      	subs	r2, #134	@ 0x86
 8009d3e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d4a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009df4 <__ieee754_rem_pio2f+0x258>
 8009d4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d56:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009d5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009d62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009d66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d6a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7a:	edcd 7a05 	vstr	s15, [sp, #20]
 8009d7e:	d11e      	bne.n	8009dbe <__ieee754_rem_pio2f+0x222>
 8009d80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	bf0c      	ite	eq
 8009d8a:	2301      	moveq	r3, #1
 8009d8c:	2302      	movne	r3, #2
 8009d8e:	491a      	ldr	r1, [pc, #104]	@ (8009df8 <__ieee754_rem_pio2f+0x25c>)
 8009d90:	9101      	str	r1, [sp, #4]
 8009d92:	2102      	movs	r1, #2
 8009d94:	9100      	str	r1, [sp, #0]
 8009d96:	a803      	add	r0, sp, #12
 8009d98:	4621      	mov	r1, r4
 8009d9a:	f000 f837 	bl	8009e0c <__kernel_rem_pio2f>
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	f6bf af2f 	bge.w	8009c02 <__ieee754_rem_pio2f+0x66>
 8009da4:	edd4 7a00 	vldr	s15, [r4]
 8009da8:	eef1 7a67 	vneg.f32	s15, s15
 8009dac:	edc4 7a00 	vstr	s15, [r4]
 8009db0:	edd4 7a01 	vldr	s15, [r4, #4]
 8009db4:	eef1 7a67 	vneg.f32	s15, s15
 8009db8:	edc4 7a01 	vstr	s15, [r4, #4]
 8009dbc:	e782      	b.n	8009cc4 <__ieee754_rem_pio2f+0x128>
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e7e5      	b.n	8009d8e <__ieee754_rem_pio2f+0x1f2>
 8009dc2:	bf00      	nop
 8009dc4:	3f490fd8 	.word	0x3f490fd8
 8009dc8:	4016cbe3 	.word	0x4016cbe3
 8009dcc:	3fc90f80 	.word	0x3fc90f80
 8009dd0:	3fc90fd0 	.word	0x3fc90fd0
 8009dd4:	37354400 	.word	0x37354400
 8009dd8:	37354443 	.word	0x37354443
 8009ddc:	2e85a308 	.word	0x2e85a308
 8009de0:	43490f80 	.word	0x43490f80
 8009de4:	3f22f984 	.word	0x3f22f984
 8009de8:	08010b5c 	.word	0x08010b5c
 8009dec:	2e85a300 	.word	0x2e85a300
 8009df0:	248d3132 	.word	0x248d3132
 8009df4:	43800000 	.word	0x43800000
 8009df8:	08010bdc 	.word	0x08010bdc

08009dfc <fabsf>:
 8009dfc:	ee10 3a10 	vmov	r3, s0
 8009e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e04:	ee00 3a10 	vmov	s0, r3
 8009e08:	4770      	bx	lr
	...

08009e0c <__kernel_rem_pio2f>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	ed2d 8b04 	vpush	{d8-d9}
 8009e14:	b0d9      	sub	sp, #356	@ 0x164
 8009e16:	4690      	mov	r8, r2
 8009e18:	9001      	str	r0, [sp, #4]
 8009e1a:	4ab9      	ldr	r2, [pc, #740]	@ (800a100 <__kernel_rem_pio2f+0x2f4>)
 8009e1c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009e1e:	f118 0f04 	cmn.w	r8, #4
 8009e22:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009e26:	460f      	mov	r7, r1
 8009e28:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e2c:	db27      	blt.n	8009e7e <__kernel_rem_pio2f+0x72>
 8009e2e:	f1b8 0203 	subs.w	r2, r8, #3
 8009e32:	bf48      	it	mi
 8009e34:	f108 0204 	addmi.w	r2, r8, #4
 8009e38:	10d2      	asrs	r2, r2, #3
 8009e3a:	1c55      	adds	r5, r2, #1
 8009e3c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009e3e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800a110 <__kernel_rem_pio2f+0x304>
 8009e42:	00e8      	lsls	r0, r5, #3
 8009e44:	eba2 060b 	sub.w	r6, r2, fp
 8009e48:	9002      	str	r0, [sp, #8]
 8009e4a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009e4e:	eb0a 0c0b 	add.w	ip, sl, fp
 8009e52:	ac1c      	add	r4, sp, #112	@ 0x70
 8009e54:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009e58:	2000      	movs	r0, #0
 8009e5a:	4560      	cmp	r0, ip
 8009e5c:	dd11      	ble.n	8009e82 <__kernel_rem_pio2f+0x76>
 8009e5e:	a91c      	add	r1, sp, #112	@ 0x70
 8009e60:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009e64:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009e68:	f04f 0c00 	mov.w	ip, #0
 8009e6c:	45d4      	cmp	ip, sl
 8009e6e:	dc27      	bgt.n	8009ec0 <__kernel_rem_pio2f+0xb4>
 8009e70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009e74:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800a110 <__kernel_rem_pio2f+0x304>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	e016      	b.n	8009eac <__kernel_rem_pio2f+0xa0>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	e7db      	b.n	8009e3a <__kernel_rem_pio2f+0x2e>
 8009e82:	42c6      	cmn	r6, r0
 8009e84:	bf5d      	ittte	pl
 8009e86:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009e8a:	ee07 1a90 	vmovpl	s15, r1
 8009e8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009e92:	eef0 7a47 	vmovmi.f32	s15, s14
 8009e96:	ece4 7a01 	vstmia	r4!, {s15}
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	e7dd      	b.n	8009e5a <__kernel_rem_pio2f+0x4e>
 8009e9e:	ecfe 6a01 	vldmia	lr!, {s13}
 8009ea2:	ed96 7a00 	vldr	s14, [r6]
 8009ea6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009eaa:	3401      	adds	r4, #1
 8009eac:	455c      	cmp	r4, fp
 8009eae:	f1a6 0604 	sub.w	r6, r6, #4
 8009eb2:	ddf4      	ble.n	8009e9e <__kernel_rem_pio2f+0x92>
 8009eb4:	ece9 7a01 	vstmia	r9!, {s15}
 8009eb8:	f10c 0c01 	add.w	ip, ip, #1
 8009ebc:	3004      	adds	r0, #4
 8009ebe:	e7d5      	b.n	8009e6c <__kernel_rem_pio2f+0x60>
 8009ec0:	a908      	add	r1, sp, #32
 8009ec2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ec6:	9104      	str	r1, [sp, #16]
 8009ec8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009eca:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800a10c <__kernel_rem_pio2f+0x300>
 8009ece:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800a108 <__kernel_rem_pio2f+0x2fc>
 8009ed2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009ed6:	9203      	str	r2, [sp, #12]
 8009ed8:	4654      	mov	r4, sl
 8009eda:	00a2      	lsls	r2, r4, #2
 8009edc:	9205      	str	r2, [sp, #20]
 8009ede:	aa58      	add	r2, sp, #352	@ 0x160
 8009ee0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009ee4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009ee8:	a944      	add	r1, sp, #272	@ 0x110
 8009eea:	aa08      	add	r2, sp, #32
 8009eec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009ef0:	4694      	mov	ip, r2
 8009ef2:	4626      	mov	r6, r4
 8009ef4:	2e00      	cmp	r6, #0
 8009ef6:	f1a0 0004 	sub.w	r0, r0, #4
 8009efa:	dc4c      	bgt.n	8009f96 <__kernel_rem_pio2f+0x18a>
 8009efc:	4628      	mov	r0, r5
 8009efe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f02:	f000 f9f5 	bl	800a2f0 <scalbnf>
 8009f06:	eeb0 8a40 	vmov.f32	s16, s0
 8009f0a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009f0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009f12:	f000 fa53 	bl	800a3bc <floorf>
 8009f16:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009f1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009f28:	ee17 9a90 	vmov	r9, s15
 8009f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f30:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009f34:	dd41      	ble.n	8009fba <__kernel_rem_pio2f+0x1ae>
 8009f36:	f104 3cff 	add.w	ip, r4, #4294967295
 8009f3a:	a908      	add	r1, sp, #32
 8009f3c:	f1c5 0e08 	rsb	lr, r5, #8
 8009f40:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009f44:	fa46 f00e 	asr.w	r0, r6, lr
 8009f48:	4481      	add	r9, r0
 8009f4a:	fa00 f00e 	lsl.w	r0, r0, lr
 8009f4e:	1a36      	subs	r6, r6, r0
 8009f50:	f1c5 0007 	rsb	r0, r5, #7
 8009f54:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009f58:	4106      	asrs	r6, r0
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	dd3c      	ble.n	8009fd8 <__kernel_rem_pio2f+0x1cc>
 8009f5e:	f04f 0e00 	mov.w	lr, #0
 8009f62:	f109 0901 	add.w	r9, r9, #1
 8009f66:	4670      	mov	r0, lr
 8009f68:	4574      	cmp	r4, lr
 8009f6a:	dc68      	bgt.n	800a03e <__kernel_rem_pio2f+0x232>
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	dd03      	ble.n	8009f78 <__kernel_rem_pio2f+0x16c>
 8009f70:	2d01      	cmp	r5, #1
 8009f72:	d074      	beq.n	800a05e <__kernel_rem_pio2f+0x252>
 8009f74:	2d02      	cmp	r5, #2
 8009f76:	d07d      	beq.n	800a074 <__kernel_rem_pio2f+0x268>
 8009f78:	2e02      	cmp	r6, #2
 8009f7a:	d12d      	bne.n	8009fd8 <__kernel_rem_pio2f+0x1cc>
 8009f7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009f80:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009f84:	b340      	cbz	r0, 8009fd8 <__kernel_rem_pio2f+0x1cc>
 8009f86:	4628      	mov	r0, r5
 8009f88:	9306      	str	r3, [sp, #24]
 8009f8a:	f000 f9b1 	bl	800a2f0 <scalbnf>
 8009f8e:	9b06      	ldr	r3, [sp, #24]
 8009f90:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009f94:	e020      	b.n	8009fd8 <__kernel_rem_pio2f+0x1cc>
 8009f96:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009f9a:	3e01      	subs	r6, #1
 8009f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fa4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009fa8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009fac:	ecac 0a01 	vstmia	ip!, {s0}
 8009fb0:	ed90 0a00 	vldr	s0, [r0]
 8009fb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009fb8:	e79c      	b.n	8009ef4 <__kernel_rem_pio2f+0xe8>
 8009fba:	d105      	bne.n	8009fc8 <__kernel_rem_pio2f+0x1bc>
 8009fbc:	1e60      	subs	r0, r4, #1
 8009fbe:	a908      	add	r1, sp, #32
 8009fc0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8009fc4:	11f6      	asrs	r6, r6, #7
 8009fc6:	e7c8      	b.n	8009f5a <__kernel_rem_pio2f+0x14e>
 8009fc8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009fcc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd4:	da31      	bge.n	800a03a <__kernel_rem_pio2f+0x22e>
 8009fd6:	2600      	movs	r6, #0
 8009fd8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe0:	f040 8098 	bne.w	800a114 <__kernel_rem_pio2f+0x308>
 8009fe4:	1e60      	subs	r0, r4, #1
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4550      	cmp	r0, sl
 8009fea:	da4b      	bge.n	800a084 <__kernel_rem_pio2f+0x278>
 8009fec:	2a00      	cmp	r2, #0
 8009fee:	d065      	beq.n	800a0bc <__kernel_rem_pio2f+0x2b0>
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	ab08      	add	r3, sp, #32
 8009ff4:	3d08      	subs	r5, #8
 8009ff6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0f8      	beq.n	8009ff0 <__kernel_rem_pio2f+0x1e4>
 8009ffe:	4628      	mov	r0, r5
 800a000:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a004:	f000 f974 	bl	800a2f0 <scalbnf>
 800a008:	1c63      	adds	r3, r4, #1
 800a00a:	aa44      	add	r2, sp, #272	@ 0x110
 800a00c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a10c <__kernel_rem_pio2f+0x300>
 800a010:	0099      	lsls	r1, r3, #2
 800a012:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a016:	4623      	mov	r3, r4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f280 80a9 	bge.w	800a170 <__kernel_rem_pio2f+0x364>
 800a01e:	4623      	mov	r3, r4
 800a020:	2b00      	cmp	r3, #0
 800a022:	f2c0 80c7 	blt.w	800a1b4 <__kernel_rem_pio2f+0x3a8>
 800a026:	aa44      	add	r2, sp, #272	@ 0x110
 800a028:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a02c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800a104 <__kernel_rem_pio2f+0x2f8>
 800a030:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a110 <__kernel_rem_pio2f+0x304>
 800a034:	2000      	movs	r0, #0
 800a036:	1ae2      	subs	r2, r4, r3
 800a038:	e0b1      	b.n	800a19e <__kernel_rem_pio2f+0x392>
 800a03a:	2602      	movs	r6, #2
 800a03c:	e78f      	b.n	8009f5e <__kernel_rem_pio2f+0x152>
 800a03e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a042:	b948      	cbnz	r0, 800a058 <__kernel_rem_pio2f+0x24c>
 800a044:	b121      	cbz	r1, 800a050 <__kernel_rem_pio2f+0x244>
 800a046:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800a04a:	f842 1c04 	str.w	r1, [r2, #-4]
 800a04e:	2101      	movs	r1, #1
 800a050:	f10e 0e01 	add.w	lr, lr, #1
 800a054:	4608      	mov	r0, r1
 800a056:	e787      	b.n	8009f68 <__kernel_rem_pio2f+0x15c>
 800a058:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800a05c:	e7f5      	b.n	800a04a <__kernel_rem_pio2f+0x23e>
 800a05e:	f104 3cff 	add.w	ip, r4, #4294967295
 800a062:	aa08      	add	r2, sp, #32
 800a064:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a068:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a06c:	a908      	add	r1, sp, #32
 800a06e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a072:	e781      	b.n	8009f78 <__kernel_rem_pio2f+0x16c>
 800a074:	f104 3cff 	add.w	ip, r4, #4294967295
 800a078:	aa08      	add	r2, sp, #32
 800a07a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a07e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a082:	e7f3      	b.n	800a06c <__kernel_rem_pio2f+0x260>
 800a084:	a908      	add	r1, sp, #32
 800a086:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a08a:	3801      	subs	r0, #1
 800a08c:	430a      	orrs	r2, r1
 800a08e:	e7ab      	b.n	8009fe8 <__kernel_rem_pio2f+0x1dc>
 800a090:	3201      	adds	r2, #1
 800a092:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a096:	2e00      	cmp	r6, #0
 800a098:	d0fa      	beq.n	800a090 <__kernel_rem_pio2f+0x284>
 800a09a:	9905      	ldr	r1, [sp, #20]
 800a09c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800a0a0:	eb0d 0001 	add.w	r0, sp, r1
 800a0a4:	18e6      	adds	r6, r4, r3
 800a0a6:	a91c      	add	r1, sp, #112	@ 0x70
 800a0a8:	f104 0c01 	add.w	ip, r4, #1
 800a0ac:	384c      	subs	r0, #76	@ 0x4c
 800a0ae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800a0b2:	4422      	add	r2, r4
 800a0b4:	4562      	cmp	r2, ip
 800a0b6:	da04      	bge.n	800a0c2 <__kernel_rem_pio2f+0x2b6>
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	e70e      	b.n	8009eda <__kernel_rem_pio2f+0xce>
 800a0bc:	9804      	ldr	r0, [sp, #16]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	e7e7      	b.n	800a092 <__kernel_rem_pio2f+0x286>
 800a0c2:	9903      	ldr	r1, [sp, #12]
 800a0c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a0c8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800a0cc:	9105      	str	r1, [sp, #20]
 800a0ce:	ee07 1a90 	vmov	s15, r1
 800a0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0d6:	2400      	movs	r4, #0
 800a0d8:	ece6 7a01 	vstmia	r6!, {s15}
 800a0dc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a110 <__kernel_rem_pio2f+0x304>
 800a0e0:	46b1      	mov	r9, r6
 800a0e2:	455c      	cmp	r4, fp
 800a0e4:	dd04      	ble.n	800a0f0 <__kernel_rem_pio2f+0x2e4>
 800a0e6:	ece0 7a01 	vstmia	r0!, {s15}
 800a0ea:	f10c 0c01 	add.w	ip, ip, #1
 800a0ee:	e7e1      	b.n	800a0b4 <__kernel_rem_pio2f+0x2a8>
 800a0f0:	ecfe 6a01 	vldmia	lr!, {s13}
 800a0f4:	ed39 7a01 	vldmdb	r9!, {s14}
 800a0f8:	3401      	adds	r4, #1
 800a0fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a0fe:	e7f0      	b.n	800a0e2 <__kernel_rem_pio2f+0x2d6>
 800a100:	08010f20 	.word	0x08010f20
 800a104:	08010ef4 	.word	0x08010ef4
 800a108:	43800000 	.word	0x43800000
 800a10c:	3b800000 	.word	0x3b800000
 800a110:	00000000 	.word	0x00000000
 800a114:	9b02      	ldr	r3, [sp, #8]
 800a116:	eeb0 0a48 	vmov.f32	s0, s16
 800a11a:	eba3 0008 	sub.w	r0, r3, r8
 800a11e:	f000 f8e7 	bl	800a2f0 <scalbnf>
 800a122:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800a108 <__kernel_rem_pio2f+0x2fc>
 800a126:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12e:	db19      	blt.n	800a164 <__kernel_rem_pio2f+0x358>
 800a130:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800a10c <__kernel_rem_pio2f+0x300>
 800a134:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a138:	aa08      	add	r2, sp, #32
 800a13a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a13e:	3508      	adds	r5, #8
 800a140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a144:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a14c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a150:	ee10 3a10 	vmov	r3, s0
 800a154:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a158:	ee17 3a90 	vmov	r3, s15
 800a15c:	3401      	adds	r4, #1
 800a15e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a162:	e74c      	b.n	8009ffe <__kernel_rem_pio2f+0x1f2>
 800a164:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a168:	aa08      	add	r2, sp, #32
 800a16a:	ee10 3a10 	vmov	r3, s0
 800a16e:	e7f6      	b.n	800a15e <__kernel_rem_pio2f+0x352>
 800a170:	a808      	add	r0, sp, #32
 800a172:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a176:	9001      	str	r0, [sp, #4]
 800a178:	ee07 0a90 	vmov	s15, r0
 800a17c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a180:	3b01      	subs	r3, #1
 800a182:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a186:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a18a:	ed62 7a01 	vstmdb	r2!, {s15}
 800a18e:	e743      	b.n	800a018 <__kernel_rem_pio2f+0x20c>
 800a190:	ecfc 6a01 	vldmia	ip!, {s13}
 800a194:	ecb5 7a01 	vldmia	r5!, {s14}
 800a198:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a19c:	3001      	adds	r0, #1
 800a19e:	4550      	cmp	r0, sl
 800a1a0:	dc01      	bgt.n	800a1a6 <__kernel_rem_pio2f+0x39a>
 800a1a2:	4282      	cmp	r2, r0
 800a1a4:	daf4      	bge.n	800a190 <__kernel_rem_pio2f+0x384>
 800a1a6:	a858      	add	r0, sp, #352	@ 0x160
 800a1a8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a1ac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	e735      	b.n	800a020 <__kernel_rem_pio2f+0x214>
 800a1b4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	dc09      	bgt.n	800a1ce <__kernel_rem_pio2f+0x3c2>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dc2b      	bgt.n	800a216 <__kernel_rem_pio2f+0x40a>
 800a1be:	d044      	beq.n	800a24a <__kernel_rem_pio2f+0x43e>
 800a1c0:	f009 0007 	and.w	r0, r9, #7
 800a1c4:	b059      	add	sp, #356	@ 0x164
 800a1c6:	ecbd 8b04 	vpop	{d8-d9}
 800a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ce:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d1f5      	bne.n	800a1c0 <__kernel_rem_pio2f+0x3b4>
 800a1d4:	aa30      	add	r2, sp, #192	@ 0xc0
 800a1d6:	1f0b      	subs	r3, r1, #4
 800a1d8:	4413      	add	r3, r2
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4620      	mov	r0, r4
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f1a2 0204 	sub.w	r2, r2, #4
 800a1e4:	dc52      	bgt.n	800a28c <__kernel_rem_pio2f+0x480>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	2a01      	cmp	r2, #1
 800a1ea:	f1a3 0304 	sub.w	r3, r3, #4
 800a1ee:	dc5d      	bgt.n	800a2ac <__kernel_rem_pio2f+0x4a0>
 800a1f0:	ab30      	add	r3, sp, #192	@ 0xc0
 800a1f2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800a110 <__kernel_rem_pio2f+0x304>
 800a1f6:	440b      	add	r3, r1
 800a1f8:	2c01      	cmp	r4, #1
 800a1fa:	dc67      	bgt.n	800a2cc <__kernel_rem_pio2f+0x4c0>
 800a1fc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a200:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800a204:	2e00      	cmp	r6, #0
 800a206:	d167      	bne.n	800a2d8 <__kernel_rem_pio2f+0x4cc>
 800a208:	edc7 6a00 	vstr	s13, [r7]
 800a20c:	ed87 7a01 	vstr	s14, [r7, #4]
 800a210:	edc7 7a02 	vstr	s15, [r7, #8]
 800a214:	e7d4      	b.n	800a1c0 <__kernel_rem_pio2f+0x3b4>
 800a216:	ab30      	add	r3, sp, #192	@ 0xc0
 800a218:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800a110 <__kernel_rem_pio2f+0x304>
 800a21c:	440b      	add	r3, r1
 800a21e:	4622      	mov	r2, r4
 800a220:	2a00      	cmp	r2, #0
 800a222:	da24      	bge.n	800a26e <__kernel_rem_pio2f+0x462>
 800a224:	b34e      	cbz	r6, 800a27a <__kernel_rem_pio2f+0x46e>
 800a226:	eef1 7a47 	vneg.f32	s15, s14
 800a22a:	edc7 7a00 	vstr	s15, [r7]
 800a22e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800a232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a236:	aa31      	add	r2, sp, #196	@ 0xc4
 800a238:	2301      	movs	r3, #1
 800a23a:	429c      	cmp	r4, r3
 800a23c:	da20      	bge.n	800a280 <__kernel_rem_pio2f+0x474>
 800a23e:	b10e      	cbz	r6, 800a244 <__kernel_rem_pio2f+0x438>
 800a240:	eef1 7a67 	vneg.f32	s15, s15
 800a244:	edc7 7a01 	vstr	s15, [r7, #4]
 800a248:	e7ba      	b.n	800a1c0 <__kernel_rem_pio2f+0x3b4>
 800a24a:	ab30      	add	r3, sp, #192	@ 0xc0
 800a24c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800a110 <__kernel_rem_pio2f+0x304>
 800a250:	440b      	add	r3, r1
 800a252:	2c00      	cmp	r4, #0
 800a254:	da05      	bge.n	800a262 <__kernel_rem_pio2f+0x456>
 800a256:	b10e      	cbz	r6, 800a25c <__kernel_rem_pio2f+0x450>
 800a258:	eef1 7a67 	vneg.f32	s15, s15
 800a25c:	edc7 7a00 	vstr	s15, [r7]
 800a260:	e7ae      	b.n	800a1c0 <__kernel_rem_pio2f+0x3b4>
 800a262:	ed33 7a01 	vldmdb	r3!, {s14}
 800a266:	3c01      	subs	r4, #1
 800a268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a26c:	e7f1      	b.n	800a252 <__kernel_rem_pio2f+0x446>
 800a26e:	ed73 7a01 	vldmdb	r3!, {s15}
 800a272:	3a01      	subs	r2, #1
 800a274:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a278:	e7d2      	b.n	800a220 <__kernel_rem_pio2f+0x414>
 800a27a:	eef0 7a47 	vmov.f32	s15, s14
 800a27e:	e7d4      	b.n	800a22a <__kernel_rem_pio2f+0x41e>
 800a280:	ecb2 7a01 	vldmia	r2!, {s14}
 800a284:	3301      	adds	r3, #1
 800a286:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a28a:	e7d6      	b.n	800a23a <__kernel_rem_pio2f+0x42e>
 800a28c:	edd2 7a00 	vldr	s15, [r2]
 800a290:	edd2 6a01 	vldr	s13, [r2, #4]
 800a294:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a298:	3801      	subs	r0, #1
 800a29a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a29e:	ed82 7a00 	vstr	s14, [r2]
 800a2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a6:	edc2 7a01 	vstr	s15, [r2, #4]
 800a2aa:	e798      	b.n	800a1de <__kernel_rem_pio2f+0x3d2>
 800a2ac:	edd3 7a00 	vldr	s15, [r3]
 800a2b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800a2b4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a2b8:	3a01      	subs	r2, #1
 800a2ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2be:	ed83 7a00 	vstr	s14, [r3]
 800a2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2c6:	edc3 7a01 	vstr	s15, [r3, #4]
 800a2ca:	e78d      	b.n	800a1e8 <__kernel_rem_pio2f+0x3dc>
 800a2cc:	ed33 7a01 	vldmdb	r3!, {s14}
 800a2d0:	3c01      	subs	r4, #1
 800a2d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d6:	e78f      	b.n	800a1f8 <__kernel_rem_pio2f+0x3ec>
 800a2d8:	eef1 6a66 	vneg.f32	s13, s13
 800a2dc:	eeb1 7a47 	vneg.f32	s14, s14
 800a2e0:	edc7 6a00 	vstr	s13, [r7]
 800a2e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800a2e8:	eef1 7a67 	vneg.f32	s15, s15
 800a2ec:	e790      	b.n	800a210 <__kernel_rem_pio2f+0x404>
 800a2ee:	bf00      	nop

0800a2f0 <scalbnf>:
 800a2f0:	ee10 3a10 	vmov	r3, s0
 800a2f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a2f8:	d02b      	beq.n	800a352 <scalbnf+0x62>
 800a2fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a2fe:	d302      	bcc.n	800a306 <scalbnf+0x16>
 800a300:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a304:	4770      	bx	lr
 800a306:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a30a:	d123      	bne.n	800a354 <scalbnf+0x64>
 800a30c:	4b24      	ldr	r3, [pc, #144]	@ (800a3a0 <scalbnf+0xb0>)
 800a30e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a3a4 <scalbnf+0xb4>
 800a312:	4298      	cmp	r0, r3
 800a314:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a318:	db17      	blt.n	800a34a <scalbnf+0x5a>
 800a31a:	ee10 3a10 	vmov	r3, s0
 800a31e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a322:	3a19      	subs	r2, #25
 800a324:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a328:	4288      	cmp	r0, r1
 800a32a:	dd15      	ble.n	800a358 <scalbnf+0x68>
 800a32c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a3a8 <scalbnf+0xb8>
 800a330:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a3ac <scalbnf+0xbc>
 800a334:	ee10 3a10 	vmov	r3, s0
 800a338:	eeb0 7a67 	vmov.f32	s14, s15
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bfb8      	it	lt
 800a340:	eef0 7a66 	vmovlt.f32	s15, s13
 800a344:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a348:	4770      	bx	lr
 800a34a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a3b0 <scalbnf+0xc0>
 800a34e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a352:	4770      	bx	lr
 800a354:	0dd2      	lsrs	r2, r2, #23
 800a356:	e7e5      	b.n	800a324 <scalbnf+0x34>
 800a358:	4410      	add	r0, r2
 800a35a:	28fe      	cmp	r0, #254	@ 0xfe
 800a35c:	dce6      	bgt.n	800a32c <scalbnf+0x3c>
 800a35e:	2800      	cmp	r0, #0
 800a360:	dd06      	ble.n	800a370 <scalbnf+0x80>
 800a362:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a366:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a36a:	ee00 3a10 	vmov	s0, r3
 800a36e:	4770      	bx	lr
 800a370:	f110 0f16 	cmn.w	r0, #22
 800a374:	da09      	bge.n	800a38a <scalbnf+0x9a>
 800a376:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a3b0 <scalbnf+0xc0>
 800a37a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a3b4 <scalbnf+0xc4>
 800a37e:	ee10 3a10 	vmov	r3, s0
 800a382:	eeb0 7a67 	vmov.f32	s14, s15
 800a386:	2b00      	cmp	r3, #0
 800a388:	e7d9      	b.n	800a33e <scalbnf+0x4e>
 800a38a:	3019      	adds	r0, #25
 800a38c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a390:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a394:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a3b8 <scalbnf+0xc8>
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	e7d7      	b.n	800a34e <scalbnf+0x5e>
 800a39e:	bf00      	nop
 800a3a0:	ffff3cb0 	.word	0xffff3cb0
 800a3a4:	4c000000 	.word	0x4c000000
 800a3a8:	7149f2ca 	.word	0x7149f2ca
 800a3ac:	f149f2ca 	.word	0xf149f2ca
 800a3b0:	0da24260 	.word	0x0da24260
 800a3b4:	8da24260 	.word	0x8da24260
 800a3b8:	33000000 	.word	0x33000000

0800a3bc <floorf>:
 800a3bc:	ee10 3a10 	vmov	r3, s0
 800a3c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a3c4:	3a7f      	subs	r2, #127	@ 0x7f
 800a3c6:	2a16      	cmp	r2, #22
 800a3c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3cc:	dc2b      	bgt.n	800a426 <floorf+0x6a>
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	da12      	bge.n	800a3f8 <floorf+0x3c>
 800a3d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a438 <floorf+0x7c>
 800a3d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a3da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e2:	dd06      	ble.n	800a3f2 <floorf+0x36>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da24      	bge.n	800a432 <floorf+0x76>
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	4b14      	ldr	r3, [pc, #80]	@ (800a43c <floorf+0x80>)
 800a3ec:	bf08      	it	eq
 800a3ee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a3f2:	ee00 3a10 	vmov	s0, r3
 800a3f6:	4770      	bx	lr
 800a3f8:	4911      	ldr	r1, [pc, #68]	@ (800a440 <floorf+0x84>)
 800a3fa:	4111      	asrs	r1, r2
 800a3fc:	420b      	tst	r3, r1
 800a3fe:	d0fa      	beq.n	800a3f6 <floorf+0x3a>
 800a400:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a438 <floorf+0x7c>
 800a404:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a408:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a410:	ddef      	ble.n	800a3f2 <floorf+0x36>
 800a412:	2b00      	cmp	r3, #0
 800a414:	bfbe      	ittt	lt
 800a416:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a41a:	fa40 f202 	asrlt.w	r2, r0, r2
 800a41e:	189b      	addlt	r3, r3, r2
 800a420:	ea23 0301 	bic.w	r3, r3, r1
 800a424:	e7e5      	b.n	800a3f2 <floorf+0x36>
 800a426:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a42a:	d3e4      	bcc.n	800a3f6 <floorf+0x3a>
 800a42c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a430:	4770      	bx	lr
 800a432:	2300      	movs	r3, #0
 800a434:	e7dd      	b.n	800a3f2 <floorf+0x36>
 800a436:	bf00      	nop
 800a438:	7149f2ca 	.word	0x7149f2ca
 800a43c:	bf800000 	.word	0xbf800000
 800a440:	007fffff 	.word	0x007fffff

0800a444 <_init>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr

0800a450 <_fini>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr
