
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000063d0  08006eac  08006eac  00007eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d27c  0800d27c  0000e27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d284  0800d284  0000e284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d288  0800d288  0000e288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000120  20000000  0800d28c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00024d10  20000120  0800d3ac  0000f120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  20024e30  0800d3ac  0000fe30  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000f120  2**0
                  CONTENTS, READONLY
 10 .debug_info   000247f3  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050c0  00000000  00000000  00033943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000d115  00000000  00000000  00038a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001540  00000000  00000000  00045b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014f5  00000000  00000000  00047058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002bc30  00000000  00000000  0004854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025f42  00000000  00000000  0007417d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001104a4  00000000  00000000  0009a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001aa563  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000449c  00000000  00000000  001aa5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a0  00000000  00000000  001aea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000120 	.word	0x20000120
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e94 	.word	0x08006e94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000124 	.word	0x20000124
 800020c:	08006e94 	.word	0x08006e94

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 80005b0:	2901      	cmp	r1, #1
{
 80005b2:	b510      	push	{r4, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005b4:	b2c4      	uxtb	r4, r0
  switch (Output) 
 80005b6:	d00f      	beq.n	80005d8 <wm8994_SetOutputMode+0x28>
 80005b8:	2903      	cmp	r1, #3
 80005ba:	d12d      	bne.n	8000618 <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80005bc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80005c0:	2105      	movs	r1, #5
 80005c2:	4620      	mov	r0, r4
 80005c4:	f000 fd9e 	bl	8001104 <AUDIO_IO_Write>
 80005c8:	2201      	movs	r2, #1
 80005ca:	f240 6101 	movw	r1, #1537	@ 0x601
 80005ce:	4620      	mov	r0, r4
 80005d0:	f000 fd98 	bl	8001104 <AUDIO_IO_Write>
 80005d4:	2201      	movs	r2, #1
 80005d6:	e00c      	b.n	80005f2 <wm8994_SetOutputMode+0x42>
 80005d8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80005dc:	2105      	movs	r1, #5
 80005de:	4620      	mov	r0, r4
 80005e0:	f000 fd90 	bl	8001104 <AUDIO_IO_Write>
 80005e4:	2200      	movs	r2, #0
 80005e6:	f240 6101 	movw	r1, #1537	@ 0x601
 80005ea:	4620      	mov	r0, r4
 80005ec:	f000 fd8a 	bl	8001104 <AUDIO_IO_Write>
 80005f0:	2200      	movs	r2, #0
 80005f2:	f240 6102 	movw	r1, #1538	@ 0x602
 80005f6:	4620      	mov	r0, r4
 80005f8:	f000 fd84 	bl	8001104 <AUDIO_IO_Write>
 80005fc:	2202      	movs	r2, #2
 80005fe:	f240 6104 	movw	r1, #1540	@ 0x604
 8000602:	4620      	mov	r0, r4
 8000604:	f000 fd7e 	bl	8001104 <AUDIO_IO_Write>
 8000608:	2202      	movs	r2, #2
 800060a:	4620      	mov	r0, r4
 800060c:	f240 6105 	movw	r1, #1541	@ 0x605
 8000610:	f000 fd78 	bl	8001104 <AUDIO_IO_Write>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000618:	f240 3203 	movw	r2, #771	@ 0x303
 800061c:	2105      	movs	r1, #5
 800061e:	4620      	mov	r0, r4
 8000620:	f000 fd70 	bl	8001104 <AUDIO_IO_Write>
 8000624:	2201      	movs	r2, #1
 8000626:	f240 6101 	movw	r1, #1537	@ 0x601
 800062a:	4620      	mov	r0, r4
 800062c:	f000 fd6a 	bl	8001104 <AUDIO_IO_Write>
 8000630:	2201      	movs	r2, #1
 8000632:	f240 6102 	movw	r1, #1538	@ 0x602
 8000636:	4620      	mov	r0, r4
 8000638:	f000 fd64 	bl	8001104 <AUDIO_IO_Write>
 800063c:	2200      	movs	r2, #0
 800063e:	f240 6104 	movw	r1, #1540	@ 0x604
 8000642:	4620      	mov	r0, r4
 8000644:	f000 fd5e 	bl	8001104 <AUDIO_IO_Write>
 8000648:	2200      	movs	r2, #0
 800064a:	e7de      	b.n	800060a <wm8994_SetOutputMode+0x5a>

0800064c <wm8994_SetFrequency>:
{
 800064c:	b508      	push	{r3, lr}
  switch (AudioFreq)
 800064e:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000652:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 8000654:	4299      	cmp	r1, r3
 8000656:	d025      	beq.n	80006a4 <wm8994_SetFrequency+0x58>
 8000658:	d80b      	bhi.n	8000672 <wm8994_SetFrequency+0x26>
 800065a:	f642 3311 	movw	r3, #11025	@ 0x2b11
 800065e:	4299      	cmp	r1, r3
 8000660:	d01e      	beq.n	80006a0 <wm8994_SetFrequency+0x54>
 8000662:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 8000666:	d017      	beq.n	8000698 <wm8994_SetFrequency+0x4c>
 8000668:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 800066c:	d00d      	beq.n	800068a <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800066e:	2283      	movs	r2, #131	@ 0x83
 8000670:	e00c      	b.n	800068c <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 8000672:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000676:	4299      	cmp	r1, r3
 8000678:	d016      	beq.n	80006a8 <wm8994_SetFrequency+0x5c>
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <wm8994_SetFrequency+0x60>)
 800067c:	4299      	cmp	r1, r3
 800067e:	d00d      	beq.n	800069c <wm8994_SetFrequency+0x50>
 8000680:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 8000684:	d1f3      	bne.n	800066e <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000686:	2263      	movs	r2, #99	@ 0x63
 8000688:	e000      	b.n	800068c <wm8994_SetFrequency+0x40>
 800068a:	2203      	movs	r2, #3
 800068c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000690:	f000 fd38 	bl	8001104 <AUDIO_IO_Write>
}
 8000694:	2000      	movs	r0, #0
 8000696:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000698:	2233      	movs	r2, #51	@ 0x33
 800069a:	e7f7      	b.n	800068c <wm8994_SetFrequency+0x40>
 800069c:	22a3      	movs	r2, #163	@ 0xa3
 800069e:	e7f5      	b.n	800068c <wm8994_SetFrequency+0x40>
 80006a0:	2213      	movs	r2, #19
 80006a2:	e7f3      	b.n	800068c <wm8994_SetFrequency+0x40>
 80006a4:	2243      	movs	r2, #67	@ 0x43
 80006a6:	e7f1      	b.n	800068c <wm8994_SetFrequency+0x40>
 80006a8:	2273      	movs	r2, #115	@ 0x73
 80006aa:	e7ef      	b.n	800068c <wm8994_SetFrequency+0x40>
 80006ac:	00017700 	.word	0x00017700

080006b0 <wm8994_Reset>:
 80006b0:	2200      	movs	r2, #0
 80006b2:	b2c0      	uxtb	r0, r0
{
 80006b4:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 80006b6:	4611      	mov	r1, r2
 80006b8:	f000 fd24 	bl	8001104 <AUDIO_IO_Write>
  outputEnabled = 0;
 80006bc:	4b02      	ldr	r3, [pc, #8]	@ (80006c8 <wm8994_Reset+0x18>)
 80006be:	2000      	movs	r0, #0
  inputEnabled=0;
 80006c0:	e9c3 0000 	strd	r0, r0, [r3]
}
 80006c4:	bd08      	pop	{r3, pc}
 80006c6:	bf00      	nop
 80006c8:	2000013c 	.word	0x2000013c

080006cc <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 80006cc:	f000 bd18 	b.w	8001100 <AUDIO_IO_DeInit>

080006d0 <wm8994_ReadID>:
{
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80006d4:	f000 fd0e 	bl	80010f4 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80006d8:	2100      	movs	r1, #0
 80006da:	b2e0      	uxtb	r0, r4
 80006dc:	f000 fd26 	bl	800112c <AUDIO_IO_Read>
}
 80006e0:	bd10      	pop	{r4, pc}
	...

080006e4 <wm8994_SetMute>:
  if (outputEnabled != 0)
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <wm8994_SetMute+0x40>)
 80006e6:	681b      	ldr	r3, [r3, #0]
{
 80006e8:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 80006ea:	b183      	cbz	r3, 800070e <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 80006ec:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80006ee:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 80006f0:	d10f      	bne.n	8000712 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80006f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80006fa:	4620      	mov	r0, r4
 80006fc:	f000 fd02 	bl	8001104 <AUDIO_IO_Write>
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	f240 4122 	movw	r1, #1058	@ 0x422
 8000708:	4620      	mov	r0, r4
 800070a:	f000 fcfb 	bl	8001104 <AUDIO_IO_Write>
}
 800070e:	2000      	movs	r0, #0
 8000710:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000712:	2210      	movs	r2, #16
 8000714:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000718:	4620      	mov	r0, r4
 800071a:	f000 fcf3 	bl	8001104 <AUDIO_IO_Write>
 800071e:	2210      	movs	r2, #16
 8000720:	e7f0      	b.n	8000704 <wm8994_SetMute+0x20>
 8000722:	bf00      	nop
 8000724:	2000013c 	.word	0x2000013c

08000728 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000728:	2100      	movs	r1, #0
 800072a:	f7ff bfdb 	b.w	80006e4 <wm8994_SetMute>

0800072e <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800072e:	2100      	movs	r1, #0
 8000730:	f7ff bfd8 	b.w	80006e4 <wm8994_SetMute>

08000734 <wm8994_Pause>:
{  
 8000734:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000736:	2101      	movs	r1, #1
{  
 8000738:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800073a:	f7ff ffd3 	bl	80006e4 <wm8994_SetMute>
 800073e:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000740:	2201      	movs	r2, #1
 8000742:	b2e8      	uxtb	r0, r5
 8000744:	2102      	movs	r1, #2
 8000746:	f000 fcdd 	bl	8001104 <AUDIO_IO_Write>
}
 800074a:	4620      	mov	r0, r4
 800074c:	bd38      	pop	{r3, r4, r5, pc}
	...

08000750 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000750:	2964      	cmp	r1, #100	@ 0x64
{
 8000752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000756:	f04f 0764 	mov.w	r7, #100	@ 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800075a:	bf98      	it	ls
 800075c:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
  if (outputEnabled != 0)
 8000760:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000850 <wm8994_SetVolume+0x100>
{
 8000764:	4605      	mov	r5, r0
 8000766:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 8000768:	f8d9 6000 	ldr.w	r6, [r9]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800076c:	bf9c      	itt	ls
 800076e:	fbb3 f3f7 	udivls	r3, r3, r7
 8000772:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
 8000774:	b326      	cbz	r6, 80007c0 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 8000776:	2f3e      	cmp	r7, #62	@ 0x3e
 8000778:	d91d      	bls.n	80007b6 <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800077a:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800077c:	2100      	movs	r1, #0
 800077e:	f7ff ffb1 	bl	80006e4 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000782:	f240 127f 	movw	r2, #383	@ 0x17f
 8000786:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000788:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800078a:	4638      	mov	r0, r7
 800078c:	f000 fcba 	bl	8001104 <AUDIO_IO_Write>
 8000790:	f240 127f 	movw	r2, #383	@ 0x17f
 8000794:	211d      	movs	r1, #29
 8000796:	4638      	mov	r0, r7
 8000798:	f000 fcb4 	bl	8001104 <AUDIO_IO_Write>
 800079c:	f240 127f 	movw	r2, #383	@ 0x17f
 80007a0:	2126      	movs	r1, #38	@ 0x26
 80007a2:	4638      	mov	r0, r7
 80007a4:	f000 fcae 	bl	8001104 <AUDIO_IO_Write>
 80007a8:	f240 127f 	movw	r2, #383	@ 0x17f
 80007ac:	2127      	movs	r1, #39	@ 0x27
 80007ae:	4638      	mov	r0, r7
 80007b0:	f000 fca8 	bl	8001104 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80007b4:	e004      	b.n	80007c0 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 80007b6:	bb79      	cbnz	r1, 8000818 <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80007b8:	2101      	movs	r1, #1
 80007ba:	f7ff ff93 	bl	80006e4 <wm8994_SetMute>
 80007be:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80007c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80007c4:	b32b      	cbz	r3, 8000812 <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80007c6:	2c63      	cmp	r4, #99	@ 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80007c8:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80007ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80007ce:	bf9a      	itte	ls
 80007d0:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 80007d4:	2364      	movls	r3, #100	@ 0x64
 80007d6:	24ef      	movhi	r4, #239	@ 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 80007d8:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80007da:	bf9e      	ittt	ls
 80007dc:	0124      	lslls	r4, r4, #4
 80007de:	fbb4 f4f3 	udivls	r4, r4, r3
 80007e2:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80007e4:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 80007e8:	4622      	mov	r2, r4
 80007ea:	f000 fc8b 	bl	8001104 <AUDIO_IO_Write>
 80007ee:	4622      	mov	r2, r4
 80007f0:	f240 4101 	movw	r1, #1025	@ 0x401
 80007f4:	4628      	mov	r0, r5
 80007f6:	f000 fc85 	bl	8001104 <AUDIO_IO_Write>
 80007fa:	4622      	mov	r2, r4
 80007fc:	f240 4104 	movw	r1, #1028	@ 0x404
 8000800:	4628      	mov	r0, r5
 8000802:	f000 fc7f 	bl	8001104 <AUDIO_IO_Write>
 8000806:	4622      	mov	r2, r4
 8000808:	f240 4105 	movw	r1, #1029	@ 0x405
 800080c:	4628      	mov	r0, r5
 800080e:	f000 fc79 	bl	8001104 <AUDIO_IO_Write>
}
 8000812:	4630      	mov	r0, r6
 8000814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8000818:	fa5f f885 	uxtb.w	r8, r5
 800081c:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000820:	2100      	movs	r1, #0
 8000822:	f7ff ff5f 	bl	80006e4 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000826:	463a      	mov	r2, r7
 8000828:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800082a:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800082c:	4640      	mov	r0, r8
 800082e:	f000 fc69 	bl	8001104 <AUDIO_IO_Write>
 8000832:	463a      	mov	r2, r7
 8000834:	211d      	movs	r1, #29
 8000836:	4640      	mov	r0, r8
 8000838:	f000 fc64 	bl	8001104 <AUDIO_IO_Write>
 800083c:	463a      	mov	r2, r7
 800083e:	2126      	movs	r1, #38	@ 0x26
 8000840:	4640      	mov	r0, r8
 8000842:	f000 fc5f 	bl	8001104 <AUDIO_IO_Write>
 8000846:	463a      	mov	r2, r7
 8000848:	2127      	movs	r1, #39	@ 0x27
 800084a:	4640      	mov	r0, r8
 800084c:	e7b0      	b.n	80007b0 <wm8994_SetVolume+0x60>
 800084e:	bf00      	nop
 8000850:	2000013c 	.word	0x2000013c

08000854 <wm8994_Init>:
{
 8000854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	4681      	mov	r9, r0
 800085a:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800085c:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
{
 8000860:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000862:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000866:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8000868:	f000 fc44 	bl	80010f4 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 800086c:	2203      	movs	r2, #3
 800086e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000872:	4620      	mov	r0, r4
 8000874:	f000 fc46 	bl	8001104 <AUDIO_IO_Write>
 8000878:	2200      	movs	r2, #0
 800087a:	f640 0117 	movw	r1, #2071	@ 0x817
 800087e:	4620      	mov	r0, r4
 8000880:	f000 fc40 	bl	8001104 <AUDIO_IO_Write>
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800088a:	4620      	mov	r0, r4
 800088c:	f000 fc3a 	bl	8001104 <AUDIO_IO_Write>
 8000890:	226c      	movs	r2, #108	@ 0x6c
 8000892:	2139      	movs	r1, #57	@ 0x39
 8000894:	4620      	mov	r0, r4
 8000896:	f000 fc35 	bl	8001104 <AUDIO_IO_Write>
  if (input_device > 0)
 800089a:	2d00      	cmp	r5, #0
 800089c:	d062      	beq.n	8000964 <wm8994_Init+0x110>
 AUDIO_IO_Write(Addr, Reg, Value);
 800089e:	2213      	movs	r2, #19
 80008a0:	2101      	movs	r1, #1
 80008a2:	4620      	mov	r0, r4
 80008a4:	f000 fc2e 	bl	8001104 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 80008a8:	2032      	movs	r0, #50	@ 0x32
 80008aa:	f8df b504 	ldr.w	fp, [pc, #1284]	@ 8000db0 <wm8994_Init+0x55c>
 80008ae:	f000 fc55 	bl	800115c <AUDIO_IO_Delay>
  if (output_device > 0)
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80ce 	beq.w	8000a54 <wm8994_Init+0x200>
    outputEnabled = 1;
 80008b8:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 80008bc:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 80008be:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 80008c2:	f000 80ad 	beq.w	8000a20 <wm8994_Init+0x1cc>
 80008c6:	2e03      	cmp	r6, #3
 80008c8:	d04e      	beq.n	8000968 <wm8994_Init+0x114>
 80008ca:	4546      	cmp	r6, r8
 80008cc:	f040 80a8 	bne.w	8000a20 <wm8994_Init+0x1cc>
 AUDIO_IO_Write(Addr, Reg, Value);
 80008d0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80008d4:	2105      	movs	r1, #5
 80008d6:	4620      	mov	r0, r4
 80008d8:	f000 fc14 	bl	8001104 <AUDIO_IO_Write>
 80008dc:	2200      	movs	r2, #0
 80008de:	f240 6101 	movw	r1, #1537	@ 0x601
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 fc0e 	bl	8001104 <AUDIO_IO_Write>
 80008e8:	2200      	movs	r2, #0
 80008ea:	f240 6102 	movw	r1, #1538	@ 0x602
 80008ee:	4620      	mov	r0, r4
 80008f0:	f000 fc08 	bl	8001104 <AUDIO_IO_Write>
 80008f4:	2202      	movs	r2, #2
 80008f6:	f240 6104 	movw	r1, #1540	@ 0x604
 80008fa:	4620      	mov	r0, r4
 80008fc:	f000 fc02 	bl	8001104 <AUDIO_IO_Write>
 8000900:	2202      	movs	r2, #2
 8000902:	f240 6105 	movw	r1, #1541	@ 0x605
 8000906:	4620      	mov	r0, r4
 8000908:	f000 fbfc 	bl	8001104 <AUDIO_IO_Write>
  if (input_device > 0)
 800090c:	2d00      	cmp	r5, #0
 800090e:	f000 8101 	beq.w	8000b14 <wm8994_Init+0x2c0>
    inputEnabled = 1;
 8000912:	f04f 0801 	mov.w	r8, #1
    switch (input_device)
 8000916:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
    inputEnabled = 1;
 800091a:	f8cb 8004 	str.w	r8, [fp, #4]
    switch (input_device)
 800091e:	f000 80c7 	beq.w	8000ab0 <wm8994_Init+0x25c>
 8000922:	f200 809a 	bhi.w	8000a5a <wm8994_Init+0x206>
 8000926:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800092a:	f000 80f0 	beq.w	8000b0e <wm8994_Init+0x2ba>
 800092e:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000932:	f000 8096 	beq.w	8000a62 <wm8994_Init+0x20e>
  switch (AudioFreq)
 8000936:	f5b7 4ffa 	cmp.w	r7, #32000	@ 0x7d00
 800093a:	f000 81f8 	beq.w	8000d2e <wm8994_Init+0x4da>
 800093e:	f200 80f3 	bhi.w	8000b28 <wm8994_Init+0x2d4>
 8000942:	f5b7 5f7a 	cmp.w	r7, #16000	@ 0x3e80
 8000946:	f000 81f0 	beq.w	8000d2a <wm8994_Init+0x4d6>
 800094a:	f200 80e6 	bhi.w	8000b1a <wm8994_Init+0x2c6>
 800094e:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 8000952:	f000 80f9 	beq.w	8000b48 <wm8994_Init+0x2f4>
 8000956:	f642 3311 	movw	r3, #11025	@ 0x2b11
 800095a:	429f      	cmp	r7, r3
 800095c:	f000 81eb 	beq.w	8000d36 <wm8994_Init+0x4e2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000960:	2283      	movs	r2, #131	@ 0x83
 8000962:	e0f2      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000964:	2203      	movs	r2, #3
 8000966:	e79b      	b.n	80008a0 <wm8994_Init+0x4c>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000968:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800096c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000970:	f04f 0105 	mov.w	r1, #5
 8000974:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000976:	d149      	bne.n	8000a0c <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000978:	f000 fbc4 	bl	8001104 <AUDIO_IO_Write>
 800097c:	4632      	mov	r2, r6
 800097e:	f240 6101 	movw	r1, #1537	@ 0x601
 8000982:	4620      	mov	r0, r4
 8000984:	f000 fbbe 	bl	8001104 <AUDIO_IO_Write>
 8000988:	4632      	mov	r2, r6
 800098a:	f240 6102 	movw	r1, #1538	@ 0x602
 800098e:	4620      	mov	r0, r4
 8000990:	f000 fbb8 	bl	8001104 <AUDIO_IO_Write>
 8000994:	4632      	mov	r2, r6
 8000996:	f240 6104 	movw	r1, #1540	@ 0x604
 800099a:	4620      	mov	r0, r4
 800099c:	f000 fbb2 	bl	8001104 <AUDIO_IO_Write>
 80009a0:	4632      	mov	r2, r6
 80009a2:	f240 6105 	movw	r1, #1541	@ 0x605
 80009a6:	4620      	mov	r0, r4
 80009a8:	f000 fbac 	bl	8001104 <AUDIO_IO_Write>
    inputEnabled = 1;
 80009ac:	f8cb 8004 	str.w	r8, [fp, #4]
 AUDIO_IO_Write(Addr, Reg, Value);
 80009b0:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80009b4:	2104      	movs	r1, #4
 80009b6:	4620      	mov	r0, r4
 80009b8:	f000 fba4 	bl	8001104 <AUDIO_IO_Write>
 80009bc:	22db      	movs	r2, #219	@ 0xdb
 80009be:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80009c2:	4620      	mov	r0, r4
 80009c4:	f000 fb9e 	bl	8001104 <AUDIO_IO_Write>
 80009c8:	22db      	movs	r2, #219	@ 0xdb
 80009ca:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80009ce:	4620      	mov	r0, r4
 80009d0:	f000 fb98 	bl	8001104 <AUDIO_IO_Write>
 80009d4:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80009d8:	2102      	movs	r1, #2
 80009da:	4620      	mov	r0, r4
 80009dc:	f000 fb92 	bl	8001104 <AUDIO_IO_Write>
 80009e0:	2202      	movs	r2, #2
 80009e2:	f240 6106 	movw	r1, #1542	@ 0x606
 80009e6:	4620      	mov	r0, r4
 80009e8:	f000 fb8c 	bl	8001104 <AUDIO_IO_Write>
 80009ec:	2202      	movs	r2, #2
 80009ee:	f240 6107 	movw	r1, #1543	@ 0x607
 80009f2:	4620      	mov	r0, r4
 80009f4:	f000 fb86 	bl	8001104 <AUDIO_IO_Write>
 80009f8:	2202      	movs	r2, #2
 80009fa:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80009fe:	4620      	mov	r0, r4
 8000a00:	f000 fb80 	bl	8001104 <AUDIO_IO_Write>
 8000a04:	2202      	movs	r2, #2
 8000a06:	f240 6109 	movw	r1, #1545	@ 0x609
 8000a0a:	e07b      	b.n	8000b04 <wm8994_Init+0x2b0>
 8000a0c:	f000 fb7a 	bl	8001104 <AUDIO_IO_Write>
 8000a10:	4642      	mov	r2, r8
 8000a12:	f240 6101 	movw	r1, #1537	@ 0x601
 8000a16:	4620      	mov	r0, r4
 8000a18:	f000 fb74 	bl	8001104 <AUDIO_IO_Write>
 8000a1c:	4642      	mov	r2, r8
 8000a1e:	e764      	b.n	80008ea <wm8994_Init+0x96>
 8000a20:	f240 3203 	movw	r2, #771	@ 0x303
 8000a24:	2105      	movs	r1, #5
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 fb6c 	bl	8001104 <AUDIO_IO_Write>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	f240 6101 	movw	r1, #1537	@ 0x601
 8000a32:	4620      	mov	r0, r4
 8000a34:	f000 fb66 	bl	8001104 <AUDIO_IO_Write>
 8000a38:	4642      	mov	r2, r8
 8000a3a:	f240 6102 	movw	r1, #1538	@ 0x602
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f000 fb60 	bl	8001104 <AUDIO_IO_Write>
 8000a44:	2200      	movs	r2, #0
 8000a46:	f240 6104 	movw	r1, #1540	@ 0x604
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f000 fb5a 	bl	8001104 <AUDIO_IO_Write>
 8000a50:	2200      	movs	r2, #0
 8000a52:	e756      	b.n	8000902 <wm8994_Init+0xae>
    outputEnabled = 0;
 8000a54:	f8cb 6000 	str.w	r6, [fp]
 8000a58:	e758      	b.n	800090c <wm8994_Init+0xb8>
    switch (input_device)
 8000a5a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8000a5e:	d0a7      	beq.n	80009b0 <wm8994_Init+0x15c>
 8000a60:	e769      	b.n	8000936 <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a62:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8000a66:	2104      	movs	r1, #4
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f000 fb4b 	bl	8001104 <AUDIO_IO_Write>
 8000a6e:	22db      	movs	r2, #219	@ 0xdb
 8000a70:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000a74:	4620      	mov	r0, r4
 8000a76:	f000 fb45 	bl	8001104 <AUDIO_IO_Write>
 8000a7a:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4620      	mov	r0, r4
 8000a82:	f000 fb3f 	bl	8001104 <AUDIO_IO_Write>
 8000a86:	2202      	movs	r2, #2
 8000a88:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f000 fb39 	bl	8001104 <AUDIO_IO_Write>
 8000a92:	2202      	movs	r2, #2
 8000a94:	f240 6109 	movw	r1, #1545	@ 0x609
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f000 fb33 	bl	8001104 <AUDIO_IO_Write>
 8000a9e:	220e      	movs	r2, #14
 8000aa0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f000 fb2d 	bl	8001104 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000aaa:	f04f 0800 	mov.w	r8, #0
 8000aae:	e742      	b.n	8000936 <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ab0:	2211      	movs	r2, #17
 8000ab2:	2128      	movs	r1, #40	@ 0x28
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f000 fb25 	bl	8001104 <AUDIO_IO_Write>
 8000aba:	2235      	movs	r2, #53	@ 0x35
 8000abc:	2129      	movs	r1, #41	@ 0x29
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f000 fb20 	bl	8001104 <AUDIO_IO_Write>
 8000ac4:	2235      	movs	r2, #53	@ 0x35
 8000ac6:	212a      	movs	r1, #42	@ 0x2a
 8000ac8:	4620      	mov	r0, r4
 8000aca:	f000 fb1b 	bl	8001104 <AUDIO_IO_Write>
 8000ace:	f240 3203 	movw	r2, #771	@ 0x303
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f000 fb15 	bl	8001104 <AUDIO_IO_Write>
 8000ada:	22db      	movs	r2, #219	@ 0xdb
 8000adc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f000 fb0f 	bl	8001104 <AUDIO_IO_Write>
 8000ae6:	f246 3250 	movw	r2, #25424	@ 0x6350
 8000aea:	2102      	movs	r1, #2
 8000aec:	4620      	mov	r0, r4
 8000aee:	f000 fb09 	bl	8001104 <AUDIO_IO_Write>
 8000af2:	2202      	movs	r2, #2
 8000af4:	f240 6106 	movw	r1, #1542	@ 0x606
 8000af8:	4620      	mov	r0, r4
 8000afa:	f000 fb03 	bl	8001104 <AUDIO_IO_Write>
 8000afe:	2202      	movs	r2, #2
 8000b00:	f240 6107 	movw	r1, #1543	@ 0x607
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 fafd 	bl	8001104 <AUDIO_IO_Write>
 8000b0a:	220d      	movs	r2, #13
 8000b0c:	e7c8      	b.n	8000aa0 <wm8994_Init+0x24c>
 8000b0e:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8000b12:	e7de      	b.n	8000ad2 <wm8994_Init+0x27e>
    inputEnabled = 0;
 8000b14:	f8cb 5004 	str.w	r5, [fp, #4]
 8000b18:	e7c7      	b.n	8000aaa <wm8994_Init+0x256>
  switch (AudioFreq)
 8000b1a:	f245 6322 	movw	r3, #22050	@ 0x5622
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	f47f af1e 	bne.w	8000960 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b24:	2243      	movs	r2, #67	@ 0x43
 8000b26:	e010      	b.n	8000b4a <wm8994_Init+0x2f6>
  switch (AudioFreq)
 8000b28:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f43f af17 	beq.w	8000960 <wm8994_Init+0x10c>
 8000b32:	4b9d      	ldr	r3, [pc, #628]	@ (8000da8 <wm8994_Init+0x554>)
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f000 80fc 	beq.w	8000d32 <wm8994_Init+0x4de>
 8000b3a:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	f47f af0e 	bne.w	8000960 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b44:	2273      	movs	r2, #115	@ 0x73
 8000b46:	e000      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000b48:	2203      	movs	r2, #3
 8000b4a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f000 fad8 	bl	8001104 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000b54:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b58:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	bf0c      	ite	eq
 8000b60:	f244 0218 	movweq	r2, #16408	@ 0x4018
 8000b64:	f244 0210 	movwne	r2, #16400	@ 0x4010
 8000b68:	f000 facc 	bl	8001104 <AUDIO_IO_Write>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f240 3102 	movw	r1, #770	@ 0x302
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fac6 	bl	8001104 <AUDIO_IO_Write>
 8000b78:	220a      	movs	r2, #10
 8000b7a:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f000 fac0 	bl	8001104 <AUDIO_IO_Write>
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f000 faba 	bl	8001104 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	f000 80a9 	beq.w	8000ce8 <wm8994_Init+0x494>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8000b96:	2e02      	cmp	r6, #2
 8000b98:	d123      	bne.n	8000be2 <wm8994_Init+0x38e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9e:	212d      	movs	r1, #45	@ 0x2d
 8000ba0:	4620      	mov	r0, r4
      if(ColdStartup)
 8000ba2:	4e82      	ldr	r6, [pc, #520]	@ (8000dac <wm8994_Init+0x558>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ba4:	f000 faae 	bl	8001104 <AUDIO_IO_Write>
 8000ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bac:	212e      	movs	r1, #46	@ 0x2e
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f000 faa8 	bl	8001104 <AUDIO_IO_Write>
      if(ColdStartup)
 8000bb4:	7833      	ldrb	r3, [r6, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 80bf 	beq.w	8000d3a <wm8994_Init+0x4e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8000bc2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000bc6:	f000 fa9d 	bl	8001104 <AUDIO_IO_Write>
        ColdStartup=0;
 8000bca:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 8000bcc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
        ColdStartup=0;
 8000bd0:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 8000bd2:	f000 fac3 	bl	800115c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f000 fa91 	bl	8001104 <AUDIO_IO_Write>
 8000be2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000be6:	2103      	movs	r1, #3
 8000be8:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000bea:	f243 3603 	movw	r6, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bee:	f000 fa89 	bl	8001104 <AUDIO_IO_Write>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2122      	movs	r1, #34	@ 0x22
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fa84 	bl	8001104 <AUDIO_IO_Write>
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2123      	movs	r1, #35	@ 0x23
 8000c00:	4620      	mov	r0, r4
 8000c02:	f000 fa7f 	bl	8001104 <AUDIO_IO_Write>
 8000c06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c0a:	2136      	movs	r1, #54	@ 0x36
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f000 fa79 	bl	8001104 <AUDIO_IO_Write>
 8000c12:	f243 0203 	movw	r2, #12291	@ 0x3003
 8000c16:	2101      	movs	r1, #1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f000 fa73 	bl	8001104 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000c1e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c22:	f04f 0151 	mov.w	r1, #81	@ 0x51
 8000c26:	4620      	mov	r0, r4
 8000c28:	bf0c      	ite	eq
 8000c2a:	f240 2205 	movweq	r2, #517	@ 0x205
 8000c2e:	2205      	movne	r2, #5
 8000c30:	f000 fa68 	bl	8001104 <AUDIO_IO_Write>
 8000c34:	f243 3203 	movw	r2, #13059	@ 0x3303
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fa62 	bl	8001104 <AUDIO_IO_Write>
 8000c40:	2222      	movs	r2, #34	@ 0x22
 8000c42:	2160      	movs	r1, #96	@ 0x60
 8000c44:	4620      	mov	r0, r4
 8000c46:	f000 fa5d 	bl	8001104 <AUDIO_IO_Write>
 8000c4a:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8000c4e:	214c      	movs	r1, #76	@ 0x4c
 8000c50:	4620      	mov	r0, r4
 8000c52:	f000 fa57 	bl	8001104 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 fa80 	bl	800115c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	212d      	movs	r1, #45	@ 0x2d
 8000c60:	4620      	mov	r0, r4
 8000c62:	f000 fa4f 	bl	8001104 <AUDIO_IO_Write>
 8000c66:	2201      	movs	r2, #1
 8000c68:	212e      	movs	r1, #46	@ 0x2e
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f000 fa4a 	bl	8001104 <AUDIO_IO_Write>
 8000c70:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8000c74:	2103      	movs	r1, #3
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 fa44 	bl	8001104 <AUDIO_IO_Write>
 8000c7c:	2233      	movs	r2, #51	@ 0x33
 8000c7e:	2154      	movs	r1, #84	@ 0x54
 8000c80:	4620      	mov	r0, r4
 8000c82:	f000 fa3f 	bl	8001104 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 8000c86:	f240 1001 	movw	r0, #257	@ 0x101
 8000c8a:	f000 fa67 	bl	800115c <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c8e:	22ee      	movs	r2, #238	@ 0xee
 8000c90:	2160      	movs	r1, #96	@ 0x60
 8000c92:	4620      	mov	r0, r4
 8000c94:	f000 fa36 	bl	8001104 <AUDIO_IO_Write>
 8000c98:	22c0      	movs	r2, #192	@ 0xc0
 8000c9a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f000 fa30 	bl	8001104 <AUDIO_IO_Write>
 8000ca4:	22c0      	movs	r2, #192	@ 0xc0
 8000ca6:	f240 6111 	movw	r1, #1553	@ 0x611
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 fa2a 	bl	8001104 <AUDIO_IO_Write>
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f000 fa24 	bl	8001104 <AUDIO_IO_Write>
 8000cbc:	22c0      	movs	r2, #192	@ 0xc0
 8000cbe:	f240 6112 	movw	r1, #1554	@ 0x612
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f000 fa1e 	bl	8001104 <AUDIO_IO_Write>
 8000cc8:	22c0      	movs	r2, #192	@ 0xc0
 8000cca:	f240 6113 	movw	r1, #1555	@ 0x613
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f000 fa18 	bl	8001104 <AUDIO_IO_Write>
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	f240 4122 	movw	r1, #1058	@ 0x422
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f000 fa12 	bl	8001104 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000ce0:	4651      	mov	r1, sl
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	f7ff fd34 	bl	8000750 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8000ce8:	b1e5      	cbz	r5, 8000d24 <wm8994_Init+0x4d0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000cea:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000cee:	d002      	beq.n	8000cf6 <wm8994_Init+0x4a2>
 8000cf0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000cf4:	d12a      	bne.n	8000d4c <wm8994_Init+0x4f8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cf6:	f046 0213 	orr.w	r2, r6, #19
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f000 fa01 	bl	8001104 <AUDIO_IO_Write>
 8000d02:	2202      	movs	r2, #2
 8000d04:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f000 f9fb 	bl	8001104 <AUDIO_IO_Write>
 8000d0e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8000d12:	f240 4111 	movw	r1, #1041	@ 0x411
 8000d16:	4620      	mov	r0, r4
 8000d18:	f000 f9f4 	bl	8001104 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000d1c:	4651      	mov	r1, sl
 8000d1e:	4648      	mov	r0, r9
 8000d20:	f7ff fd16 	bl	8000750 <wm8994_SetVolume>
}
 8000d24:	4640      	mov	r0, r8
 8000d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d2a:	2233      	movs	r2, #51	@ 0x33
 8000d2c:	e70d      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000d2e:	2263      	movs	r2, #99	@ 0x63
 8000d30:	e70b      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000d32:	22a3      	movs	r2, #163	@ 0xa3
 8000d34:	e709      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000d36:	2213      	movs	r2, #19
 8000d38:	e707      	b.n	8000b4a <wm8994_Init+0x2f6>
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f248 1208 	movw	r2, #33032	@ 0x8108
 8000d40:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000d44:	f000 f9de 	bl	8001104 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8000d48:	2032      	movs	r0, #50	@ 0x32
 8000d4a:	e742      	b.n	8000bd2 <wm8994_Init+0x37e>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000d4c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8000d50:	d115      	bne.n	8000d7e <wm8994_Init+0x52a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d52:	f046 0213 	orr.w	r2, r6, #19
 8000d56:	2101      	movs	r1, #1
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f000 f9d3 	bl	8001104 <AUDIO_IO_Write>
 8000d5e:	2202      	movs	r2, #2
 8000d60:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000d64:	4620      	mov	r0, r4
 8000d66:	f000 f9cd 	bl	8001104 <AUDIO_IO_Write>
 8000d6a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000d6e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000d72:	4620      	mov	r0, r4
 8000d74:	f000 f9c6 	bl	8001104 <AUDIO_IO_Write>
 8000d78:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000d7c:	e7c9      	b.n	8000d12 <wm8994_Init+0x4be>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000d7e:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 8000d82:	d002      	beq.n	8000d8a <wm8994_Init+0x536>
 8000d84:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8000d88:	d1c8      	bne.n	8000d1c <wm8994_Init+0x4c8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d8a:	220b      	movs	r2, #11
 8000d8c:	2118      	movs	r1, #24
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f000 f9b8 	bl	8001104 <AUDIO_IO_Write>
 8000d94:	220b      	movs	r2, #11
 8000d96:	211a      	movs	r1, #26
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f000 f9b3 	bl	8001104 <AUDIO_IO_Write>
 8000d9e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000da2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000da6:	e7b6      	b.n	8000d16 <wm8994_Init+0x4c2>
 8000da8:	00017700 	.word	0x00017700
 8000dac:	20000000 	.word	0x20000000
 8000db0:	2000013c 	.word	0x2000013c

08000db4 <wm8994_Stop>:
{
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8000db6:	4f19      	ldr	r7, [pc, #100]	@ (8000e1c <wm8994_Stop+0x68>)
{
 8000db8:	4604      	mov	r4, r0
 8000dba:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8000dbc:	683d      	ldr	r5, [r7, #0]
 8000dbe:	b355      	cbz	r5, 8000e16 <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	f7ff fc8f 	bl	80006e4 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000dc6:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000dc8:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000dca:	d024      	beq.n	8000e16 <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000dcc:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f000 f994 	bl	8001104 <AUDIO_IO_Write>
 8000ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de0:	f240 4122 	movw	r1, #1058	@ 0x422
 8000de4:	4620      	mov	r0, r4
 8000de6:	f000 f98d 	bl	8001104 <AUDIO_IO_Write>
 8000dea:	2200      	movs	r2, #0
 8000dec:	212d      	movs	r1, #45	@ 0x2d
 8000dee:	4620      	mov	r0, r4
 8000df0:	f000 f988 	bl	8001104 <AUDIO_IO_Write>
 8000df4:	2200      	movs	r2, #0
 8000df6:	212e      	movs	r1, #46	@ 0x2e
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f000 f983 	bl	8001104 <AUDIO_IO_Write>
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	4620      	mov	r0, r4
 8000e04:	f000 f97e 	bl	8001104 <AUDIO_IO_Write>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	f000 f979 	bl	8001104 <AUDIO_IO_Write>
      outputEnabled = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
}
 8000e16:	4628      	mov	r0, r5
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000013c 	.word	0x2000013c

08000e20 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e26:	f002 fdb7 	bl	8003998 <HAL_I2C_GetState>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	f040 8096 	bne.w	8000f5c <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e30:	4b4b      	ldr	r3, [pc, #300]	@ (8000f60 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8000e32:	2600      	movs	r6, #0
 8000e34:	4c4b      	ldr	r4, [pc, #300]	@ (8000f64 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e36:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8000e38:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000e3a:	bf0c      	ite	eq
 8000e3c:	4a4a      	ldreq	r2, [pc, #296]	@ (8000f68 <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e3e:	4a4b      	ldrne	r2, [pc, #300]	@ (8000f6c <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e40:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e42:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8000e44:	4a4a      	ldr	r2, [pc, #296]	@ (8000f70 <I2Cx_Init+0x150>)
 8000e46:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000e4a:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000e4e:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000e52:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e58:	d143      	bne.n	8000ee2 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e60:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e64:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e66:	6323      	str	r3, [r4, #48]	@ 0x30
 8000e68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000e6a:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e74:	2312      	movs	r3, #18
 8000e76:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e7a:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e7c:	483d      	ldr	r0, [pc, #244]	@ (8000f74 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8000e7e:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e82:	f002 f929 	bl	80030d8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e8a:	a905      	add	r1, sp, #20
 8000e8c:	4839      	ldr	r0, [pc, #228]	@ (8000f74 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000e8e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e90:	f002 f922 	bl	80030d8 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000e96:	4632      	mov	r2, r6
 8000e98:	210f      	movs	r1, #15
 8000e9a:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000e9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ea0:	6423      	str	r3, [r4, #64]	@ 0x40
 8000ea2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000eac:	6a23      	ldr	r3, [r4, #32]
 8000eae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000eb2:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000eb4:	6a23      	ldr	r3, [r4, #32]
 8000eb6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000eba:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000ebc:	f001 fc9e 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000ec0:	2048      	movs	r0, #72	@ 0x48
 8000ec2:	f001 fccd 	bl	8002860 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000ec6:	2049      	movs	r0, #73	@ 0x49
 8000ec8:	4632      	mov	r2, r6
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f001 fc96 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8000ed0:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000ed2:	f001 fcc5 	bl	8002860 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8000ed6:	4628      	mov	r0, r5
  }
}
 8000ed8:	b00a      	add	sp, #40	@ 0x28
 8000eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 8000ede:	f002 bb33 	b.w	8003548 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000eea:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eec:	4822      	ldr	r0, [pc, #136]	@ (8000f78 <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eee:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ef0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000ef2:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000f02:	2304      	movs	r3, #4
 8000f04:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f08:	a905      	add	r1, sp, #20
 8000f0a:	f002 f8e5 	bl	80030d8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f12:	a905      	add	r1, sp, #20
 8000f14:	4818      	ldr	r0, [pc, #96]	@ (8000f78 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000f16:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f18:	f002 f8de 	bl	80030d8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f1e:	4632      	mov	r2, r6
 8000f20:	210f      	movs	r1, #15
 8000f22:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f28:	6423      	str	r3, [r4, #64]	@ 0x40
 8000f2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	9304      	str	r3, [sp, #16]
 8000f32:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000f34:	6a23      	ldr	r3, [r4, #32]
 8000f36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f3a:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000f3c:	6a23      	ldr	r3, [r4, #32]
 8000f3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f42:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000f44:	f001 fc5a 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000f48:	201f      	movs	r0, #31
 8000f4a:	f001 fc89 	bl	8002860 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000f4e:	2020      	movs	r0, #32
 8000f50:	4632      	mov	r2, r6
 8000f52:	210f      	movs	r1, #15
 8000f54:	f001 fc52 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000f58:	2020      	movs	r0, #32
 8000f5a:	e7ba      	b.n	8000ed2 <I2Cx_Init+0xb2>
}
 8000f5c:	b00a      	add	sp, #40	@ 0x28
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	20000144 	.word	0x20000144
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40005c00 	.word	0x40005c00
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	40912732 	.word	0x40912732
 8000f74:	40021c00 	.word	0x40021c00
 8000f78:	40020400 	.word	0x40020400

08000f7c <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8000f7c:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f7e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 8000f82:	b085      	sub	sp, #20
 8000f84:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f86:	9402      	str	r4, [sp, #8]
 8000f88:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8000f8c:	9401      	str	r4, [sp, #4]
 8000f8e:	9c08      	ldr	r4, [sp, #32]
 8000f90:	9400      	str	r4, [sp, #0]
 8000f92:	f002 fb49 	bl	8003628 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000f96:	4604      	mov	r4, r0
 8000f98:	b128      	cbz	r0, 8000fa6 <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f002 fb2a 	bl	80035f4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f7ff ff3d 	bl	8000e20 <I2Cx_Init>
}
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	b005      	add	sp, #20
 8000faa:	bd30      	pop	{r4, r5, pc}

08000fac <I2Cx_ReadMultiple>:
{
 8000fac:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fae:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fb6:	9402      	str	r4, [sp, #8]
 8000fb8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8000fbc:	9401      	str	r4, [sp, #4]
 8000fbe:	9c08      	ldr	r4, [sp, #32]
 8000fc0:	9400      	str	r4, [sp, #0]
 8000fc2:	f002 fc0b 	bl	80037dc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	b128      	cbz	r0, 8000fd6 <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f002 fb12 	bl	80035f4 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff ff25 	bl	8000e20 <I2Cx_Init>
}
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	b005      	add	sp, #20
 8000fda:	bd30      	pop	{r4, r5, pc}

08000fdc <BSP_LED_Init>:
{
 8000fdc:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8000fde:	4604      	mov	r4, r0
{
 8000fe0:	b087      	sub	sp, #28
  if (Led == LED1)
 8000fe2:	b9c8      	cbnz	r0, 8001018 <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8000fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ff2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001004:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800100a:	f002 f865 	bl	80030d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 800100e:	4622      	mov	r2, r4
 8001010:	4629      	mov	r1, r5
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <BSP_LED_Init+0x44>)
 8001014:	f002 f94a 	bl	80032ac <HAL_GPIO_WritePin>
}
 8001018:	b007      	add	sp, #28
 800101a:	bd30      	pop	{r4, r5, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40022000 	.word	0x40022000

08001024 <BSP_LED_Toggle>:
  if (Led == LED1)	/* Toggle LED connected to GPIO */
 8001024:	b918      	cbnz	r0, 800102e <BSP_LED_Toggle+0xa>
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8001026:	2102      	movs	r1, #2
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <BSP_LED_Toggle+0xc>)
 800102a:	f002 b944 	b.w	80032b6 <HAL_GPIO_TogglePin>
}
 800102e:	4770      	bx	lr
 8001030:	40022000 	.word	0x40022000

08001034 <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <BSP_PB_Init+0x98>)
 8001036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 800103c:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800103e:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8001040:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4604      	mov	r4, r0
 8001046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800104a:	b990      	cbnz	r0, 8001072 <BSP_PB_Init+0x3e>
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001050:	b9b9      	cbnz	r1, 8001082 <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001054:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001056:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800105a:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800105e:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001060:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001062:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001064:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <BSP_PB_Init+0xa0>)
 8001066:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800106a:	f002 f835 	bl	80030d8 <HAL_GPIO_Init>
}
 800106e:	b008      	add	sp, #32
 8001070:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001072:	2801      	cmp	r0, #1
 8001074:	d102      	bne.n	800107c <BSP_PB_Init+0x48>
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9b01      	ldr	r3, [sp, #4]
 800107a:	e7e9      	b.n	8001050 <BSP_PB_Init+0x1c>
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	9b02      	ldr	r3, [sp, #8]
 8001080:	e7e6      	b.n	8001050 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001082:	2901      	cmp	r1, #1
 8001084:	d1f3      	bne.n	800106e <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001086:	4d12      	ldr	r5, [pc, #72]	@ (80010d0 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001088:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800108a:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800108c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001090:	42b4      	cmp	r4, r6
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001092:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001096:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001098:	f04f 0302 	mov.w	r3, #2
 800109c:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80010a0:	bf0c      	ite	eq
 80010a2:	f44f 1388 	moveq.w	r3, #1114112	@ 0x110000
 80010a6:	f44f 1304 	movne.w	r3, #2162688	@ 0x210000
 80010aa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <BSP_PB_Init+0xa0>)
 80010ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010b2:	f002 f811 	bl	80030d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80010b6:	f995 4006 	ldrsb.w	r4, [r5, #6]
 80010ba:	4632      	mov	r2, r6
 80010bc:	210f      	movs	r1, #15
 80010be:	4620      	mov	r0, r4
 80010c0:	f001 fb9c 	bl	80027fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80010c4:	4620      	mov	r0, r4
 80010c6:	f001 fbcb 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 80010ca:	e7d0      	b.n	800106e <BSP_PB_Init+0x3a>
 80010cc:	40023800 	.word	0x40023800
 80010d0:	08006eac 	.word	0x08006eac
 80010d4:	20000034 	.word	0x20000034

080010d8 <BSP_PB_GetState>:
{
 80010d8:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <BSP_PB_GetState+0x14>)
 80010dc:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <BSP_PB_GetState+0x18>)
 80010e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80010e6:	f002 f8db 	bl	80032a0 <HAL_GPIO_ReadPin>
}
 80010ea:	bd08      	pop	{r3, pc}
 80010ec:	08006eac 	.word	0x08006eac
 80010f0:	20000034 	.word	0x20000034

080010f4 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 80010f4:	4801      	ldr	r0, [pc, #4]	@ (80010fc <AUDIO_IO_Init+0x8>)
 80010f6:	f7ff be93 	b.w	8000e20 <I2Cx_Init>
 80010fa:	bf00      	nop
 80010fc:	20000144 	.word	0x20000144

08001100 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8001100:	4770      	bx	lr
	...

08001104 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001106:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001108:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800110a:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800110e:	f10d 020e 	add.w	r2, sp, #14
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	460a      	mov	r2, r1
 8001118:	4601      	mov	r1, r0
 800111a:	4803      	ldr	r0, [pc, #12]	@ (8001128 <AUDIO_IO_Write+0x24>)
 800111c:	f7ff ff2e 	bl	8000f7c <I2Cx_WriteMultiple>
}
 8001120:	b005      	add	sp, #20
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4
 8001126:	bf00      	nop
 8001128:	20000144 	.word	0x20000144

0800112c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800112c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 800112e:	2300      	movs	r3, #0
{
 8001130:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001132:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 8001136:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800113a:	2302      	movs	r3, #2
 800113c:	9100      	str	r1, [sp, #0]
 800113e:	4601      	mov	r1, r0
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <AUDIO_IO_Read+0x2c>)
 8001144:	f7ff ff32 	bl	8000fac <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001148:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800114c:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 800114e:	b280      	uxth	r0, r0
 8001150:	b005      	add	sp, #20
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	20000144 	.word	0x20000144

0800115c <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800115c:	f001 b8f6 	b.w	800234c <HAL_Delay>

08001160 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <SAIx_Out_DeInit+0x1c>)
 8001166:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001168:	6853      	ldr	r3, [r2, #4]
 800116a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800116e:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001170:	f003 bca5 	b.w	8004abe <HAL_SAI_DeInit>
 8001174:	40015c04 	.word	0x40015c04
 8001178:	40015c00 	.word	0x40015c00
 800117c:	200001ec 	.word	0x200001ec

08001180 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001182:	4a06      	ldr	r2, [pc, #24]	@ (800119c <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001184:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <SAIx_In_DeInit+0x20>)
 8001186:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800118a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800118c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001190:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8001192:	f003 bc94 	b.w	8004abe <HAL_SAI_DeInit>
 8001196:	bf00      	nop
 8001198:	40015c24 	.word	0x40015c24
 800119c:	40015c00 	.word	0x40015c00
 80011a0:	200001ec 	.word	0x200001ec

080011a4 <SAIx_In_Init>:
{
 80011a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80011aa:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80011ac:	4c35      	ldr	r4, [pc, #212]	@ (8001284 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80011ae:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80011b0:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800128c <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80011b4:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80011b8:	6023      	str	r3, [r4, #0]
{
 80011ba:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80011bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80011c0:	f44f 2a80 	mov.w	sl, #262144	@ 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 80011c4:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80011c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011cc:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80011d0:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80011d2:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80011d4:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80011d6:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 80011d8:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80011da:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80011dc:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80011de:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80011e0:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80011e2:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80011e4:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011e6:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011e8:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80011f2:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80011f4:	e9c4 9117 	strd	r9, r1, [r4, #92]	@ 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80011f8:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011fc:	e9c4 b512 	strd	fp, r5, [r4, #72]	@ 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001200:	e9c4 a514 	strd	sl, r5, [r4, #80]	@ 0x50
  HAL_SAI_Init(&haudio_out_sai);
 8001204:	f003 fb7e 	bl	8004904 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001208:	481f      	ldr	r0, [pc, #124]	@ (8001288 <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800120a:	2380      	movs	r3, #128	@ 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800120c:	2240      	movs	r2, #64	@ 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800120e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001212:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001216:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001218:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 800121c:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001220:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001222:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001226:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  HAL_SAI_Init(&haudio_in_sai);
 800122a:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800122e:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001232:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001236:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800123a:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800123e:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001242:	f8c4 609c 	str.w	r6, [r4, #156]	@ 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001246:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800124a:	e9c4 352e 	strd	r3, r5, [r4, #184]	@ 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800124e:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001250:	e9c4 b533 	strd	fp, r5, [r4, #204]	@ 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001254:	e9c4 2331 	strd	r2, r3, [r4, #196]	@ 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001258:	e9c4 a535 	strd	sl, r5, [r4, #212]	@ 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800125c:	e9c4 5937 	strd	r5, r9, [r4, #220]	@ 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8001260:	f003 fb50 	bl	8004904 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	ea43 030b 	orr.w	r3, r3, fp
 800126c:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800126e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	ea43 030b 	orr.w	r3, r3, fp
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	b003      	add	sp, #12
 800127c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001280:	40015c04 	.word	0x40015c04
 8001284:	200001ec 	.word	0x200001ec
 8001288:	40015c24 	.word	0x40015c24
 800128c:	40015c00 	.word	0x40015c00

08001290 <BSP_AUDIO_OUT_Play>:
{
 8001290:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <BSP_AUDIO_OUT_Play+0x38>)
{
 8001294:	4605      	mov	r5, r0
 8001296:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001298:	b28a      	uxth	r2, r1
 800129a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800129e:	4601      	mov	r1, r0
 80012a0:	2034      	movs	r0, #52	@ 0x34
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4798      	blx	r3
 80012a6:	b960      	cbnz	r0, 80012c2 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80012a8:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 80012ac:	4629      	mov	r1, r5
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <BSP_AUDIO_OUT_Play+0x38>)
 80012b0:	bf34      	ite	cc
 80012b2:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 80012b6:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 80012ba:	f003 fc67 	bl	8004b8c <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 80012be:	2000      	movs	r0, #0
}
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80012c2:	2001      	movs	r0, #1
 80012c4:	e7fc      	b.n	80012c0 <BSP_AUDIO_OUT_Play+0x30>
 80012c6:	bf00      	nop
 80012c8:	200001ec 	.word	0x200001ec

080012cc <BSP_AUDIO_OUT_Stop>:
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 80012ce:	4d0a      	ldr	r5, [pc, #40]	@ (80012f8 <BSP_AUDIO_OUT_Stop+0x2c>)
{
 80012d0:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 80012d2:	4628      	mov	r0, r5
 80012d4:	f003 fc11 	bl	8004afa <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80012d8:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80012dc:	4621      	mov	r1, r4
 80012de:	2034      	movs	r0, #52	@ 0x34
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	4798      	blx	r3
 80012e4:	b930      	cbnz	r0, 80012f4 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 80012e6:	2c01      	cmp	r4, #1
 80012e8:	d102      	bne.n	80012f0 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 80012ea:	4620      	mov	r0, r4
 80012ec:	f001 f82e 	bl	800234c <HAL_Delay>
    return AUDIO_OK;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80012f4:	2001      	movs	r0, #1
 80012f6:	e7fc      	b.n	80012f2 <BSP_AUDIO_OUT_Stop+0x26>
 80012f8:	200001ec 	.word	0x200001ec

080012fc <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 80012fc:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80012fe:	4c08      	ldr	r4, [pc, #32]	@ (8001320 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001300:	6822      	ldr	r2, [r4, #0]
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001308:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800130a:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800130c:	4620      	mov	r0, r4
 800130e:	f003 faf9 	bl	8004904 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001312:	6822      	ldr	r2, [r4, #0]
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bd10      	pop	{r4, pc}
 800131e:	bf00      	nop
 8001320:	200001ec 	.word	0x200001ec

08001324 <HAL_SAI_TxCpltCallback>:
{
 8001324:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001326:	f003 ff35 	bl	8005194 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800132a:	bd08      	pop	{r3, pc}

0800132c <HAL_SAI_TxHalfCpltCallback>:
{
 800132c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800132e:	f003 ff3b 	bl	80051a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001332:	bd08      	pop	{r3, pc}

08001334 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001338:	4c4d      	ldr	r4, [pc, #308]	@ (8001470 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 800133a:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800133c:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001340:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001342:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001344:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001346:	f04f 080a 	mov.w	r8, #10
{ 
 800134a:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800134c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001350:	a905      	add	r1, sp, #20
 8001352:	4848      	ldr	r0, [pc, #288]	@ (8001474 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001354:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001358:	6463      	str	r3, [r4, #68]	@ 0x44
 800135a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800135c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001364:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	6323      	str	r3, [r4, #48]	@ 0x30
 800136c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001376:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6323      	str	r3, [r4, #48]	@ 0x30
 800137e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001388:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001390:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001392:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139a:	9303      	str	r3, [sp, #12]
 800139c:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800139e:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013a0:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013a4:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80013a8:	f001 fe96 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80013ac:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80013ae:	a905      	add	r1, sp, #20
 80013b0:	4830      	ldr	r0, [pc, #192]	@ (8001474 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80013b2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013b6:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013ba:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80013be:	f001 fe8b 	bl	80030d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80013c2:	a905      	add	r1, sp, #20
 80013c4:	482b      	ldr	r0, [pc, #172]	@ (8001474 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80013c6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013ca:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013ce:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80013d2:	f001 fe81 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80013d6:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80013d8:	a905      	add	r1, sp, #20
 80013da:	4826      	ldr	r0, [pc, #152]	@ (8001474 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80013dc:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013e0:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013e4:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80013e8:	f001 fe76 	bl	80030d8 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80013ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80013ee:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80013f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80013f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fc:	9304      	str	r3, [sp, #16]
 80013fe:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <BSP_AUDIO_OUT_MspInit+0x144>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d129      	bne.n	800145a <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <BSP_AUDIO_OUT_MspInit+0x148>)
 8001408:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800140c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001410:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001414:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001418:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800141c:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001420:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001424:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001428:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800142c:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001434:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001438:	2204      	movs	r2, #4
 800143a:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800143e:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001442:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001444:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001446:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001448:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800144c:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001450:	f001 fb06 	bl	8002a60 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8001454:	4620      	mov	r0, r4
 8001456:	f001 fa85 	bl	8002964 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	210e      	movs	r1, #14
 800145e:	203c      	movs	r0, #60	@ 0x3c
 8001460:	f001 f9cc 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001464:	203c      	movs	r0, #60	@ 0x3c
 8001466:	f001 f9fb 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 800146a:	b00a      	add	sp, #40	@ 0x28
 800146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40022000 	.word	0x40022000
 8001478:	40015c04 	.word	0x40015c04
 800147c:	200001ec 	.word	0x200001ec
 8001480:	40026470 	.word	0x40026470

08001484 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001484:	b510      	push	{r4, lr}
 8001486:	b0a2      	sub	sp, #136	@ 0x88
 8001488:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800148a:	a801      	add	r0, sp, #4
 800148c:	f003 f8f2 	bl	8004674 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001490:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001494:	429c      	cmp	r4, r3
 8001496:	d007      	beq.n	80014a8 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001498:	f245 6322 	movw	r3, #22050	@ 0x5622
 800149c:	429c      	cmp	r4, r3
 800149e:	d003      	beq.n	80014a8 <BSP_AUDIO_OUT_ClockConfig+0x24>
 80014a0:	f64a 4344 	movw	r3, #44100	@ 0xac44
 80014a4:	429c      	cmp	r4, r3
 80014a6:	d111      	bne.n	80014cc <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80014a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014ac:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80014ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014b2:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80014b4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 80014b8:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80014be:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80014c0:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80014c2:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80014c4:	f002 fe4c 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
}
 80014c8:	b022      	add	sp, #136	@ 0x88
 80014ca:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80014cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d0:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80014d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014d6:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80014d8:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80014dc:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80014de:	2307      	movs	r3, #7
 80014e0:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e7ec      	b.n	80014c0 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

080014e8 <BSP_AUDIO_OUT_Init>:
{ 
 80014e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014ec:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80014ee:	4c2f      	ldr	r4, [pc, #188]	@ (80015ac <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 80014f0:	4681      	mov	r9, r0
 80014f2:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80014f4:	4d2e      	ldr	r5, [pc, #184]	@ (80015b0 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 80014f6:	f7ff fe33 	bl	8001160 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80014fa:	4639      	mov	r1, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ffc0 	bl	8001484 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001504:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001506:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001508:	f003 fc5c 	bl	8004dc4 <HAL_SAI_GetState>
 800150c:	4601      	mov	r1, r0
 800150e:	b910      	cbnz	r0, 8001516 <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff ff0f 	bl	8001334 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001516:	4a27      	ldr	r2, [pc, #156]	@ (80015b4 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001518:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800151a:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 800151c:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800151e:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001520:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 8001522:	4822      	ldr	r0, [pc, #136]	@ (80015ac <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001528:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80015b8 <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800152c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800152e:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001530:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001532:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001534:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001536:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001538:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800153a:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800153c:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800153e:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001540:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001542:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154a:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800154c:	2320      	movs	r3, #32
 800154e:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001556:	e9c4 3512 	strd	r3, r5, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800155a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800155e:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001562:	230f      	movs	r3, #15
 8001564:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8001568:	f003 f9cc 	bl	8004904 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800156c:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800156e:	2034      	movs	r0, #52	@ 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001570:	6813      	ldr	r3, [r2, #0]
 8001572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001578:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800157c:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 800157e:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001582:	4298      	cmp	r0, r3
 8001584:	d10f      	bne.n	80015a6 <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001586:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 800158a:	2034      	movs	r0, #52	@ 0x34
 800158c:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 800158e:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001592:	463b      	mov	r3, r7
 8001594:	f8d8 4000 	ldr.w	r4, [r8]
 8001598:	4652      	mov	r2, sl
 800159a:	4649      	mov	r1, r9
 800159c:	2034      	movs	r0, #52	@ 0x34
 800159e:	47a0      	blx	r4
    ret = AUDIO_OK;
 80015a0:	4628      	mov	r0, r5
}
 80015a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 80015a6:	4630      	mov	r0, r6
 80015a8:	e7fb      	b.n	80015a2 <BSP_AUDIO_OUT_Init+0xba>
 80015aa:	bf00      	nop
 80015ac:	200001ec 	.word	0x200001ec
 80015b0:	40015c04 	.word	0x40015c04
 80015b4:	40015c00 	.word	0x40015c00
 80015b8:	20000004 	.word	0x20000004

080015bc <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80015bc:	b28a      	uxth	r2, r1
 80015be:	4601      	mov	r1, r0
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <BSP_AUDIO_IN_Record+0x10>)
{
 80015c2:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80015c4:	f003 fb4e 	bl	8004c64 <HAL_SAI_Receive_DMA>
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	bd08      	pop	{r3, pc}
 80015cc:	20000270 	.word	0x20000270

080015d0 <BSP_AUDIO_IN_Stop>:
{
 80015d0:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
 80015d2:	4d0b      	ldr	r5, [pc, #44]	@ (8001600 <BSP_AUDIO_IN_Stop+0x30>)
{
 80015d4:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 80015d6:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80015da:	f003 fa8e 	bl	8004afa <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80015de:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80015e2:	4621      	mov	r1, r4
 80015e4:	2034      	movs	r0, #52	@ 0x34
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4798      	blx	r3
 80015ea:	b930      	cbnz	r0, 80015fa <BSP_AUDIO_IN_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 80015ec:	2c01      	cmp	r4, #1
 80015ee:	d102      	bne.n	80015f6 <BSP_AUDIO_IN_Stop+0x26>
      HAL_Delay(1);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 feab 	bl	800234c <HAL_Delay>
    return AUDIO_OK;
 80015f6:	2000      	movs	r0, #0
}
 80015f8:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80015fa:	2001      	movs	r0, #1
 80015fc:	e7fc      	b.n	80015f8 <BSP_AUDIO_IN_Stop+0x28>
 80015fe:	bf00      	nop
 8001600:	200001ec 	.word	0x200001ec

08001604 <HAL_SAI_RxCpltCallback>:
{
 8001604:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001606:	f003 ff07 	bl	8005418 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800160a:	bd08      	pop	{r3, pc}

0800160c <HAL_SAI_RxHalfCpltCallback>:
{
 800160c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800160e:	f003 ff09 	bl	8005424 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001612:	bd08      	pop	{r3, pc}

08001614 <HAL_SAI_ErrorCallback>:
{
 8001614:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001616:	480a      	ldr	r0, [pc, #40]	@ (8001640 <HAL_SAI_ErrorCallback+0x2c>)
 8001618:	f003 fbd4 	bl	8004dc4 <HAL_SAI_GetState>
 800161c:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001620:	f005 05ef 	and.w	r5, r5, #239	@ 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001624:	f003 fbce 	bl	8004dc4 <HAL_SAI_GetState>
 8001628:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 800162a:	2d02      	cmp	r5, #2
 800162c:	d101      	bne.n	8001632 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 800162e:	f003 fdc7 	bl	80051c0 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001632:	f004 04df 	and.w	r4, r4, #223	@ 0xdf
 8001636:	2c02      	cmp	r4, #2
 8001638:	d101      	bne.n	800163e <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 800163a:	f003 fef9 	bl	8005430 <BSP_AUDIO_IN_Error_CallBack>
}
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	200001ec 	.word	0x200001ec
 8001644:	20000270 	.word	0x20000270

08001648 <BSP_AUDIO_IN_MspInit>:
{
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 800164c:	4c3d      	ldr	r4, [pc, #244]	@ (8001744 <BSP_AUDIO_IN_MspInit+0xfc>)
{
 800164e:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001650:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001652:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001654:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001656:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 800165a:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800165c:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 800165e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001662:	4839      	ldr	r0, [pc, #228]	@ (8001748 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001664:	6463      	str	r3, [r4, #68]	@ 0x44
 8001666:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001670:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001676:	6323      	str	r3, [r4, #48]	@ 0x30
 8001678:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800167a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001682:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001684:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001688:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800168a:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800168e:	f001 fd23 	bl	80030d8 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8001692:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001694:	a905      	add	r1, sp, #20
 8001696:	482d      	ldr	r0, [pc, #180]	@ (800174c <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	6323      	str	r3, [r4, #48]	@ 0x30
 800169e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80016a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80016ac:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80016b0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80016b4:	f001 fd10 	bl	80030d8 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80016b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 80016ba:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80016bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80016c2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c8:	9304      	str	r3, [sp, #16]
 80016ca:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <BSP_AUDIO_IN_MspInit+0x108>)
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d125      	bne.n	800171e <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80016d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80016dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80016e0:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80016e4:	f8c3 5190 	str.w	r5, [r3, #400]	@ 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 80016e8:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80016ec:	6734      	str	r4, [r6, #112]	@ 0x70
 80016ee:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80016f2:	e9c3 1260 	strd	r1, r2, [r3, #384]	@ 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 80016f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016fa:	e9c3 0262 	strd	r0, r2, [r3, #392]	@ 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80016fe:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001700:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001702:	e9c3 2565 	strd	r2, r5, [r3, #404]	@ 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001706:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001708:	e9c3 555c 	strd	r5, r5, [r3, #368]	@ 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800170c:	e9c3 585e 	strd	r5, r8, [r3, #376]	@ 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001710:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001714:	f001 f9a4 	bl	8002a60 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8001718:	4620      	mov	r0, r4
 800171a:	f001 f923 	bl	8002964 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	210f      	movs	r1, #15
 8001722:	2046      	movs	r0, #70	@ 0x46
 8001724:	f001 f86a 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001728:	2046      	movs	r0, #70	@ 0x46
 800172a:	f001 f899 	bl	8002860 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	210f      	movs	r1, #15
 8001732:	2028      	movs	r0, #40	@ 0x28
 8001734:	f001 f862 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001738:	2028      	movs	r0, #40	@ 0x28
 800173a:	f001 f891 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 800173e:	b00a      	add	sp, #40	@ 0x28
 8001740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40021800 	.word	0x40021800
 800174c:	40021c00 	.word	0x40021c00
 8001750:	40015c24 	.word	0x40015c24
 8001754:	200001ec 	.word	0x200001ec
 8001758:	400264b8 	.word	0x400264b8

0800175c <BSP_AUDIO_IN_InitEx>:
{
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 800175e:	f420 7380 	bic.w	r3, r0, #256	@ 0x100
{
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800176a:	d001      	beq.n	8001770 <BSP_AUDIO_IN_InitEx+0x14>
    ret = AUDIO_ERROR;
 800176c:	2001      	movs	r0, #1
}
 800176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001770:	4e1c      	ldr	r6, [pc, #112]	@ (80017e4 <BSP_AUDIO_IN_InitEx+0x88>)
    SAIx_In_DeInit();
 8001772:	f7ff fd05 	bl	8001180 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001776:	2200      	movs	r2, #0
 8001778:	4629      	mov	r1, r5
 800177a:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 800177e:	f7ff fe81 	bl	8001484 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001782:	4630      	mov	r0, r6
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <BSP_AUDIO_IN_InitEx+0x8c>)
 8001786:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800178a:	f003 fb1b 	bl	8004dc4 <HAL_SAI_GetState>
 800178e:	4607      	mov	r7, r0
 8001790:	b948      	cbnz	r0, 80017a6 <BSP_AUDIO_IN_InitEx+0x4a>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8001792:	4601      	mov	r1, r0
 8001794:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8001798:	f7ff fdcc 	bl	8001334 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800179c:	4639      	mov	r1, r7
 800179e:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 80017a2:	f7ff ff51 	bl	8001648 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80017a6:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80017aa:	4f10      	ldr	r7, [pc, #64]	@ (80017ec <BSP_AUDIO_IN_InitEx+0x90>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 80017ac:	462a      	mov	r2, r5
 80017ae:	f04f 0001 	mov.w	r0, #1
 80017b2:	bf0c      	ite	eq
 80017b4:	210a      	moveq	r1, #10
 80017b6:	2105      	movne	r1, #5
 80017b8:	f7ff fcf4 	bl	80011a4 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2034      	movs	r0, #52	@ 0x34
 80017c0:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 80017c2:	f648 1394 	movw	r3, #35220	@ 0x8994
 80017c6:	4298      	cmp	r0, r3
 80017c8:	d1d0      	bne.n	800176c <BSP_AUDIO_IN_InitEx+0x10>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80017ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017cc:	2034      	movs	r0, #52	@ 0x34
 80017ce:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 80017d0:	f8c6 7108 	str.w	r7, [r6, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80017d4:	462b      	mov	r3, r5
 80017d6:	683e      	ldr	r6, [r7, #0]
 80017d8:	2264      	movs	r2, #100	@ 0x64
 80017da:	4621      	mov	r1, r4
 80017dc:	2034      	movs	r0, #52	@ 0x34
 80017de:	47b0      	blx	r6
      ret = AUDIO_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	e7c4      	b.n	800176e <BSP_AUDIO_IN_InitEx+0x12>
 80017e4:	200001ec 	.word	0x200001ec
 80017e8:	40015c24 	.word	0x40015c24
 80017ec:	20000004 	.word	0x20000004

080017f0 <BSP_AUDIO_IN_Init>:
{
 80017f0:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80017f2:	460a      	mov	r2, r1
 80017f4:	4601      	mov	r1, r0
 80017f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80017fa:	f7ff bfaf 	b.w	800175c <BSP_AUDIO_IN_InitEx>
	...

08001800 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001800:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001804:	4c1a      	ldr	r4, [pc, #104]	@ (8001870 <LL_FillBuffer+0x70>)
{
 8001806:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001808:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 800180c:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800180e:	2234      	movs	r2, #52	@ 0x34
{
 8001810:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001812:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001814:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001816:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 800181a:	460e      	mov	r6, r1
 800181c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001820:	fb02 4303 	mla	r3, r2, r3, r4
 8001824:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001828:	1eab      	subs	r3, r5, #2
 800182a:	425d      	negs	r5, r3
 800182c:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800182e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001830:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001832:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <LL_FillBuffer+0x74>)
 8001836:	60a5      	str	r5, [r4, #8]
 8001838:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800183a:	f001 fab8 	bl	8002dae <HAL_DMA2D_Init>
 800183e:	b9a0      	cbnz	r0, 800186a <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001840:	4649      	mov	r1, r9
 8001842:	4620      	mov	r0, r4
 8001844:	f001 fc02 	bl	800304c <HAL_DMA2D_ConfigLayer>
 8001848:	b978      	cbnz	r0, 800186a <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4632      	mov	r2, r6
 800184e:	4651      	mov	r1, sl
 8001850:	4620      	mov	r0, r4
 8001852:	f8cd 8000 	str.w	r8, [sp]
 8001856:	f001 fad6 	bl	8002e06 <HAL_DMA2D_Start>
 800185a:	b930      	cbnz	r0, 800186a <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800185c:	210a      	movs	r1, #10
 800185e:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001860:	b002      	add	sp, #8
 8001862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001866:	f001 bae8 	b.w	8002e3a <HAL_DMA2D_PollForTransfer>
}
 800186a:	b002      	add	sp, #8
 800186c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001870:	20000464 	.word	0x20000464
 8001874:	4002b000 	.word	0x4002b000

08001878 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <BSP_LCD_GetXSize+0x14>)
 800187a:	2134      	movs	r1, #52	@ 0x34
 800187c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001880:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001884:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000464 	.word	0x20000464

08001890 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <BSP_LCD_GetYSize+0x14>)
 8001892:	2134      	movs	r1, #52	@ 0x34
 8001894:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001898:	fb01 3302 	mla	r3, r1, r2, r3
}
 800189c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000464 	.word	0x20000464

080018a8 <BSP_LCD_LayerDefaultInit>:
{     
 80018a8:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 80018aa:	2400      	movs	r4, #0
{     
 80018ac:	b08e      	sub	sp, #56	@ 0x38
 80018ae:	460e      	mov	r6, r1
 80018b0:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 80018b2:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80018b4:	f7ff ffe0 	bl	8001878 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 80018b8:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80018bc:	f7ff ffe8 	bl	8001890 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 80018c0:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 80018c6:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 80018ca:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 80018ce:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 80018d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018d4:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018d8:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80018da:	4c0f      	ldr	r4, [pc, #60]	@ (8001918 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80018dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80018e0:	f7ff ffca 	bl	8001878 <BSP_LCD_GetXSize>
 80018e4:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80018e6:	f7ff ffd3 	bl	8001890 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80018ea:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80018ec:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80018ee:	a901      	add	r1, sp, #4
 80018f0:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80018f4:	f002 f946 	bl	8003b84 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80018f8:	230c      	movs	r3, #12
 80018fa:	fb03 4005 	mla	r0, r3, r5, r4
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <BSP_LCD_LayerDefaultInit+0x74>)
 8001908:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800190c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001910:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 8001914:	b00e      	add	sp, #56	@ 0x38
 8001916:	bd70      	pop	{r4, r5, r6, pc}
 8001918:	20000464 	.word	0x20000464
 800191c:	2000004c 	.word	0x2000004c

08001920 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001920:	4b01      	ldr	r3, [pc, #4]	@ (8001928 <BSP_LCD_SelectLayer+0x8>)
 8001922:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 8001926:	4770      	bx	lr
 8001928:	20000464 	.word	0x20000464

0800192c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <BSP_LCD_SetTextColor+0x14>)
 800192e:	210c      	movs	r1, #12
 8001930:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001934:	fb01 3302 	mla	r3, r1, r2, r3
 8001938:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000464 	.word	0x20000464

08001944 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001944:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <BSP_LCD_SetBackColor+0x14>)
 8001946:	210c      	movs	r1, #12
 8001948:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800194c:	fb01 3302 	mla	r3, r1, r2, r3
 8001950:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000464 	.word	0x20000464

0800195c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <BSP_LCD_SetFont+0x14>)
 800195e:	210c      	movs	r1, #12
 8001960:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001964:	fb01 3302 	mla	r3, r1, r2, r3
 8001968:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000464 	.word	0x20000464

08001974 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <BSP_LCD_GetFont+0x14>)
 8001976:	210c      	movs	r1, #12
 8001978:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800197c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001980:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000464 	.word	0x20000464

0800198c <BSP_LCD_Clear>:
{ 
 800198c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800198e:	4c0c      	ldr	r4, [pc, #48]	@ (80019c0 <BSP_LCD_Clear+0x34>)
{ 
 8001990:	4606      	mov	r6, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001992:	f7ff ff71 	bl	8001878 <BSP_LCD_GetXSize>
 8001996:	4605      	mov	r5, r0
 8001998:	f8d4 70e8 	ldr.w	r7, [r4, #232]	@ 0xe8
 800199c:	f7ff ff78 	bl	8001890 <BSP_LCD_GetYSize>
 80019a0:	2234      	movs	r2, #52	@ 0x34
 80019a2:	4603      	mov	r3, r0
 80019a4:	9601      	str	r6, [sp, #4]
 80019a6:	4638      	mov	r0, r7
 80019a8:	fb02 4407 	mla	r4, r2, r7, r4
 80019ac:	2200      	movs	r2, #0
 80019ae:	9200      	str	r2, [sp, #0]
 80019b0:	462a      	mov	r2, r5
 80019b2:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80019b6:	f7ff ff23 	bl	8001800 <LL_FillBuffer>
}
 80019ba:	b003      	add	sp, #12
 80019bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000464 	.word	0x20000464

080019c4 <BSP_LCD_DrawHLine>:
{
 80019c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019c8:	4e14      	ldr	r6, [pc, #80]	@ (8001a1c <BSP_LCD_DrawHLine+0x58>)
 80019ca:	2334      	movs	r3, #52	@ 0x34
{
 80019cc:	4689      	mov	r9, r1
 80019ce:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019d0:	f8d6 70e8 	ldr.w	r7, [r6, #232]	@ 0xe8
{
 80019d4:	4690      	mov	r8, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019d6:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019da:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019de:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019e2:	f7ff ff49 	bl	8001878 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019e6:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019e8:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80019ec:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019f0:	4642      	mov	r2, r8
 80019f2:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80019f6:	bf08      	it	eq
 80019f8:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80019fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a00:	bf18      	it	ne
 8001a02:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001a06:	4638      	mov	r0, r7
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f7ff fef6 	bl	8001800 <LL_FillBuffer>
}
 8001a14:	b002      	add	sp, #8
 8001a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000464 	.word	0x20000464

08001a20 <BSP_LCD_DrawVLine>:
{
 8001a20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001a24:	4d15      	ldr	r5, [pc, #84]	@ (8001a7c <BSP_LCD_DrawVLine+0x5c>)
 8001a26:	2334      	movs	r3, #52	@ 0x34
{
 8001a28:	4617      	mov	r7, r2
 8001a2a:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001a2c:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8001a30:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001a32:	fb03 5306 	mla	r3, r3, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a36:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001a3a:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a3e:	f7ff ff1b 	bl	8001878 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a42:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a44:	fb00 8109 	mla	r1, r0, r9, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001a48:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a4c:	f100 30ff 	add.w	r0, r0, #4294967295
 8001a50:	fb03 5506 	mla	r5, r3, r6, r5
 8001a54:	f04f 0201 	mov.w	r2, #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a58:	bf08      	it	eq
 8001a5a:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a5e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a62:	bf18      	it	ne
 8001a64:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001a68:	9000      	str	r0, [sp, #0]
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	463b      	mov	r3, r7
 8001a70:	f7ff fec6 	bl	8001800 <LL_FillBuffer>
}
 8001a74:	b002      	add	sp, #8
 8001a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000464 	.word	0x20000464

08001a80 <BSP_LCD_DrawRect>:
{
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	461e      	mov	r6, r3
 8001a84:	460d      	mov	r5, r1
 8001a86:	4604      	mov	r4, r0
 8001a88:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001a8a:	f7ff ff9b 	bl	80019c4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001a8e:	19a9      	adds	r1, r5, r6
 8001a90:	463a      	mov	r2, r7
 8001a92:	4620      	mov	r0, r4
 8001a94:	b289      	uxth	r1, r1
 8001a96:	f7ff ff95 	bl	80019c4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001a9a:	4632      	mov	r2, r6
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff ffbe 	bl	8001a20 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001aa4:	19e0      	adds	r0, r4, r7
 8001aa6:	4632      	mov	r2, r6
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	b280      	uxth	r0, r0
}
 8001aac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001ab0:	f7ff bfb6 	b.w	8001a20 <BSP_LCD_DrawVLine>

08001ab4 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <BSP_LCD_DrawPixel+0x3c>)
{
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	460e      	mov	r6, r1
 8001abc:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001abe:	2134      	movs	r1, #52	@ 0x34
 8001ac0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 8001ac4:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ac6:	fb01 3302 	mla	r3, r1, r2, r3
 8001aca:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001ace:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 8001ad2:	f7ff fed1 	bl	8001878 <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ad6:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001ada:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ade:	d104      	bne.n	8001aea <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001ae0:	b2a4      	uxth	r4, r4
 8001ae2:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001aea:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 8001aee:	e7fa      	b.n	8001ae6 <BSP_LCD_DrawPixel+0x32>
 8001af0:	20000464 	.word	0x20000464

08001af4 <BSP_LCD_DisplayChar>:
{
 8001af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af8:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001afa:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8001afc:	f04f 0800 	mov.w	r8, #0
{
 8001b00:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001b04:	4928      	ldr	r1, [pc, #160]	@ (8001ba8 <BSP_LCD_DisplayChar+0xb4>)
 8001b06:	200c      	movs	r0, #12
 8001b08:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 8001b0c:	fb00 110b 	mla	r1, r0, fp, r1
 8001b10:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001b14:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8001b18:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001b1c:	f109 0607 	add.w	r6, r9, #7
 8001b20:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001b22:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001b26:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8001b28:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8001b2c:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8001b30:	f109 32ff 	add.w	r2, r9, #4294967295
 8001b34:	fa52 f380 	uxtab	r3, r2, r0
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001b3c:	45d0      	cmp	r8, sl
 8001b3e:	eb03 0208 	add.w	r2, r3, r8
 8001b42:	b293      	uxth	r3, r2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	d302      	bcc.n	8001b4e <BSP_LCD_DisplayChar+0x5a>
}
 8001b48:	b005      	add	sp, #20
 8001b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001b4e:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8001b50:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8001b52:	d004      	beq.n	8001b5e <BSP_LCD_DisplayChar+0x6a>
 8001b54:	2e02      	cmp	r6, #2
 8001b56:	d109      	bne.n	8001b6c <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8001b58:	882c      	ldrh	r4, [r5, #0]
 8001b5a:	ba64      	rev16	r4, r4
 8001b5c:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001b5e:	2700      	movs	r7, #0
 8001b60:	45b9      	cmp	r9, r7
 8001b62:	d80a      	bhi.n	8001b7a <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8001b64:	f108 0801 	add.w	r8, r8, #1
 8001b68:	4435      	add	r5, r6
 8001b6a:	e7e6      	b.n	8001b3a <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001b6c:	786a      	ldrb	r2, [r5, #1]
 8001b6e:	0424      	lsls	r4, r4, #16
 8001b70:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001b74:	78aa      	ldrb	r2, [r5, #2]
 8001b76:	4314      	orrs	r4, r2
      break;
 8001b78:	e7f1      	b.n	8001b5e <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001b7a:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8001b7c:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001b7e:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001b80:	9b03      	ldr	r3, [sp, #12]
 8001b82:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <BSP_LCD_DisplayChar+0xb4>)
 8001b86:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8001b88:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 8001b8a:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001b8c:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 8001b8e:	4222      	tst	r2, r4
 8001b90:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001b94:	fb02 320b 	mla	r2, r2, fp, r3
 8001b98:	bf14      	ite	ne
 8001b9a:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001b9e:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 8001ba2:	f7ff ff87 	bl	8001ab4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ba6:	e7db      	b.n	8001b60 <BSP_LCD_DisplayChar+0x6c>
 8001ba8:	20000464 	.word	0x20000464

08001bac <BSP_LCD_DisplayStringAt>:
{
 8001bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb0:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 8001bb2:	4610      	mov	r0, r2
{
 8001bb4:	469a      	mov	sl, r3
 8001bb6:	460e      	mov	r6, r1
 8001bb8:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8001bba:	f7fe fb29 	bl	8000210 <strlen>
 8001bbe:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001bc0:	f7ff fe5a 	bl	8001878 <BSP_LCD_GetXSize>
 8001bc4:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <BSP_LCD_DisplayStringAt+0xa4>)
 8001bc6:	210c      	movs	r1, #12
  switch (Mode)
 8001bc8:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001bcc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001bd0:	fb01 3302 	mla	r3, r1, r2, r3
 8001bd4:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 8001bde:	d01e      	beq.n	8001c1e <BSP_LCD_DisplayStringAt+0x72>
 8001be0:	f1ba 0f02 	cmp.w	sl, #2
 8001be4:	d023      	beq.n	8001c2e <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001be6:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 8001bea:	2400      	movs	r4, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bfd8      	it	le
 8001bf0:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001bf4:	f7ff fe40 	bl	8001878 <BSP_LCD_GetXSize>
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	b2a2      	uxth	r2, r4
 8001bfc:	f815 9004 	ldrb.w	r9, [r5, r4]
 8001c00:	3401      	adds	r4, #1
 8001c02:	fb03 0012 	mls	r0, r3, r2, r0
 8001c06:	b280      	uxth	r0, r0
 8001c08:	4298      	cmp	r0, r3
 8001c0a:	bf34      	ite	cc
 8001c0c:	2000      	movcc	r0, #0
 8001c0e:	2001      	movcs	r0, #1
 8001c10:	f1b9 0f00 	cmp.w	r9, #0
 8001c14:	bf08      	it	eq
 8001c16:	2000      	moveq	r0, #0
 8001c18:	b980      	cbnz	r0, 8001c3c <BSP_LCD_DisplayStringAt+0x90>
}
 8001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001c1e:	eba4 0409 	sub.w	r4, r4, r9
 8001c22:	435c      	muls	r4, r3
 8001c24:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001c28:	fa1f f880 	uxth.w	r8, r0
      break;
 8001c2c:	e7db      	b.n	8001be6 <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001c2e:	eba4 0409 	sub.w	r4, r4, r9
 8001c32:	fb14 f403 	smulbb	r4, r4, r3
 8001c36:	eba4 0008 	sub.w	r0, r4, r8
 8001c3a:	e7f5      	b.n	8001c28 <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001c3c:	4640      	mov	r0, r8
 8001c3e:	464a      	mov	r2, r9
 8001c40:	4631      	mov	r1, r6
 8001c42:	f7ff ff57 	bl	8001af4 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001c46:	88bb      	ldrh	r3, [r7, #4]
 8001c48:	4443      	add	r3, r8
 8001c4a:	fa1f f883 	uxth.w	r8, r3
    i++;
 8001c4e:	e7d1      	b.n	8001bf4 <BSP_LCD_DisplayStringAt+0x48>
 8001c50:	20000464 	.word	0x20000464

08001c54 <BSP_LCD_DisplayStringAtLine>:
{  
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	460c      	mov	r4, r1
 8001c58:	4605      	mov	r5, r0
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001c5a:	f7ff fe8b 	bl	8001974 <BSP_LCD_GetFont>
 8001c5e:	88c3      	ldrh	r3, [r0, #6]
 8001c60:	4622      	mov	r2, r4
 8001c62:	2000      	movs	r0, #0
 8001c64:	fb13 f105 	smulbb	r1, r3, r5
 8001c68:	2303      	movs	r3, #3
 8001c6a:	b289      	uxth	r1, r1
}
 8001c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001c70:	f7ff bf9c 	b.w	8001bac <BSP_LCD_DisplayStringAt>

08001c74 <BSP_LCD_DrawBitmap>:
{
 8001c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001c78:	4d32      	ldr	r5, [pc, #200]	@ (8001d44 <BSP_LCD_DrawBitmap+0xd0>)
{
 8001c7a:	4614      	mov	r4, r2
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8001c7c:	8b97      	ldrh	r7, [r2, #28]
{
 8001c7e:	b085      	sub	sp, #20
 8001c80:	f8d2 b00a 	ldr.w	fp, [r2, #10]
 8001c84:	4681      	mov	r9, r0
 8001c86:	f8d2 a012 	ldr.w	sl, [r2, #18]
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001c8a:	f8d2 8016 	ldr.w	r8, [r2, #22]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001c8e:	2234      	movs	r2, #52	@ 0x34
 8001c90:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
{
 8001c94:	9103      	str	r1, [sp, #12]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001c96:	fb02 5303 	mla	r3, r2, r3, r5
 8001c9a:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 8001c9e:	f7ff fdeb 	bl	8001878 <BSP_LCD_GetXSize>
 8001ca2:	9903      	ldr	r1, [sp, #12]
  if ((bit_pixel/8) == 4)
 8001ca4:	f1a7 0320 	sub.w	r3, r7, #32
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001ca8:	fb01 9900 	mla	r9, r1, r0, r9
  if ((bit_pixel/8) == 4)
 8001cac:	2b07      	cmp	r3, #7
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001cae:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  if ((bit_pixel/8) == 4)
 8001cb2:	d919      	bls.n	8001ce8 <BSP_LCD_DrawBitmap+0x74>
  else if ((bit_pixel/8) == 2)
 8001cb4:	f1a7 0310 	sub.w	r3, r7, #16
    input_color_mode = CM_RGB888;
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	bf34      	ite	cc
 8001cbc:	f04f 0902 	movcc.w	r9, #2
 8001cc0:	f04f 0901 	movcs.w	r9, #1
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8001cc4:	08ff      	lsrs	r7, r7, #3
 8001cc6:	f108 33ff 	add.w	r3, r8, #4294967295
 8001cca:	fb0a f707 	mul.w	r7, sl, r7
 8001cce:	fb07 bb03 	mla	fp, r7, r3, fp
    pbmp -= width*(bit_pixel/8);
 8001cd2:	427b      	negs	r3, r7
  for(index=0; index < height; index++)
 8001cd4:	2700      	movs	r7, #0
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8001cd6:	445c      	add	r4, fp
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
  
  hDma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001cd8:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8001d44 <BSP_LCD_DrawBitmap+0xd0>
    pbmp -= width*(bit_pixel/8);
 8001cdc:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
 8001cde:	4547      	cmp	r7, r8
 8001ce0:	d105      	bne.n	8001cee <BSP_LCD_DrawBitmap+0x7a>
}
 8001ce2:	b005      	add	sp, #20
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = CM_ARGB8888;
 8001ce8:	f04f 0900 	mov.w	r9, #0
 8001cec:	e7ea      	b.n	8001cc4 <BSP_LCD_DrawBitmap+0x50>
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001cf4:	4658      	mov	r0, fp
  hDma2dHandler.Init.OutputOffset = 0;     
 8001cf6:	60eb      	str	r3, [r5, #12]
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001cf8:	632b      	str	r3, [r5, #48]	@ 0x30
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001cfa:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8001cfe:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001d02:	22ff      	movs	r2, #255	@ 0xff
  hDma2dHandler.Instance = DMA2D; 
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <BSP_LCD_DrawBitmap+0xd4>)
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001d06:	636a      	str	r2, [r5, #52]	@ 0x34
  hDma2dHandler.Instance = DMA2D; 
 8001d08:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001d0a:	f001 f850 	bl	8002dae <HAL_DMA2D_Init>
 8001d0e:	b988      	cbnz	r0, 8001d34 <BSP_LCD_DrawBitmap+0xc0>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8001d10:	2101      	movs	r1, #1
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 f99a 	bl	800304c <HAL_DMA2D_ConfigLayer>
 8001d18:	b960      	cbnz	r0, 8001d34 <BSP_LCD_DrawBitmap+0xc0>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	4632      	mov	r2, r6
 8001d1e:	4621      	mov	r1, r4
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <BSP_LCD_DrawBitmap+0xd0>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4653      	mov	r3, sl
 8001d26:	f001 f86e 	bl	8002e06 <HAL_DMA2D_Start>
 8001d2a:	b918      	cbnz	r0, 8001d34 <BSP_LCD_DrawBitmap+0xc0>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <BSP_LCD_DrawBitmap+0xd0>)
 8001d30:	f001 f883 	bl	8002e3a <HAL_DMA2D_PollForTransfer>
    address+=  (BSP_LCD_GetXSize()*4);
 8001d34:	f7ff fda0 	bl	8001878 <BSP_LCD_GetXSize>
    pbmp -= width*(bit_pixel/8);
 8001d38:	9b03      	ldr	r3, [sp, #12]
    address+=  (BSP_LCD_GetXSize()*4);
 8001d3a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
  for(index=0; index < height; index++)
 8001d3e:	3701      	adds	r7, #1
    pbmp -= width*(bit_pixel/8);
 8001d40:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 8001d42:	e7cc      	b.n	8001cde <BSP_LCD_DrawBitmap+0x6a>
 8001d44:	20000464 	.word	0x20000464
 8001d48:	4002b000 	.word	0x4002b000

08001d4c <BSP_LCD_FillRect>:
{
 8001d4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d50:	4d1b      	ldr	r5, [pc, #108]	@ (8001dc0 <BSP_LCD_FillRect+0x74>)
{
 8001d52:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d54:	230c      	movs	r3, #12
{
 8001d56:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d58:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8001d5c:	4617      	mov	r7, r2
 8001d5e:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d60:	fb03 5306 	mla	r3, r3, r6, r5
 8001d64:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8001d68:	f7ff fde0 	bl	800192c <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001d6c:	2334      	movs	r3, #52	@ 0x34
 8001d6e:	fb03 5306 	mla	r3, r3, r6, r5
 8001d72:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001d76:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8001d7a:	2a02      	cmp	r2, #2
 8001d7c:	d118      	bne.n	8001db0 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001d7e:	f7ff fd7b 	bl	8001878 <BSP_LCD_GetXSize>
 8001d82:	fb00 4009 	mla	r0, r0, r9, r4
 8001d86:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001d8a:	f7ff fd75 	bl	8001878 <BSP_LCD_GetXSize>
 8001d8e:	230c      	movs	r3, #12
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	463a      	mov	r2, r7
 8001d94:	fb03 5106 	mla	r1, r3, r6, r5
 8001d98:	f8d1 30ec 	ldr.w	r3, [r1, #236]	@ 0xec
 8001d9c:	4651      	mov	r1, sl
 8001d9e:	9000      	str	r0, [sp, #0]
 8001da0:	4630      	mov	r0, r6
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	4643      	mov	r3, r8
 8001da6:	f7ff fd2b 	bl	8001800 <LL_FillBuffer>
}
 8001daa:	b002      	add	sp, #8
 8001dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001db0:	f7ff fd62 	bl	8001878 <BSP_LCD_GetXSize>
 8001db4:	fb00 4409 	mla	r4, r0, r9, r4
 8001db8:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 8001dbc:	e7e5      	b.n	8001d8a <BSP_LCD_FillRect+0x3e>
 8001dbe:	bf00      	nop
 8001dc0:	20000464 	.word	0x20000464

08001dc4 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef4 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001dc6:	484c      	ldr	r0, [pc, #304]	@ (8001ef8 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 8001dce:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8001dd2:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001dd6:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001dd8:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001dda:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001ddc:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8001de0:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001de4:	4e45      	ldr	r6, [pc, #276]	@ (8001efc <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001df4:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8001df8:	9201      	str	r2, [sp, #4]
 8001dfa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dfe:	f042 0210 	orr.w	r2, r2, #16
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e06:	f002 0210 	and.w	r2, r2, #16
 8001e0a:	9202      	str	r2, [sp, #8]
 8001e0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e18:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001e1c:	9203      	str	r2, [sp, #12]
 8001e1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e2a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001e2e:	9204      	str	r2, [sp, #16]
 8001e30:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e3c:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001e40:	9205      	str	r2, [sp, #20]
 8001e42:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e4e:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001e52:	9206      	str	r2, [sp, #24]
 8001e54:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8001e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e60:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001e64:	9207      	str	r2, [sp, #28]
 8001e66:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8001e72:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	9308      	str	r3, [sp, #32]
 8001e7a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001e84:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001e88:	f001 f926 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001e8c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001e8e:	a909      	add	r1, sp, #36	@ 0x24
 8001e90:	481b      	ldr	r0, [pc, #108]	@ (8001f00 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8001e92:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e94:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001e98:	f001 f91e 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8001e9c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001ea0:	a909      	add	r1, sp, #36	@ 0x24
 8001ea2:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001ea4:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ea6:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001eaa:	f001 f915 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001eae:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001eb2:	a909      	add	r1, sp, #36	@ 0x24
 8001eb4:	4813      	ldr	r0, [pc, #76]	@ (8001f04 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001eb6:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001eb8:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001ebc:	f001 f90c 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001ec0:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001ec2:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001ec4:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ec8:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001ecc:	4c0e      	ldr	r4, [pc, #56]	@ (8001f08 <BSP_LCD_MspInit+0x144>)
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f001 f902 	bl	80030d8 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001ed4:	a909      	add	r1, sp, #36	@ 0x24
 8001ed6:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001ed8:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001eda:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001edc:	f001 f8fc 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001ee0:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001ee2:	a909      	add	r1, sp, #36	@ 0x24
 8001ee4:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001ee6:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001eea:	f001 f8f5 	bl	80030d8 <HAL_GPIO_Init>
}
 8001eee:	b00f      	add	sp, #60	@ 0x3c
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40022400 	.word	0x40022400
 8001f08:	40022800 	.word	0x40022800

08001f0c <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001f0c:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <BSP_LCD_ClockConfig+0x20>)
 8001f0e:	2308      	movs	r3, #8
 8001f10:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001f14:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001f16:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001f1a:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f24:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001f26:	f002 b91b 	b.w	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8001f2a:	bf00      	nop
 8001f2c:	20000464 	.word	0x20000464

08001f30 <BSP_LCD_Init>:
{    
 8001f30:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001f32:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001f34:	4c24      	ldr	r4, [pc, #144]	@ (8001fc8 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001f36:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f38:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f3a:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001f3e:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001f42:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f46:	230b      	movs	r3, #11
 8001f48:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f4c:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001f50:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f52:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001f56:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001f5a:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001f5e:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001f62:	f7ff ffd3 	bl	8001f0c <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001f66:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 8001f6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 8001f6e:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001f70:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001f7a:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001f7e:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f82:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 8001f86:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <BSP_LCD_Init+0x9c>)
 8001f88:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001f8c:	f001 fe27 	bl	8003bde <HAL_LTDC_GetState>
 8001f90:	4601      	mov	r1, r0
 8001f92:	b918      	cbnz	r0, 8001f9c <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001f94:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8001f98:	f7ff ff14 	bl	8001dc4 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <BSP_LCD_Init+0xa0>)
 8001f9e:	f001 fd85 	bl	8003aac <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa8:	480a      	ldr	r0, [pc, #40]	@ (8001fd4 <BSP_LCD_Init+0xa4>)
 8001faa:	f001 f97f 	bl	80032ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2108      	movs	r1, #8
 8001fb2:	4809      	ldr	r0, [pc, #36]	@ (8001fd8 <BSP_LCD_Init+0xa8>)
 8001fb4:	f001 f97a 	bl	80032ac <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8001fb8:	f000 f918 	bl	80021ec <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001fbc:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <BSP_LCD_Init+0xac>)
 8001fbe:	f7ff fccd 	bl	800195c <BSP_LCD_SetFont>
}
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000464 	.word	0x20000464
 8001fcc:	40016800 	.word	0x40016800
 8001fd0:	200004a4 	.word	0x200004a4
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40022800 	.word	0x40022800
 8001fdc:	2000004c 	.word	0x2000004c

08001fe0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001fe4:	4c21      	ldr	r4, [pc, #132]	@ (800206c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001fe6:	2710      	movs	r7, #16
 8001fe8:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8001fea:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001fee:	19e5      	adds	r5, r4, r7
 8001ff0:	4621      	mov	r1, r4
{
 8001ff2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001ffa:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ffe:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002002:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002006:	f002 ff01 	bl	8004e0c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800200a:	4630      	mov	r0, r6
 800200c:	f000 f99e 	bl	800234c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002010:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002012:	4621      	mov	r1, r4
 8002014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002018:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800201a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800201e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002022:	f002 fef3 	bl	8004e0c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002026:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002028:	4621      	mov	r1, r4
 800202a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800202e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002030:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002034:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002036:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800203a:	f002 fee7 	bl	8004e0c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800203e:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002042:	4621      	mov	r1, r4
 8002044:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002048:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800204a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800204c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800204e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002050:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002054:	9b01      	ldr	r3, [sp, #4]
 8002056:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002058:	f002 fed8 	bl	8004e0c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800205c:	4649      	mov	r1, r9
 800205e:	4628      	mov	r0, r5
}
 8002060:	b003      	add	sp, #12
 8002062:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002066:	f002 bef0 	b.w	8004e4a <HAL_SDRAM_ProgramRefreshRate>
 800206a:	bf00      	nop
 800206c:	200005ec 	.word	0x200005ec

08002070 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002070:	4b55      	ldr	r3, [pc, #340]	@ (80021c8 <BSP_SDRAM_MspInit+0x158>)
 8002072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002074:	f042 0201 	orr.w	r2, r2, #1
{  
 8002078:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 800207c:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800207e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 8002080:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002082:	a909      	add	r1, sp, #36	@ 0x24
 8002084:	4851      	ldr	r0, [pc, #324]	@ (80021cc <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002086:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800208a:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002092:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30
 8002098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209a:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 800209e:	9202      	str	r2, [sp, #8]
 80020a0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a4:	f042 0204 	orr.w	r2, r2, #4
 80020a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ac:	f002 0204 	and.w	r2, r2, #4
 80020b0:	9203      	str	r2, [sp, #12]
 80020b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020b6:	f042 0208 	orr.w	r2, r2, #8
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80020bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020be:	f002 0208 	and.w	r2, r2, #8
 80020c2:	9204      	str	r2, [sp, #16]
 80020c4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c8:	f042 0210 	orr.w	r2, r2, #16
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d0:	f002 0210 	and.w	r2, r2, #16
 80020d4:	9205      	str	r2, [sp, #20]
 80020d6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e2:	f002 0220 	and.w	r2, r2, #32
 80020e6:	9206      	str	r2, [sp, #24]
 80020e8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80020f8:	9207      	str	r2, [sp, #28]
 80020fa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002102:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002104:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	9308      	str	r3, [sp, #32]
 800210e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002110:	2302      	movs	r3, #2
 8002112:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002116:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002118:	230c      	movs	r3, #12
 800211a:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800211c:	2308      	movs	r3, #8
 800211e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002120:	f000 ffda 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002124:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002128:	a909      	add	r1, sp, #36	@ 0x24
 800212a:	4829      	ldr	r0, [pc, #164]	@ (80021d0 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800212c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800212e:	f000 ffd3 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002132:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002136:	a909      	add	r1, sp, #36	@ 0x24
 8002138:	4826      	ldr	r0, [pc, #152]	@ (80021d4 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800213a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800213c:	f000 ffcc 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002140:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002144:	a909      	add	r1, sp, #36	@ 0x24
 8002146:	4824      	ldr	r0, [pc, #144]	@ (80021d8 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002148:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800214a:	f000 ffc5 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800214e:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002152:	a909      	add	r1, sp, #36	@ 0x24
 8002154:	4821      	ldr	r0, [pc, #132]	@ (80021dc <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002156:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002158:	f000 ffbe 	bl	80030d8 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800215c:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800215e:	a909      	add	r1, sp, #36	@ 0x24
 8002160:	481f      	ldr	r0, [pc, #124]	@ (80021e0 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002162:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002164:	f000 ffb8 	bl	80030d8 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800216a:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800216c:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002170:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002174:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002176:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002178:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800217a:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800217e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002182:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002186:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800218a:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800218e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002192:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002196:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002198:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800219c:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <BSP_SDRAM_MspInit+0x178>)
 800219e:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80021a2:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80021a4:	6335      	str	r5, [r6, #48]	@ 0x30
 80021a6:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 80021a8:	f000 fc5a 	bl	8002a60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80021ac:	4628      	mov	r0, r5
 80021ae:	f000 fbd9 	bl	8002964 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80021b2:	4622      	mov	r2, r4
 80021b4:	210f      	movs	r1, #15
 80021b6:	2038      	movs	r0, #56	@ 0x38
 80021b8:	f000 fb20 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80021bc:	2038      	movs	r0, #56	@ 0x38
 80021be:	f000 fb4f 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 80021c2:	b00e      	add	sp, #56	@ 0x38
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800
 80021e0:	40021c00 	.word	0x40021c00
 80021e4:	200005ec 	.word	0x200005ec
 80021e8:	40026410 	.word	0x40026410

080021ec <BSP_SDRAM_Init>:
{ 
 80021ec:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021ee:	4c1b      	ldr	r4, [pc, #108]	@ (800225c <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 80021f0:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 80021f4:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021f6:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021f8:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021fc:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 80021fe:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002200:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8002202:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8002206:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 800220a:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800220e:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 8002210:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002214:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002218:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800221a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800221e:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002226:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002228:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800222c:	f104 0510 	add.w	r5, r4, #16
 8002230:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002232:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002236:	f7ff ff1b 	bl	8002070 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800223a:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 800223e:	4628      	mov	r0, r5
 8002240:	4c08      	ldr	r4, [pc, #32]	@ (8002264 <BSP_SDRAM_Init+0x78>)
 8002242:	f002 fdc3 	bl	8004dcc <HAL_SDRAM_Init>
 8002246:	3800      	subs	r0, #0
 8002248:	bf18      	it	ne
 800224a:	2001      	movne	r0, #1
 800224c:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800224e:	f240 6003 	movw	r0, #1539	@ 0x603
 8002252:	f7ff fec5 	bl	8001fe0 <BSP_SDRAM_Initialization_sequence>
}
 8002256:	7820      	ldrb	r0, [r4, #0]
 8002258:	bd38      	pop	{r3, r4, r5, pc}
 800225a:	bf00      	nop
 800225c:	200005ec 	.word	0x200005ec
 8002260:	a0000140 	.word	0xa0000140
 8002264:	20000074 	.word	0x20000074

08002268 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	490f      	ldr	r1, [pc, #60]	@ (80022a8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800226a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800226c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <SystemInit+0x44>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002282:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 800228a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800228e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <SystemInit+0x48>)
 8002292:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800229a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800229c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800229e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80022a2:	608b      	str	r3, [r1, #8]
#endif
}
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000ed00 	.word	0xe000ed00
 80022ac:	40023800 	.word	0x40023800
 80022b0:	24003010 	.word	0x24003010

080022b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ba:	4e0e      	ldr	r6, [pc, #56]	@ (80022f4 <HAL_InitTick+0x3c>)
 80022bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80022c0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c2:	7832      	ldrb	r2, [r6, #0]
 80022c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <HAL_InitTick+0x40>)
 80022ca:	6810      	ldr	r0, [r2, #0]
 80022cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80022d0:	f000 fad4 	bl	800287c <HAL_SYSTICK_Config>
 80022d4:	4604      	mov	r4, r0
 80022d6:	b950      	cbnz	r0, 80022ee <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d8:	2d0f      	cmp	r5, #15
 80022da:	d808      	bhi.n	80022ee <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	4602      	mov	r2, r0
 80022de:	4629      	mov	r1, r5
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 fa8a 	bl	80027fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4620      	mov	r0, r4
 80022ea:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	e7fc      	b.n	80022ec <HAL_InitTick+0x34>
 80022f2:	bf00      	nop
 80022f4:	2000007c 	.word	0x2000007c
 80022f8:	20000078 	.word	0x20000078

080022fc <HAL_Init>:
{
 80022fc:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002308:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002310:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002312:	f000 fa61 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	200f      	movs	r0, #15
 8002318:	f7ff ffce 	bl	80022b8 <HAL_InitTick>
  HAL_MspInit();
 800231c:	f7ff ffca 	bl	80022b4 <HAL_MspInit>
}
 8002320:	2000      	movs	r0, #0
 8002322:	bd08      	pop	{r3, pc}
 8002324:	40023c00 	.word	0x40023c00

08002328 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002328:	4a03      	ldr	r2, [pc, #12]	@ (8002338 <HAL_IncTick+0x10>)
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_IncTick+0x14>)
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	440b      	add	r3, r1
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	2000070c 	.word	0x2000070c
 800233c:	2000007c 	.word	0x2000007c

08002340 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002340:	4b01      	ldr	r3, [pc, #4]	@ (8002348 <HAL_GetTick+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	2000070c 	.word	0x2000070c

0800234c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fff6 	bl	8002340 <HAL_GetTick>
 8002354:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002358:	bf1e      	ittt	ne
 800235a:	4b04      	ldrne	r3, [pc, #16]	@ (800236c <HAL_Delay+0x20>)
 800235c:	781b      	ldrbne	r3, [r3, #0]
 800235e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	1b43      	subs	r3, r0, r5
 8002366:	42a3      	cmp	r3, r4
 8002368:	d3fa      	bcc.n	8002360 <HAL_Delay+0x14>
  {
  }
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	2000007c 	.word	0x2000007c

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if(hadc == NULL)
 8002372:	4604      	mov	r4, r0
 8002374:	2800      	cmp	r0, #0
 8002376:	f000 809b 	beq.w	80024b0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800237a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800237c:	b925      	cbnz	r5, 8002388 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237e:	f003 fb01 	bl	8005984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002382:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002384:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002388:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800238a:	06db      	lsls	r3, r3, #27
 800238c:	f100 808e 	bmi.w	80024ac <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002392:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6423      	str	r3, [r4, #64]	@ 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023a0:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <HAL_ADC_Init+0x144>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80023a8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	6861      	ldr	r1, [r4, #4]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023b4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023c4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023ce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	430a      	orrs	r2, r1

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e4:	4934      	ldr	r1, [pc, #208]	@ (80024b8 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023e6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80023ea:	428a      	cmp	r2, r1
 80023ec:	d052      	beq.n	8002494 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 80023f4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	430a      	orrs	r2, r1

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800240c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002410:	f022 0202 	bic.w	r2, r2, #2
 8002414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800241c:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002422:	2a00      	cmp	r2, #0
 8002424:	d03e      	beq.n	80024a4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002426:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002428:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800242a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800242e:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002430:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002438:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002440:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8002442:	2000      	movs	r0, #0
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002446:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002448:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800244c:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800244e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002452:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8002466:	ea42 2241 	orr.w	r2, r2, r1, lsl #9

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800246a:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800247c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800247e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800248c:	2300      	movs	r3, #0
 800248e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002492:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024a2:	e7b2      	b.n	800240a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024aa:	e7c9      	b.n	8002440 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e7ed      	b.n	800248c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e7ee      	b.n	8002492 <HAL_ADC_Init+0x122>
 80024b4:	40012300 	.word	0x40012300
 80024b8:	0f000001 	.word	0x0f000001

080024bc <HAL_ADC_Start_DMA>:
{
 80024bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024be:	4613      	mov	r3, r2
  __IO uint32_t counter = 0;
 80024c0:	2200      	movs	r2, #0
{
 80024c2:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80024c4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80024c6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80024ca:	2a01      	cmp	r2, #1
 80024cc:	d07b      	beq.n	80025c6 <HAL_ADC_Start_DMA+0x10a>
 80024ce:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024d0:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80024d2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024d6:	68aa      	ldr	r2, [r5, #8]
 80024d8:	07d0      	lsls	r0, r2, #31
 80024da:	d50b      	bpl.n	80024f4 <HAL_ADC_Start_DMA+0x38>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024dc:	68aa      	ldr	r2, [r5, #8]
 80024de:	07d2      	lsls	r2, r2, #31
 80024e0:	d41b      	bmi.n	800251a <HAL_ADC_Start_DMA+0x5e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6463      	str	r3, [r4, #68]	@ 0x44
 80024f2:	e065      	b.n	80025c0 <HAL_ADC_Start_DMA+0x104>
    __HAL_ADC_ENABLE(hadc);
 80024f4:	68aa      	ldr	r2, [r5, #8]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024fc:	4a33      	ldr	r2, [pc, #204]	@ (80025cc <HAL_ADC_Start_DMA+0x110>)
 80024fe:	6810      	ldr	r0, [r2, #0]
 8002500:	4a33      	ldr	r2, [pc, #204]	@ (80025d0 <HAL_ADC_Start_DMA+0x114>)
 8002502:	fbb0 f0f2 	udiv	r0, r0, r2
 8002506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800250a:	9001      	str	r0, [sp, #4]
    while(counter != 0)
 800250c:	9a01      	ldr	r2, [sp, #4]
 800250e:	2a00      	cmp	r2, #0
 8002510:	d0e4      	beq.n	80024dc <HAL_ADC_Start_DMA+0x20>
      counter--;
 8002512:	9a01      	ldr	r2, [sp, #4]
 8002514:	3a01      	subs	r2, #1
 8002516:	9201      	str	r2, [sp, #4]
 8002518:	e7f8      	b.n	800250c <HAL_ADC_Start_DMA+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800251c:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8002520:	f020 0001 	bic.w	r0, r0, #1
 8002524:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002528:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800252a:	686a      	ldr	r2, [r5, #4]
 800252c:	0550      	lsls	r0, r2, #21
 800252e:	d505      	bpl.n	800253c <HAL_ADC_Start_DMA+0x80>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002530:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002532:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8002536:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 800253a:	6420      	str	r0, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800253e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002542:	d002      	beq.n	800254a <HAL_ADC_Start_DMA+0x8e>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002544:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002546:	f022 0206 	bic.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800254a:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800254c:	2200      	movs	r2, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800254e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    __HAL_UNLOCK(hadc);
 8002550:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002554:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <HAL_ADC_Start_DMA+0x118>)
 8002556:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002558:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <HAL_ADC_Start_DMA+0x11c>)
 800255a:	6402      	str	r2, [r0, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800255c:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <HAL_ADC_Start_DMA+0x120>)
 800255e:	64c2      	str	r2, [r0, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002560:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002564:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002566:	686a      	ldr	r2, [r5, #4]
 8002568:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800256c:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800256e:	68aa      	ldr	r2, [r5, #8]
 8002570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002574:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002576:	460a      	mov	r2, r1
 8002578:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
 800257c:	f000 fa9a 	bl	8002ab4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002580:	4917      	ldr	r1, [pc, #92]	@ (80025e0 <HAL_ADC_Start_DMA+0x124>)
 8002582:	684b      	ldr	r3, [r1, #4]
 8002584:	f013 0f1f 	tst.w	r3, #31
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	d108      	bne.n	800259e <HAL_ADC_Start_DMA+0xe2>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002592:	d115      	bne.n	80025c0 <HAL_ADC_Start_DMA+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	e010      	b.n	80025c0 <HAL_ADC_Start_DMA+0x104>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800259e:	4a11      	ldr	r2, [pc, #68]	@ (80025e4 <HAL_ADC_Start_DMA+0x128>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d107      	bne.n	80025b4 <HAL_ADC_Start_DMA+0xf8>
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80025aa:	d103      	bne.n	80025b4 <HAL_ADC_Start_DMA+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025b2:	609a      	str	r2, [r3, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025b4:	684a      	ldr	r2, [r1, #4]
 80025b6:	06d2      	lsls	r2, r2, #27
 80025b8:	d402      	bmi.n	80025c0 <HAL_ADC_Start_DMA+0x104>
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025ba:	4a0b      	ldr	r2, [pc, #44]	@ (80025e8 <HAL_ADC_Start_DMA+0x12c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d0e5      	beq.n	800258c <HAL_ADC_Start_DMA+0xd0>
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	b003      	add	sp, #12
 80025c4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80025c6:	2002      	movs	r0, #2
 80025c8:	e7fb      	b.n	80025c2 <HAL_ADC_Start_DMA+0x106>
 80025ca:	bf00      	nop
 80025cc:	20000078 	.word	0x20000078
 80025d0:	000f4240 	.word	0x000f4240
 80025d4:	08002611 	.word	0x08002611
 80025d8:	080025ef 	.word	0x080025ef
 80025dc:	080025fb 	.word	0x080025fb
 80025e0:	40012300 	.word	0x40012300
 80025e4:	40012000 	.word	0x40012000
 80025e8:	40012200 	.word	0x40012200

080025ec <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80025ec:	4770      	bx	lr

080025ee <ADC_DMAHalfConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025ee:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80025f0:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025f2:	f7ff fffb 	bl	80025ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f6:	bd08      	pop	{r3, pc}

080025f8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80025f8:	4770      	bx	lr

080025fa <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025fa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80025fc:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025fe:	2340      	movs	r3, #64	@ 0x40
 8002600:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002602:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800260a:	f7ff fff5 	bl	80025f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800260e:	bd08      	pop	{r3, pc}

08002610 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002610:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002614:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800261a:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800261c:	d123      	bne.n	8002666 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800261e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002622:	641a      	str	r2, [r3, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	6891      	ldr	r1, [r2, #8]
 8002628:	f011 5f40 	tst.w	r1, #805306368	@ 0x30000000
 800262c:	d117      	bne.n	800265e <ADC_DMAConvCplt+0x4e>
 800262e:	6999      	ldr	r1, [r3, #24]
 8002630:	b9a9      	cbnz	r1, 800265e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002632:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002634:	f411 0f70 	tst.w	r1, #15728640	@ 0xf00000
 8002638:	d002      	beq.n	8002640 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800263a:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800263c:	0548      	lsls	r0, r1, #21
 800263e:	d40e      	bmi.n	800265e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002640:	6851      	ldr	r1, [r2, #4]
 8002642:	f021 0120 	bic.w	r1, r1, #32
 8002646:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002652:	04d1      	lsls	r1, r2, #19
 8002654:	d403      	bmi.n	800265e <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f986 	bl	8005970 <HAL_ADC_ConvCpltCallback>
}
 8002664:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002666:	06d2      	lsls	r2, r2, #27
 8002668:	d503      	bpl.n	8002672 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ffc4 	bl	80025f8 <HAL_ADC_ErrorCallback>
 8002670:	e7f8      	b.n	8002664 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267a:	4718      	bx	r3

0800267c <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 800267c:	2300      	movs	r3, #0
{
 800267e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8002680:	9301      	str	r3, [sp, #4]
{
 8002682:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002684:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	f000 8098 	beq.w	80027be <HAL_ADC_ConfigChannel+0x142>
 800268e:	2301      	movs	r3, #1
 8002690:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002694:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	b285      	uxth	r5, r0
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800269a:	2809      	cmp	r0, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800269c:	688e      	ldr	r6, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800269e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80026a2:	d939      	bls.n	8002718 <HAL_ADC_ConfigChannel+0x9c>
 80026a4:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80026a8:	d036      	beq.n	8002718 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026aa:	3a1e      	subs	r2, #30
 80026ac:	f04f 0c07 	mov.w	ip, #7
 80026b0:	68df      	ldr	r7, [r3, #12]
 80026b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80026b6:	ea27 070c 	bic.w	r7, r7, ip
 80026ba:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026bc:	4f41      	ldr	r7, [pc, #260]	@ (80027c4 <HAL_ADC_ConfigChannel+0x148>)
 80026be:	42b8      	cmp	r0, r7
 80026c0:	d125      	bne.n	800270e <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026c8:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 80026ca:	6849      	ldr	r1, [r1, #4]
 80026cc:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ce:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 80026d2:	d82e      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d4:	3a05      	subs	r2, #5
 80026d6:	261f      	movs	r6, #31
 80026d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026da:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026dc:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e0:	ea21 0106 	bic.w	r1, r1, r6
 80026e4:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026e8:	430a      	orrs	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026ec:	4a36      	ldr	r2, [pc, #216]	@ (80027c8 <HAL_ADC_ConfigChannel+0x14c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x88>
 80026f2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80026f6:	d137      	bne.n	8002768 <HAL_ADC_ConfigChannel+0xec>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026f8:	f8d2 3304 	ldr.w	r3, [r2, #772]	@ 0x304
 80026fc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002700:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  __HAL_UNLOCK(hadc);
 8002704:	2000      	movs	r0, #0
 8002706:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800270a:	b003      	add	sp, #12
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800270e:	68df      	ldr	r7, [r3, #12]
 8002710:	fa06 f202 	lsl.w	r2, r6, r2
 8002714:	433a      	orrs	r2, r7
 8002716:	e7d7      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x4c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002718:	f04f 0c07 	mov.w	ip, #7
 800271c:	691f      	ldr	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800271e:	4096      	lsls	r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002720:	fa0c fc02 	lsl.w	ip, ip, r2
 8002724:	ea27 070c 	bic.w	r7, r7, ip
 8002728:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800272a:	691f      	ldr	r7, [r3, #16]
 800272c:	433e      	orrs	r6, r7
 800272e:	611e      	str	r6, [r3, #16]
 8002730:	e7cb      	b.n	80026ca <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13)
 8002732:	290c      	cmp	r1, #12
 8002734:	f04f 011f 	mov.w	r1, #31
 8002738:	d80b      	bhi.n	8002752 <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800273a:	3a23      	subs	r2, #35	@ 0x23
 800273c:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 800273e:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002740:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002744:	ea26 0101 	bic.w	r1, r6, r1
 8002748:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800274a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800274c:	430a      	orrs	r2, r1
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002750:	e7cc      	b.n	80026ec <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002752:	3a41      	subs	r2, #65	@ 0x41
 8002754:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8002756:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002758:	4095      	lsls	r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800275a:	ea26 0101 	bic.w	r1, r6, r1
 800275e:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002762:	430d      	orrs	r5, r1
 8002764:	62dd      	str	r5, [r3, #44]	@ 0x2c
 8002766:	e7c1      	b.n	80026ec <HAL_ADC_ConfigChannel+0x70>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002768:	2812      	cmp	r0, #18
 800276a:	d109      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x104>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_ADC_ConfigChannel+0x150>)
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8002774:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800277c:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800277e:	e7c1      	b.n	8002704 <HAL_ADC_ConfigChannel+0x88>
 8002780:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <HAL_ADC_ConfigChannel+0x148>)
 8002782:	4298      	cmp	r0, r3
 8002784:	d001      	beq.n	800278a <HAL_ADC_ConfigChannel+0x10e>
 8002786:	2811      	cmp	r0, #17
 8002788:	d1bc      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x88>
    ADC->CCR &= ~ADC_CCR_VBATE;
 800278a:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <HAL_ADC_ConfigChannel+0x150>)
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8002792:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800279a:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_ADC_ConfigChannel+0x148>)
 800279e:	4298      	cmp	r0, r3
 80027a0:	d1b0      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x88>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_ADC_ConfigChannel+0x154>)
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <HAL_ADC_ConfigChannel+0x158>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027ac:	220a      	movs	r2, #10
 80027ae:	4353      	muls	r3, r2
        counter--;
 80027b0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0a5      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 80027b8:	9b01      	ldr	r3, [sp, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	e7f8      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 80027be:	2002      	movs	r0, #2
 80027c0:	e7a3      	b.n	800270a <HAL_ADC_ConfigChannel+0x8e>
 80027c2:	bf00      	nop
 80027c4:	10000012 	.word	0x10000012
 80027c8:	40012000 	.word	0x40012000
 80027cc:	40012300 	.word	0x40012300
 80027d0:	20000078 	.word	0x20000078
 80027d4:	000f4240 	.word	0x000f4240

080027d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4907      	ldr	r1, [pc, #28]	@ (80027f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027e6:	0412      	lsls	r2, r2, #16
 80027e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80027f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b530      	push	{r4, r5, lr}
 8002800:	68dc      	ldr	r4, [r3, #12]
 8002802:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002806:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	2b04      	cmp	r3, #4
 800280e:	bf28      	it	cs
 8002810:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002818:	bf8c      	ite	hi
 800281a:	3c03      	subhi	r4, #3
 800281c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002822:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	fa03 f304 	lsl.w	r3, r3, r4
 8002834:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002838:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800283c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800283e:	db06      	blt.n	800284e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002844:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002848:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800284c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284e:	f000 000f 	and.w	r0, r0, #15
 8002852:	4a02      	ldr	r2, [pc, #8]	@ (800285c <HAL_NVIC_SetPriority+0x60>)
 8002854:	5413      	strb	r3, [r2, r0]
 8002856:	e7f9      	b.n	800284c <HAL_NVIC_SetPriority+0x50>
 8002858:	e000ed00 	.word	0xe000ed00
 800285c:	e000ed14 	.word	0xe000ed14

08002860 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002860:	2800      	cmp	r0, #0
 8002862:	db07      	blt.n	8002874 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002864:	0941      	lsrs	r1, r0, #5
 8002866:	2301      	movs	r3, #1
 8002868:	f000 001f 	and.w	r0, r0, #31
 800286c:	4a02      	ldr	r2, [pc, #8]	@ (8002878 <HAL_NVIC_EnableIRQ+0x18>)
 800286e:	4083      	lsls	r3, r0
 8002870:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000e100 	.word	0xe000e100

0800287c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	3801      	subs	r0, #1
 800287e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002882:	d20b      	bcs.n	800289c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002884:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_SYSTICK_Config+0x24>)
 800288a:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288c:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288e:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002894:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002896:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002898:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800289c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028a4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028a8:	4b04      	ldr	r3, [pc, #16]	@ (80028bc <HAL_MPU_Disable+0x18>)
 80028aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_MPU_Enable+0x1c>)
 80028c2:	f040 0001 	orr.w	r0, r0, #1
 80028c6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028d6:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028e0:	7843      	ldrb	r3, [r0, #1]
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <HAL_MPU_ConfigRegion+0x54>)
 80028e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80028e8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80028f4:	6843      	ldr	r3, [r0, #4]
 80028f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028fa:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028fc:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002900:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002904:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002906:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002908:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800290a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800290e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002910:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002914:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002916:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800291a:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800291c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002920:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002922:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002926:	7a01      	ldrb	r1, [r0, #8]
 8002928:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800292c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002938:	6803      	ldr	r3, [r0, #0]
{
 800293a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	2018      	movs	r0, #24
 800293e:	b2d9      	uxtb	r1, r3
 8002940:	3910      	subs	r1, #16
 8002942:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002946:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002948:	4c05      	ldr	r4, [pc, #20]	@ (8002960 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800294a:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294c:	5c20      	ldrb	r0, [r4, r0]
 800294e:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002950:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8002954:	f020 0003 	bic.w	r0, r0, #3
 8002958:	bf88      	it	hi
 800295a:	3004      	addhi	r0, #4
 800295c:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800295e:	bd10      	pop	{r4, pc}
 8002960:	0800abb8 	.word	0x0800abb8

08002964 <HAL_DMA_Init>:
{
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fcea 	bl	8002340 <HAL_GetTick>
 800296c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800296e:	2c00      	cmp	r4, #0
 8002970:	d060      	beq.n	8002a34 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002972:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8002974:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002976:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800297a:	2300      	movs	r3, #0
 800297c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002980:	6813      	ldr	r3, [r2, #0]
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	07d8      	lsls	r0, r3, #31
 800298e:	d42e      	bmi.n	80029ee <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002990:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002992:	4832      	ldr	r0, [pc, #200]	@ (8002a5c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002996:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002998:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800299c:	432b      	orrs	r3, r5
 800299e:	68e5      	ldr	r5, [r4, #12]
 80029a0:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a2:	6925      	ldr	r5, [r4, #16]
 80029a4:	432b      	orrs	r3, r5
 80029a6:	6965      	ldr	r5, [r4, #20]
 80029a8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	69e5      	ldr	r5, [r4, #28]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b0:	6a25      	ldr	r5, [r4, #32]
 80029b2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b4:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80029b8:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029ba:	bf02      	ittt	eq
 80029bc:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 80029c0:	4335      	orreq	r5, r6
 80029c2:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c4:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 80029c6:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 80029c8:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029ca:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80029ce:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d2:	d135      	bne.n	8002a40 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 80029d4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029d6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80029d8:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029da:	b38d      	cbz	r5, 8002a40 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029dc:	b991      	cbnz	r1, 8002a04 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 80029de:	2801      	cmp	r0, #1
 80029e0:	d020      	beq.n	8002a24 <HAL_DMA_Init+0xc0>
 80029e2:	f030 0102 	bics.w	r1, r0, #2
 80029e6:	d12b      	bne.n	8002a40 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e8:	01e9      	lsls	r1, r5, #7
 80029ea:	d529      	bpl.n	8002a40 <HAL_DMA_Init+0xdc>
 80029ec:	e01d      	b.n	8002a2a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ee:	f7ff fca7 	bl	8002340 <HAL_GetTick>
 80029f2:	1b40      	subs	r0, r0, r5
 80029f4:	2805      	cmp	r0, #5
 80029f6:	d9c7      	bls.n	8002988 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f8:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fc:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a04:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8002a08:	d116      	bne.n	8002a38 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8002a0a:	2803      	cmp	r0, #3
 8002a0c:	d818      	bhi.n	8002a40 <HAL_DMA_Init+0xdc>
 8002a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8002a14 <HAL_DMA_Init+0xb0>)
 8002a10:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8002a14:	08002a2b 	.word	0x08002a2b
 8002a18:	080029e9 	.word	0x080029e9
 8002a1c:	08002a2b 	.word	0x08002a2b
 8002a20:	08002a25 	.word	0x08002a25
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a24:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8002a28:	d10a      	bne.n	8002a40 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a2a:	2340      	movs	r3, #64	@ 0x40
 8002a2c:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
 8002a36:	e7e4      	b.n	8002a02 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f6      	bls.n	8002a2a <HAL_DMA_Init+0xc6>
 8002a3c:	2803      	cmp	r0, #3
 8002a3e:	d0d3      	beq.n	80029e8 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8002a40:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff ff78 	bl	8002938 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a48:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002a4a:	233f      	movs	r3, #63	@ 0x3f
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a50:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002a52:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a54:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002a56:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002a5a:	e7d2      	b.n	8002a02 <HAL_DMA_Init+0x9e>
 8002a5c:	f010803f 	.word	0xf010803f

08002a60 <HAL_DMA_DeInit>:
{
 8002a60:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002a62:	4605      	mov	r5, r0
 8002a64:	b320      	cbz	r0, 8002ab0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a66:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	b2dc      	uxtb	r4, r3
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002a70:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002a72:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002a7c:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8002a7e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002a80:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002a82:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002a84:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002a86:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002a88:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a8a:	f7ff ff55 	bl	8002938 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002a90:	233f      	movs	r3, #63	@ 0x3f
 8002a92:	4093      	lsls	r3, r2
 8002a94:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a96:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8002a98:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002a9c:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002aa0:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002aa4:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8002aa8:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8002aac:	4620      	mov	r0, r4
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002ab0:	2401      	movs	r4, #1
 8002ab2:	e7fb      	b.n	8002aac <HAL_DMA_DeInit+0x4c>

08002ab4 <HAL_DMA_Start_IT>:
{
 8002ab4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002ab6:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aba:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002abc:	2c01      	cmp	r4, #1
 8002abe:	d034      	beq.n	8002b2a <HAL_DMA_Start_IT+0x76>
 8002ac0:	2401      	movs	r4, #1
 8002ac2:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac6:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002aca:	2c01      	cmp	r4, #1
 8002acc:	f04f 0400 	mov.w	r4, #0
 8002ad0:	d129      	bne.n	8002b26 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad2:	2502      	movs	r5, #2
 8002ad4:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ada:	6804      	ldr	r4, [r0, #0]
 8002adc:	6825      	ldr	r5, [r4, #0]
 8002ade:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8002ae2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002ae4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae6:	6883      	ldr	r3, [r0, #8]
 8002ae8:	2b40      	cmp	r3, #64	@ 0x40
 8002aea:	d119      	bne.n	8002b20 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8002aec:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002aee:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002af2:	233f      	movs	r3, #63	@ 0x3f
 8002af4:	4093      	lsls	r3, r2
 8002af6:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	f043 0316 	orr.w	r3, r3, #22
 8002afe:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b00:	6963      	ldr	r3, [r4, #20]
 8002b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b06:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002b08:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002b0a:	b11b      	cbz	r3, 8002b14 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f043 0308 	orr.w	r3, r3, #8
 8002b12:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b14:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6023      	str	r3, [r4, #0]
}
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8002b20:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b22:	60e2      	str	r2, [r4, #12]
 8002b24:	e7e4      	b.n	8002af0 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002b26:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	e7f7      	b.n	8002b1e <HAL_DMA_Start_IT+0x6a>

08002b2e <HAL_DMA_Abort>:
{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002b34:	f7ff fc04 	bl	8002340 <HAL_GetTick>
 8002b38:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b3a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d006      	beq.n	8002b50 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b42:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b46:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b60:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b62:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b64:	b90a      	cbnz	r2, 8002b6a <HAL_DMA_Abort+0x3c>
 8002b66:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002b68:	b11a      	cbz	r2, 8002b72 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f022 0208 	bic.w	r2, r2, #8
 8002b70:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	f010 0001 	ands.w	r0, r0, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002b86:	233f      	movs	r3, #63	@ 0x3f
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002b92:	e7d9      	b.n	8002b48 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b94:	f7ff fbd4 	bl	8002340 <HAL_GetTick>
 8002b98:	1b40      	subs	r0, r0, r5
 8002b9a:	2805      	cmp	r0, #5
 8002b9c:	d9ed      	bls.n	8002b7a <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9e:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8002ba8:	e7ce      	b.n	8002b48 <HAL_DMA_Abort+0x1a>
	...

08002bac <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8002bac:	2300      	movs	r3, #0
{
 8002bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8002bb0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8002bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d24 <HAL_DMA_IRQHandler+0x178>)
{
 8002bb6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8002bba:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002bbe:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	4232      	tst	r2, r6
 8002bc4:	d00c      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bc6:	6801      	ldr	r1, [r0, #0]
 8002bc8:	6808      	ldr	r0, [r1, #0]
 8002bca:	0740      	lsls	r0, r0, #29
 8002bcc:	d508      	bpl.n	8002be0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bce:	6808      	ldr	r0, [r1, #0]
 8002bd0:	f020 0004 	bic.w	r0, r0, #4
 8002bd4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bd6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be0:	2201      	movs	r2, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	4232      	tst	r2, r6
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be8:	6821      	ldr	r1, [r4, #0]
 8002bea:	6949      	ldr	r1, [r1, #20]
 8002bec:	0609      	lsls	r1, r1, #24
 8002bee:	d504      	bpl.n	8002bfa <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bf0:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002bf4:	f042 0202 	orr.w	r2, r2, #2
 8002bf8:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	4232      	tst	r2, r6
 8002c00:	d008      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	6809      	ldr	r1, [r1, #0]
 8002c06:	0788      	lsls	r0, r1, #30
 8002c08:	d504      	bpl.n	8002c14 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c0a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c0e:	f042 0204 	orr.w	r2, r2, #4
 8002c12:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	2210      	movs	r2, #16
 8002c16:	409a      	lsls	r2, r3
 8002c18:	4232      	tst	r2, r6
 8002c1a:	d010      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	0709      	lsls	r1, r1, #28
 8002c22:	d50c      	bpl.n	8002c3e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c24:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	0350      	lsls	r0, r2, #13
 8002c2a:	d537      	bpl.n	8002c9c <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0319      	lsls	r1, r3, #12
 8002c30:	d401      	bmi.n	8002c36 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002c32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c34:	e000      	b.n	8002c38 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c36:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002c38:	b10b      	cbz	r3, 8002c3e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	408a      	lsls	r2, r1
 8002c44:	4232      	tst	r2, r6
 8002c46:	d03a      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	06c6      	lsls	r6, r0, #27
 8002c4e:	d536      	bpl.n	8002cbe <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c50:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c52:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002c56:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c58:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c5a:	d127      	bne.n	8002cac <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c68:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c6c:	b90a      	cbnz	r2, 8002c72 <HAL_DMA_IRQHandler+0xc6>
 8002c6e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002c70:	b11a      	cbz	r2, 8002c7a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	f022 0208 	bic.w	r2, r2, #8
 8002c78:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7a:	233f      	movs	r3, #63	@ 0x3f
 8002c7c:	408b      	lsls	r3, r1
 8002c7e:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002c86:	2300      	movs	r3, #0
 8002c88:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002c8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002c92:	4620      	mov	r0, r4
}
 8002c94:	b003      	add	sp, #12
 8002c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002c9a:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	05d2      	lsls	r2, r2, #23
 8002ca0:	d4c7      	bmi.n	8002c32 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f022 0208 	bic.w	r2, r2, #8
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e7c2      	b.n	8002c32 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cac:	0350      	lsls	r0, r2, #13
 8002cae:	d527      	bpl.n	8002d00 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0319      	lsls	r1, r3, #12
 8002cb4:	d431      	bmi.n	8002d1a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002cb6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8002cb8:	b10b      	cbz	r3, 8002cbe <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cbe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002cc0:	b36b      	cbz	r3, 8002d1e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002cc4:	07da      	lsls	r2, r3, #31
 8002cc6:	d519      	bpl.n	8002cfc <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8002cc8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8002ccc:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cce:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002ce0:	9b01      	ldr	r3, [sp, #4]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	42bb      	cmp	r3, r7
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	d802      	bhi.n	8002cf0 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	07db      	lsls	r3, r3, #31
 8002cee:	d4f7      	bmi.n	8002ce0 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002cfc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002cfe:	e7c6      	b.n	8002c8e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8002d06:	d108      	bne.n	8002d1a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	f021 0110 	bic.w	r1, r1, #16
 8002d0e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002d10:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002d12:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002d16:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002d1a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002d1c:	e7cc      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x10c>
}
 8002d1e:	b003      	add	sp, #12
 8002d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000078 	.word	0x20000078

08002d28 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d2a:	6804      	ldr	r4, [r0, #0]
 8002d2c:	9d04      	ldr	r5, [sp, #16]
 8002d2e:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8002d30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d34:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d36:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002d3e:	ea45 0506 	orr.w	r5, r5, r6
 8002d42:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002d44:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002d46:	d130      	bne.n	8002daa <DMA2D_SetConfig+0x82>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002d48:	6885      	ldr	r5, [r0, #8]
 8002d4a:	b11d      	cbz	r5, 8002d54 <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002d4c:	2d01      	cmp	r5, #1
 8002d4e:	d103      	bne.n	8002d58 <DMA2D_SetConfig+0x30>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002d50:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d54:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d58:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002d5a:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002d5e:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002d62:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002d64:	d107      	bne.n	8002d76 <DMA2D_SetConfig+0x4e>
      tmp2 = (tmp2 >> 19U);
 8002d66:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002d68:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002d6a:	02c9      	lsls	r1, r1, #11
 8002d6c:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8002d70:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8002d74:	e7ee      	b.n	8002d54 <DMA2D_SetConfig+0x2c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d76:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002d78:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d7c:	d10a      	bne.n	8002d94 <DMA2D_SetConfig+0x6c>
      tmp2 = (tmp2 >> 19U);
 8002d7e:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002d80:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d82:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002d84:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d86:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8002d8a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8002d8e:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002d92:	e7df      	b.n	8002d54 <DMA2D_SetConfig+0x2c>
      tmp2 = (tmp2 >> 20U);
 8002d94:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002d96:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d98:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8002d9a:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d9c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002da0:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002da4:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8002da8:	e7d4      	b.n	8002d54 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002daa:	60e1      	str	r1, [r4, #12]
}
 8002dac:	e7d3      	b.n	8002d56 <DMA2D_SetConfig+0x2e>

08002dae <HAL_DMA2D_Init>:
{
 8002dae:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002db0:	4604      	mov	r4, r0
 8002db2:	b330      	cbz	r0, 8002e02 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002db4:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8002db8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002dbc:	b91b      	cbnz	r3, 8002dc6 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002dbe:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002dc2:	f002 fb55 	bl	8005470 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002dc6:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dc8:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002dca:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dcc:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002dce:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002dd8:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002dda:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ddc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002dde:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002de0:	f023 0307 	bic.w	r3, r3, #7
 8002de4:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002de6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002de8:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002dea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002dec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002df8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dfa:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002dfc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8002e00:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
 8002e04:	e7fc      	b.n	8002e00 <HAL_DMA2D_Init+0x52>

08002e06 <HAL_DMA2D_Start>:
{
 8002e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002e08:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 8002e0c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8002e0e:	2d01      	cmp	r5, #1
 8002e10:	f04f 0502 	mov.w	r5, #2
 8002e14:	d00f      	beq.n	8002e36 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e16:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 8002e1a:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e1c:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002e1e:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e22:	9500      	str	r5, [sp, #0]
 8002e24:	f7ff ff80 	bl	8002d28 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e28:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8002e2a:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e2c:	6813      	ldr	r3, [r2, #0]
 8002e2e:	4333      	orrs	r3, r6
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	b002      	add	sp, #8
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002e36:	4628      	mov	r0, r5
 8002e38:	e7fb      	b.n	8002e32 <HAL_DMA2D_Start+0x2c>

08002e3a <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002e3a:	2300      	movs	r3, #0
{
 8002e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002e3e:	9301      	str	r3, [sp, #4]
{
 8002e40:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e42:	6803      	ldr	r3, [r0, #0]
{
 8002e44:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	07db      	lsls	r3, r3, #31
 8002e4a:	d418      	bmi.n	8002e7e <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e52:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002e54:	069e      	lsls	r6, r3, #26
 8002e56:	d506      	bpl.n	8002e66 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002e58:	f7ff fa72 	bl	8002340 <HAL_GetTick>
 8002e5c:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	06d2      	lsls	r2, r2, #27
 8002e64:	d53f      	bpl.n	8002ee6 <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	2212      	movs	r2, #18
  return HAL_OK;
 8002e6a:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002e6c:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 8002e74:	2300      	movs	r3, #0
 8002e76:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002e7e:	f7ff fa5f 	bl	8002340 <HAL_GetTick>
 8002e82:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e84:	6823      	ldr	r3, [r4, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	0792      	lsls	r2, r2, #30
 8002e8a:	d4df      	bmi.n	8002e4c <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e90:	9a01      	ldr	r2, [sp, #4]
 8002e92:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8002e96:	d014      	beq.n	8002ec2 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e98:	9a01      	ldr	r2, [sp, #4]
 8002e9a:	0695      	lsls	r5, r2, #26
 8002e9c:	d503      	bpl.n	8002ea6 <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e9e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002ea0:	f042 0202 	orr.w	r2, r2, #2
 8002ea4:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ea6:	9a01      	ldr	r2, [sp, #4]
 8002ea8:	07d0      	lsls	r0, r2, #31
 8002eaa:	d503      	bpl.n	8002eb4 <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eac:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb4:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eb6:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002eb8:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ebc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8002ec0:	e7d8      	b.n	8002e74 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 8002ec2:	1c69      	adds	r1, r5, #1
 8002ec4:	d0df      	beq.n	8002e86 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7ff fa3b 	bl	8002340 <HAL_GetTick>
 8002eca:	1b80      	subs	r0, r0, r6
 8002ecc:	42a8      	cmp	r0, r5
 8002ece:	d801      	bhi.n	8002ed4 <HAL_DMA2D_PollForTransfer+0x9a>
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	d1d7      	bne.n	8002e84 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ed4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 8002ed6:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 8002ee4:	e7c6      	b.n	8002e74 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002eea:	9a01      	ldr	r2, [sp, #4]
 8002eec:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8002ef0:	d016      	beq.n	8002f20 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ef2:	9a01      	ldr	r2, [sp, #4]
 8002ef4:	0716      	lsls	r6, r2, #28
 8002ef6:	d503      	bpl.n	8002f00 <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ef8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002efa:	f042 0204 	orr.w	r2, r2, #4
 8002efe:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f00:	9a01      	ldr	r2, [sp, #4]
 8002f02:	0695      	lsls	r5, r2, #26
 8002f04:	d503      	bpl.n	8002f0e <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f06:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f08:	f042 0202 	orr.w	r2, r2, #2
 8002f0c:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f0e:	9a01      	ldr	r2, [sp, #4]
 8002f10:	07d0      	lsls	r0, r2, #31
 8002f12:	d503      	bpl.n	8002f1c <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f14:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002f1c:	2229      	movs	r2, #41	@ 0x29
 8002f1e:	e7ca      	b.n	8002eb6 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 8002f20:	1c69      	adds	r1, r5, #1
 8002f22:	d09d      	beq.n	8002e60 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f24:	f7ff fa0c 	bl	8002340 <HAL_GetTick>
 8002f28:	1b80      	subs	r0, r0, r6
 8002f2a:	42a8      	cmp	r0, r5
 8002f2c:	d8d2      	bhi.n	8002ed4 <HAL_DMA2D_PollForTransfer+0x9a>
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	d195      	bne.n	8002e5e <HAL_DMA2D_PollForTransfer+0x24>
 8002f32:	e7cf      	b.n	8002ed4 <HAL_DMA2D_PollForTransfer+0x9a>

08002f34 <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8002f34:	4770      	bx	lr

08002f36 <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8002f36:	4770      	bx	lr

08002f38 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f38:	6803      	ldr	r3, [r0, #0]
{
 8002f3a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002f3c:	685e      	ldr	r6, [r3, #4]
{
 8002f3e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002f40:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002f42:	07f2      	lsls	r2, r6, #31
 8002f44:	d514      	bpl.n	8002f70 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002f46:	05e9      	lsls	r1, r5, #23
 8002f48:	d512      	bpl.n	8002f70 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f50:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8002f64:	2300      	movs	r3, #0
 8002f66:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002f6a:	6943      	ldr	r3, [r0, #20]
 8002f6c:	b103      	cbz	r3, 8002f70 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8002f6e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f70:	06b2      	lsls	r2, r6, #26
 8002f72:	d516      	bpl.n	8002fa2 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f74:	04ab      	lsls	r3, r5, #18
 8002f76:	d514      	bpl.n	8002fa2 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f80:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f82:	2220      	movs	r2, #32
 8002f84:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8002f94:	2300      	movs	r3, #0
 8002f96:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002f9a:	6963      	ldr	r3, [r4, #20]
 8002f9c:	b10b      	cbz	r3, 8002fa2 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002fa2:	0730      	lsls	r0, r6, #28
 8002fa4:	d516      	bpl.n	8002fd4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002fa6:	0529      	lsls	r1, r5, #20
 8002fa8:	d514      	bpl.n	8002fd4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fb8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8002fcc:	6963      	ldr	r3, [r4, #20]
 8002fce:	b10b      	cbz	r3, 8002fd4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002fd4:	0772      	lsls	r2, r6, #29
 8002fd6:	d50b      	bpl.n	8002ff0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002fd8:	056b      	lsls	r3, r5, #21
 8002fda:	d509      	bpl.n	8002ff0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002fdc:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002fde:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002fe8:	2204      	movs	r2, #4
 8002fea:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002fec:	f7ff ffa2 	bl	8002f34 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002ff0:	07b0      	lsls	r0, r6, #30
 8002ff2:	d514      	bpl.n	800301e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002ff4:	05a9      	lsls	r1, r5, #22
 8002ff6:	d512      	bpl.n	800301e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003000:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003002:	2202      	movs	r2, #2
 8003004:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003006:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003008:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800300a:	2301      	movs	r3, #1
 800300c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003010:	2300      	movs	r3, #0
 8003012:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	b10b      	cbz	r3, 800301e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800301a:	4620      	mov	r0, r4
 800301c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800301e:	06f2      	lsls	r2, r6, #27
 8003020:	d513      	bpl.n	800304a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003022:	04eb      	lsls	r3, r5, #19
 8003024:	d511      	bpl.n	800304a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003026:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003028:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003030:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003032:	2210      	movs	r2, #16
 8003034:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003036:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003038:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800303a:	2301      	movs	r3, #1
 800303c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8003040:	2300      	movs	r3, #0
 8003042:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003046:	f7ff ff76 	bl	8002f36 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800304a:	bd70      	pop	{r4, r5, r6, pc}

0800304c <HAL_DMA2D_ConfigLayer>:
{
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 800304e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 8003052:	4603      	mov	r3, r0
 8003054:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 8003056:	2a01      	cmp	r2, #1
 8003058:	d02b      	beq.n	80030b2 <HAL_DMA2D_ConfigLayer+0x66>
 800305a:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800305c:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003060:	010e      	lsls	r6, r1, #4
 8003062:	4f1c      	ldr	r7, [pc, #112]	@ (80030d4 <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003068:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 800306c:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8003070:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8003072:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003076:	3c09      	subs	r4, #9
 8003078:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800307a:	bf96      	itet	ls
 800307c:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003080:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003084:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003086:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003088:	b9a1      	cbnz	r1, 80030b4 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800308a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800308c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800308e:	ea01 0107 	and.w	r1, r1, r7
 8003092:	ea41 0100 	orr.w	r1, r1, r0
 8003096:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800309c:	d803      	bhi.n	80030a6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800309e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80030a0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80030a4:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030a6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 80030a8:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80030aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 80030ae:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030b4:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030b6:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80030b8:	ea01 0107 	and.w	r1, r1, r7
 80030bc:	ea41 0100 	orr.w	r1, r1, r0
 80030c0:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80030c2:	eb03 0106 	add.w	r1, r3, r6
 80030c6:	6989      	ldr	r1, [r1, #24]
 80030c8:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80030ca:	d8ec      	bhi.n	80030a6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80030cc:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80030d0:	6215      	str	r5, [r2, #32]
 80030d2:	e7e8      	b.n	80030a6 <HAL_DMA2D_ConfigLayer+0x5a>
 80030d4:	00fcfff0 	.word	0x00fcfff0

080030d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80030dc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800329c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003294 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80030e4:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030e6:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80030e8:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 80030ee:	43ac      	bics	r4, r5
 80030f0:	f040 80b7 	bne.w	8003262 <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f4:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030f6:	2703      	movs	r7, #3
 80030f8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030fc:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003100:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003104:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003106:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800310a:	2f01      	cmp	r7, #1
 800310c:	d834      	bhi.n	8003178 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 800310e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003110:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8003114:	68cf      	ldr	r7, [r1, #12]
 8003116:	fa07 f70e 	lsl.w	r7, r7, lr
 800311a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 800311e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003120:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003122:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003126:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800312a:	409f      	lsls	r7, r3
 800312c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003130:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003132:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003134:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003136:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800313a:	688f      	ldr	r7, [r1, #8]
 800313c:	fa07 f70e 	lsl.w	r7, r7, lr
 8003140:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8003144:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003146:	d119      	bne.n	800317c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8003148:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800314c:	f003 0a07 	and.w	sl, r3, #7
 8003150:	f04f 0b0f 	mov.w	fp, #15
 8003154:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003158:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800315c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003160:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003164:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003168:	690f      	ldr	r7, [r1, #16]
 800316a:	fa07 f70a 	lsl.w	r7, r7, sl
 800316e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8003172:	f8c8 7020 	str.w	r7, [r8, #32]
 8003176:	e001      	b.n	800317c <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003178:	2c03      	cmp	r4, #3
 800317a:	d1da      	bne.n	8003132 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800317c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800317e:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003182:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003186:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800318a:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800318e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003190:	d067      	beq.n	8003262 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003196:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800319a:	f003 0c03 	and.w	ip, r3, #3
 800319e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80031a6:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80031b2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80031b6:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031ba:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80031c2:	9401      	str	r4, [sp, #4]
 80031c4:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80031c6:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031c8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031cc:	4c32      	ldr	r4, [pc, #200]	@ (8003298 <HAL_GPIO_Init+0x1c0>)
 80031ce:	42a0      	cmp	r0, r4
 80031d0:	d04e      	beq.n	8003270 <HAL_GPIO_Init+0x198>
 80031d2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031d6:	42a0      	cmp	r0, r4
 80031d8:	d04c      	beq.n	8003274 <HAL_GPIO_Init+0x19c>
 80031da:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031de:	42a0      	cmp	r0, r4
 80031e0:	d04a      	beq.n	8003278 <HAL_GPIO_Init+0x1a0>
 80031e2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031e6:	42a0      	cmp	r0, r4
 80031e8:	d048      	beq.n	800327c <HAL_GPIO_Init+0x1a4>
 80031ea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031ee:	42a0      	cmp	r0, r4
 80031f0:	d046      	beq.n	8003280 <HAL_GPIO_Init+0x1a8>
 80031f2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031f6:	42a0      	cmp	r0, r4
 80031f8:	d044      	beq.n	8003284 <HAL_GPIO_Init+0x1ac>
 80031fa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80031fe:	42a0      	cmp	r0, r4
 8003200:	d042      	beq.n	8003288 <HAL_GPIO_Init+0x1b0>
 8003202:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003206:	42a0      	cmp	r0, r4
 8003208:	d040      	beq.n	800328c <HAL_GPIO_Init+0x1b4>
 800320a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800320e:	42a0      	cmp	r0, r4
 8003210:	d03e      	beq.n	8003290 <HAL_GPIO_Init+0x1b8>
 8003212:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003216:	42a0      	cmp	r0, r4
 8003218:	bf14      	ite	ne
 800321a:	240a      	movne	r4, #10
 800321c:	2409      	moveq	r4, #9
 800321e:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003222:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003226:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800322a:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800322c:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8003230:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003232:	bf0c      	ite	eq
 8003234:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003236:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003238:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 800323c:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 800323e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003240:	bf0c      	ite	eq
 8003242:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003244:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003246:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 800324a:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800324c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800324e:	bf0c      	ite	eq
 8003250:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8003252:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003254:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8003256:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8003258:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800325a:	bf54      	ite	pl
 800325c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 800325e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8003260:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003262:	3301      	adds	r3, #1
 8003264:	2b10      	cmp	r3, #16
 8003266:	f47f af3d 	bne.w	80030e4 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800326a:	b003      	add	sp, #12
 800326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003270:	2400      	movs	r4, #0
 8003272:	e7d4      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003274:	2401      	movs	r4, #1
 8003276:	e7d2      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003278:	2402      	movs	r4, #2
 800327a:	e7d0      	b.n	800321e <HAL_GPIO_Init+0x146>
 800327c:	2403      	movs	r4, #3
 800327e:	e7ce      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003280:	2404      	movs	r4, #4
 8003282:	e7cc      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003284:	2405      	movs	r4, #5
 8003286:	e7ca      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003288:	2406      	movs	r4, #6
 800328a:	e7c8      	b.n	800321e <HAL_GPIO_Init+0x146>
 800328c:	2407      	movs	r4, #7
 800328e:	e7c6      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003290:	2408      	movs	r4, #8
 8003292:	e7c4      	b.n	800321e <HAL_GPIO_Init+0x146>
 8003294:	40013c00 	.word	0x40013c00
 8003298:	40020000 	.word	0x40020000
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a0:	6903      	ldr	r3, [r0, #16]
 80032a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032a4:	bf14      	ite	ne
 80032a6:	2001      	movne	r0, #1
 80032a8:	2000      	moveq	r0, #0
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ac:	b10a      	cbz	r2, 80032b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032ae:	6181      	str	r1, [r0, #24]
  }
}
 80032b0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032b2:	0409      	lsls	r1, r1, #16
 80032b4:	e7fb      	b.n	80032ae <HAL_GPIO_WritePin+0x2>

080032b6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032b6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b8:	ea01 0203 	and.w	r2, r1, r3
 80032bc:	ea21 0103 	bic.w	r1, r1, r3
 80032c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80032c4:	6181      	str	r1, [r0, #24]
}
 80032c6:	4770      	bx	lr

080032c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032c8:	4a04      	ldr	r2, [pc, #16]	@ (80032dc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80032ca:	6951      	ldr	r1, [r2, #20]
 80032cc:	4201      	tst	r1, r0
{
 80032ce:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032d0:	d002      	beq.n	80032d8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	f002 fb3a 	bl	800594c <HAL_GPIO_EXTI_Callback>
  }
}
 80032d8:	bd08      	pop	{r3, pc}
 80032da:	bf00      	nop
 80032dc:	40013c00 	.word	0x40013c00

080032e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	0791      	lsls	r1, r2, #30
 80032e6:	d501      	bpl.n	80032ec <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032e8:	2200      	movs	r2, #0
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	07d2      	lsls	r2, r2, #31
 80032f0:	d403      	bmi.n	80032fa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	619a      	str	r2, [r3, #24]
  }
}
 80032fa:	4770      	bx	lr

080032fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032fc:	b530      	push	{r4, r5, lr}
 80032fe:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003300:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003304:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003306:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003308:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800330a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800330e:	4a05      	ldr	r2, [pc, #20]	@ (8003324 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003310:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003312:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800331a:	ea20 0002 	bic.w	r0, r0, r2
 800331e:	4303      	orrs	r3, r0
 8003320:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003322:	bd30      	pop	{r4, r5, pc}
 8003324:	03ff63ff 	.word	0x03ff63ff

08003328 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8003328:	6803      	ldr	r3, [r0, #0]
{
 800332a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800332e:	699c      	ldr	r4, [r3, #24]
{
 8003330:	4605      	mov	r5, r0
 8003332:	460f      	mov	r7, r1
 8003334:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003336:	f014 0410 	ands.w	r4, r4, #16
 800333a:	d06f      	beq.n	800341c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800333c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003342:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	0690      	lsls	r0, r2, #26
 800334a:	d461      	bmi.n	8003410 <I2C_IsErrorOccurred+0xe8>
 800334c:	f1b8 0f00 	cmp.w	r8, #0
 8003350:	d035      	beq.n	80033be <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8003352:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8003356:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8003358:	682e      	ldr	r6, [r5, #0]
 800335a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800335c:	05d9      	lsls	r1, r3, #23
 800335e:	d505      	bpl.n	800336c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003360:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8003364:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8003368:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800336a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800336c:	055a      	lsls	r2, r3, #21
 800336e:	d505      	bpl.n	800337c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003374:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8003378:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800337a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800337c:	059b      	lsls	r3, r3, #22
 800337e:	d54f      	bpl.n	8003420 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003380:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003384:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003388:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800338a:	4628      	mov	r0, r5
 800338c:	f7ff ffa8 	bl	80032e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003390:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003392:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003394:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003398:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800339c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80033a6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80033a8:	4323      	orrs	r3, r4
 80033aa:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	2320      	movs	r3, #32
 80033ae:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80033b8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80033bc:	e032      	b.n	8003424 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80033be:	1c7a      	adds	r2, r7, #1
 80033c0:	d0c1      	beq.n	8003346 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7fe ffbd 	bl	8002340 <HAL_GetTick>
 80033c6:	1b80      	subs	r0, r0, r6
 80033c8:	42b8      	cmp	r0, r7
 80033ca:	d801      	bhi.n	80033d0 <I2C_IsErrorOccurred+0xa8>
 80033cc:	2f00      	cmp	r7, #0
 80033ce:	d1b9      	bne.n	8003344 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80033d4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033d8:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80033da:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033dc:	0400      	lsls	r0, r0, #16
 80033de:	d50a      	bpl.n	80033f6 <I2C_IsErrorOccurred+0xce>
 80033e0:	0449      	lsls	r1, r1, #17
 80033e2:	d408      	bmi.n	80033f6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80033e4:	2a20      	cmp	r2, #32
 80033e6:	d006      	beq.n	80033f6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033ee:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80033f0:	f7fe ffa6 	bl	8002340 <HAL_GetTick>
 80033f4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	069b      	lsls	r3, r3, #26
 80033fc:	d4a2      	bmi.n	8003344 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033fe:	f7fe ff9f 	bl	8002340 <HAL_GetTick>
 8003402:	1b80      	subs	r0, r0, r6
 8003404:	2819      	cmp	r0, #25
 8003406:	d9f6      	bls.n	80033f6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800340a:	f04f 0801 	mov.w	r8, #1
 800340e:	e799      	b.n	8003344 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8003410:	f1b8 0f00 	cmp.w	r8, #0
 8003414:	d19d      	bne.n	8003352 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003416:	2220      	movs	r2, #32
 8003418:	61da      	str	r2, [r3, #28]
 800341a:	e79a      	b.n	8003352 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	4620      	mov	r0, r4
 800341e:	e79b      	b.n	8003358 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8003420:	2800      	cmp	r0, #0
 8003422:	d1b2      	bne.n	800338a <I2C_IsErrorOccurred+0x62>
}
 8003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003428 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	460d      	mov	r5, r1
 800342e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	079b      	lsls	r3, r3, #30
 8003436:	d501      	bpl.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003438:	2000      	movs	r0, #0
 800343a:	e01f      	b.n	800347c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343c:	4632      	mov	r2, r6
 800343e:	4629      	mov	r1, r5
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff ff71 	bl	8003328 <I2C_IsErrorOccurred>
 8003446:	b9c0      	cbnz	r0, 800347a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003448:	1c6a      	adds	r2, r5, #1
 800344a:	d0f1      	beq.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7fe ff78 	bl	8002340 <HAL_GetTick>
 8003450:	1b80      	subs	r0, r0, r6
 8003452:	42a8      	cmp	r0, r5
 8003454:	d801      	bhi.n	800345a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003456:	2d00      	cmp	r5, #0
 8003458:	d1ea      	bne.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f013 0302 	ands.w	r3, r3, #2
 8003462:	d1e5      	bne.n	8003430 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8003466:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346a:	f042 0220 	orr.w	r2, r2, #32
 800346e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003470:	2220      	movs	r2, #32
 8003472:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800347a:	2001      	movs	r0, #1
}
 800347c:	bd70      	pop	{r4, r5, r6, pc}

0800347e <I2C_WaitOnFlagUntilTimeout>:
{
 800347e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003482:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003486:	4604      	mov	r4, r0
 8003488:	460f      	mov	r7, r1
 800348a:	4616      	mov	r6, r2
 800348c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	ea37 0303 	bics.w	r3, r7, r3
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	42b3      	cmp	r3, r6
 800349e:	d001      	beq.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80034a0:	2000      	movs	r0, #0
 80034a2:	e025      	b.n	80034f0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a4:	4642      	mov	r2, r8
 80034a6:	4629      	mov	r1, r5
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff ff3d 	bl	8003328 <I2C_IsErrorOccurred>
 80034ae:	b9f0      	cbnz	r0, 80034ee <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	1c6b      	adds	r3, r5, #1
 80034b2:	d0ec      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7fe ff44 	bl	8002340 <HAL_GetTick>
 80034b8:	eba0 0008 	sub.w	r0, r0, r8
 80034bc:	42a8      	cmp	r0, r5
 80034be:	d801      	bhi.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x46>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d1e4      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	ea37 0303 	bics.w	r3, r7, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	42b3      	cmp	r3, r6
 80034d4:	d1db      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80034d8:	f043 0320 	orr.w	r3, r3, #32
 80034dc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034de:	2320      	movs	r3, #32
 80034e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80034ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
}
 80034f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4604      	mov	r4, r0
 80034f8:	460d      	mov	r5, r1
 80034fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	069b      	lsls	r3, r3, #26
 8003502:	d501      	bpl.n	8003508 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003504:	2000      	movs	r0, #0
 8003506:	e01d      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003508:	4632      	mov	r2, r6
 800350a:	4629      	mov	r1, r5
 800350c:	4620      	mov	r0, r4
 800350e:	f7ff ff0b 	bl	8003328 <I2C_IsErrorOccurred>
 8003512:	b9b0      	cbnz	r0, 8003542 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003514:	f7fe ff14 	bl	8002340 <HAL_GetTick>
 8003518:	1b80      	subs	r0, r0, r6
 800351a:	42a8      	cmp	r0, r5
 800351c:	d801      	bhi.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800351e:	2d00      	cmp	r5, #0
 8003520:	d1ec      	bne.n	80034fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f013 0320 	ands.w	r3, r3, #32
 800352a:	d1e7      	bne.n	80034fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800352e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003532:	f042 0220 	orr.w	r2, r2, #32
 8003536:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003538:	2220      	movs	r2, #32
 800353a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8003542:	2001      	movs	r0, #1
}
 8003544:	bd70      	pop	{r4, r5, r6, pc}

08003546 <HAL_I2C_MspInit>:
}
 8003546:	4770      	bx	lr

08003548 <HAL_I2C_Init>:
{
 8003548:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800354a:	4604      	mov	r4, r0
 800354c:	2800      	cmp	r0, #0
 800354e:	d04e      	beq.n	80035ee <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003550:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003554:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003558:	b91b      	cbnz	r3, 8003562 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800355e:	f7ff fff2 	bl	8003546 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003562:	2324      	movs	r3, #36	@ 0x24
 8003564:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003572:	6862      	ldr	r2, [r4, #4]
 8003574:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003578:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003580:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003582:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003586:	2901      	cmp	r1, #1
 8003588:	d106      	bne.n	8003598 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800358a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003596:	e007      	b.n	80035a8 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003598:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800359c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800359e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035a0:	d1f6      	bne.n	8003590 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035a8:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035aa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035be:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80035c4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035c6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ce:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80035de:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80035ec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035ee:	2001      	movs	r0, #1
 80035f0:	e7fc      	b.n	80035ec <HAL_I2C_Init+0xa4>

080035f2 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80035f2:	4770      	bx	lr

080035f4 <HAL_I2C_DeInit>:
{
 80035f4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80035f6:	4604      	mov	r4, r0
 80035f8:	b198      	cbz	r0, 8003622 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80035fa:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	2324      	movs	r3, #36	@ 0x24
 80035fe:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800360a:	f7ff fff2 	bl	80035f2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	2000      	movs	r0, #0
 8003610:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8003612:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003616:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8003620:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003622:	2001      	movs	r0, #1
 8003624:	e7fc      	b.n	8003620 <HAL_I2C_DeInit+0x2c>
	...

08003628 <HAL_I2C_Mem_Write>:
{
 8003628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003632:	4604      	mov	r4, r0
 8003634:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	2b20      	cmp	r3, #32
{
 8003638:	4616      	mov	r6, r2
 800363a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800363e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003642:	f040 80c6 	bne.w	80037d2 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8003646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003648:	b113      	cbz	r3, 8003650 <HAL_I2C_Mem_Write+0x28>
 800364a:	f1ba 0f00 	cmp.w	sl, #0
 800364e:	d106      	bne.n	800365e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003654:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003656:	2001      	movs	r0, #1
}
 8003658:	b003      	add	sp, #12
 800365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800365e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003662:	2b01      	cmp	r3, #1
 8003664:	f000 80b5 	beq.w	80037d2 <HAL_I2C_Mem_Write+0x1aa>
 8003668:	f04f 0b01 	mov.w	fp, #1
 800366c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003670:	f7fe fe66 	bl	8002340 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003674:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003676:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003678:	9000      	str	r0, [sp, #0]
 800367a:	465a      	mov	r2, fp
 800367c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff fefc 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 8003686:	2800      	cmp	r0, #0
 8003688:	d1e5      	bne.n	8003656 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800368a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800368c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800368e:	fa5f f289 	uxtb.w	r2, r9
 8003692:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003694:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003698:	2340      	movs	r3, #64	@ 0x40
 800369a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800369e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a0:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036a2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80036a4:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036a6:	4b4c      	ldr	r3, [pc, #304]	@ (80037d8 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80036a8:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036b2:	f7ff fe23 	bl	80032fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	462a      	mov	r2, r5
 80036b8:	4641      	mov	r1, r8
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff feb4 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80036c0:	bb18      	cbnz	r0, 800370a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c2:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036c6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c8:	d115      	bne.n	80036f6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ca:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d2:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036d4:	4643      	mov	r3, r8
 80036d6:	9500      	str	r5, [sp, #0]
 80036d8:	f7ff fed1 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 80036dc:	b9a8      	cbnz	r0, 800370a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2bff      	cmp	r3, #255	@ 0xff
 80036e4:	d815      	bhi.n	8003712 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80036e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80036ec:	b292      	uxth	r2, r2
 80036ee:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	9000      	str	r0, [sp, #0]
 80036f4:	e012      	b.n	800371c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036f6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f8:	4641      	mov	r1, r8
 80036fa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	462a      	mov	r2, r5
 8003700:	f7ff fe92 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003704:	b908      	cbnz	r0, 800370a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	e7df      	b.n	80036ca <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003710:	e7a1      	b.n	8003656 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003712:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003714:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003718:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800371a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800371c:	4639      	mov	r1, r7
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff fdec 	bl	80032fc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003724:	462a      	mov	r2, r5
 8003726:	4641      	mov	r1, r8
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff fe7d 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 800372e:	2800      	cmp	r0, #0
 8003730:	d191      	bne.n	8003656 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003732:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	f813 1b01 	ldrb.w	r1, [r3], #1
 800373a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800373c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800373e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003740:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003742:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003744:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003746:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003748:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800374a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800374c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800374e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003750:	b29b      	uxth	r3, r3
 8003752:	b1b3      	cbz	r3, 8003782 <HAL_I2C_Mem_Write+0x15a>
 8003754:	b9aa      	cbnz	r2, 8003782 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003756:	4643      	mov	r3, r8
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	4620      	mov	r0, r4
 800375c:	9500      	str	r5, [sp, #0]
 800375e:	f7ff fe8e 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 8003762:	2800      	cmp	r0, #0
 8003764:	f47f af77 	bne.w	8003656 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2bff      	cmp	r3, #255	@ 0xff
 800376e:	d928      	bls.n	80037c2 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003770:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003772:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003778:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377a:	4639      	mov	r1, r7
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff fdbd 	bl	80032fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003782:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1cc      	bne.n	8003724 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378a:	462a      	mov	r2, r5
 800378c:	4641      	mov	r1, r8
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff feb0 	bl	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003794:	2800      	cmp	r0, #0
 8003796:	f47f af5e 	bne.w	8003656 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	2120      	movs	r1, #32
 800379e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80037a6:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80037aa:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80037b8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037bc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80037c0:	e74a      	b.n	8003658 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80037c2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80037c8:	b292      	uxth	r2, r2
 80037ca:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	9000      	str	r0, [sp, #0]
 80037d0:	e7d3      	b.n	800377a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 80037d2:	2002      	movs	r0, #2
 80037d4:	e740      	b.n	8003658 <HAL_I2C_Mem_Write+0x30>
 80037d6:	bf00      	nop
 80037d8:	80002000 	.word	0x80002000

080037dc <HAL_I2C_Mem_Read>:
{
 80037dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80037e6:	4604      	mov	r4, r0
 80037e8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ea:	2b20      	cmp	r3, #32
{
 80037ec:	4616      	mov	r6, r2
 80037ee:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80037f2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	f040 80c9 	bne.w	800398c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80037fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80037fc:	b113      	cbz	r3, 8003804 <HAL_I2C_Mem_Read+0x28>
 80037fe:	f1ba 0f00 	cmp.w	sl, #0
 8003802:	d106      	bne.n	8003812 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003808:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800380a:	2001      	movs	r0, #1
}
 800380c:	b003      	add	sp, #12
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003812:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003816:	2b01      	cmp	r3, #1
 8003818:	f000 80b8 	beq.w	800398c <HAL_I2C_Mem_Read+0x1b0>
 800381c:	f04f 0b01 	mov.w	fp, #1
 8003820:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003824:	f7fe fd8c 	bl	8002340 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003828:	2319      	movs	r3, #25
 800382a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800382c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800382e:	465a      	mov	r2, fp
 8003830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff fe22 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2800      	cmp	r0, #0
 800383e:	d1e4      	bne.n	800380a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003840:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8003842:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003844:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003846:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800384a:	2240      	movs	r2, #64	@ 0x40
 800384c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8003850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003852:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003854:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003856:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003858:	4a4d      	ldr	r2, [pc, #308]	@ (8003990 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800385a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800385e:	9200      	str	r2, [sp, #0]
 8003860:	fa5f f289 	uxtb.w	r2, r9
 8003864:	f7ff fd4a 	bl	80032fc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003868:	462a      	mov	r2, r5
 800386a:	4641      	mov	r1, r8
 800386c:	4620      	mov	r0, r4
 800386e:	f7ff fddb 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 8003872:	bb20      	cbnz	r0, 80038be <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003874:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003878:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	d116      	bne.n	80038aa <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800387c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	@ 0x40
 8003882:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003884:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003886:	4643      	mov	r3, r8
 8003888:	9500      	str	r5, [sp, #0]
 800388a:	f7ff fdf8 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 800388e:	b9b0      	cbnz	r0, 80038be <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003890:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2bff      	cmp	r3, #255	@ 0xff
 8003896:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <HAL_I2C_Mem_Read+0x1b8>)
 8003898:	d815      	bhi.n	80038c6 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800389a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800389c:	b292      	uxth	r2, r2
 800389e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a8:	e012      	b.n	80038d0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038aa:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ac:	4641      	mov	r1, r8
 80038ae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	462a      	mov	r2, r5
 80038b4:	f7ff fdb8 	bl	8003428 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b8:	b908      	cbnz	r0, 80038be <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	e7de      	b.n	800387c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80038c4:	e7a1      	b.n	800380a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = 1U;
 80038c6:	2201      	movs	r2, #1
 80038c8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038d0:	4639      	mov	r1, r7
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff fd12 	bl	80032fc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d8:	4643      	mov	r3, r8
 80038da:	2200      	movs	r2, #0
 80038dc:	2104      	movs	r1, #4
 80038de:	4620      	mov	r0, r4
 80038e0:	9500      	str	r5, [sp, #0]
 80038e2:	f7ff fdcc 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d18f      	bne.n	800380a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038f0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80038f4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80038f6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80038f8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80038fa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80038fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80038fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003900:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003902:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003904:	b29b      	uxth	r3, r3
 8003906:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003908:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	b1b3      	cbz	r3, 800393c <HAL_I2C_Mem_Read+0x160>
 800390e:	b9aa      	cbnz	r2, 800393c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003910:	4643      	mov	r3, r8
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	4620      	mov	r0, r4
 8003916:	9500      	str	r5, [sp, #0]
 8003918:	f7ff fdb1 	bl	800347e <I2C_WaitOnFlagUntilTimeout>
 800391c:	2800      	cmp	r0, #0
 800391e:	f47f af74 	bne.w	800380a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003922:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2bff      	cmp	r3, #255	@ 0xff
 8003928:	d928      	bls.n	800397c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 800392a:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800392c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = 1U;
 8003930:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003932:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003934:	4639      	mov	r1, r7
 8003936:	4620      	mov	r0, r4
 8003938:	f7ff fce0 	bl	80032fc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800393c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1c9      	bne.n	80038d8 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003944:	462a      	mov	r2, r5
 8003946:	4641      	mov	r1, r8
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff fdd3 	bl	80034f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800394e:	2800      	cmp	r0, #0
 8003950:	f47f af5b 	bne.w	800380a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	2120      	movs	r1, #32
 8003958:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003960:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003964:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003972:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003976:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800397a:	e747      	b.n	800380c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800397c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8003982:	b292      	uxth	r2, r2
 8003984:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	9000      	str	r0, [sp, #0]
 800398a:	e7d3      	b.n	8003934 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 800398c:	2002      	movs	r0, #2
 800398e:	e73d      	b.n	800380c <HAL_I2C_Mem_Read+0x30>
 8003990:	80002000 	.word	0x80002000
 8003994:	80002400 	.word	0x80002400

08003998 <HAL_I2C_GetState>:
  return hi2c->State;
 8003998:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800399c:	4770      	bx	lr

0800399e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800399e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039a0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80039a2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039a6:	3284      	adds	r2, #132	@ 0x84
 80039a8:	1883      	adds	r3, r0, r2
{
 80039aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039ae:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80039b0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039b4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80039b6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039ba:	684c      	ldr	r4, [r1, #4]
 80039bc:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039c0:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80039c4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039c8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039ca:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80039cc:	68c5      	ldr	r5, [r0, #12]
 80039ce:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80039d2:	443d      	add	r5, r7
 80039d4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80039d8:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80039da:	68c6      	ldr	r6, [r0, #12]
 80039dc:	68cd      	ldr	r5, [r1, #12]
 80039de:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80039e2:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80039e4:	689d      	ldr	r5, [r3, #8]
 80039e6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80039ea:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80039ec:	688d      	ldr	r5, [r1, #8]
 80039ee:	68c7      	ldr	r7, [r0, #12]
 80039f0:	3501      	adds	r5, #1
 80039f2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80039f6:	443d      	add	r5, r7
 80039f8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80039fc:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80039fe:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003a00:	691d      	ldr	r5, [r3, #16]
 8003a02:	f025 0507 	bic.w	r5, r5, #7
 8003a06:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003a08:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a0a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003a0c:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003a10:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003a14:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003a18:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8003a1c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003a20:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003a24:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003a28:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003a2a:	695d      	ldr	r5, [r3, #20]
 8003a2c:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8003a30:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003a32:	694d      	ldr	r5, [r1, #20]
 8003a34:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003a36:	69dd      	ldr	r5, [r3, #28]
 8003a38:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8003a3c:	f025 0507 	bic.w	r5, r5, #7
 8003a40:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003a42:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003a46:	433d      	orrs	r5, r7
 8003a48:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a4a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a4c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003a4e:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003a52:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a54:	b31e      	cbz	r6, 8003a9e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003a56:	2e01      	cmp	r6, #1
 8003a58:	d023      	beq.n	8003aa2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a5a:	1eb5      	subs	r5, r6, #2
 8003a5c:	2d02      	cmp	r5, #2
 8003a5e:	d922      	bls.n	8003aa6 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8003a60:	2e07      	cmp	r6, #7
 8003a62:	bf14      	ite	ne
 8003a64:	2501      	movne	r5, #1
 8003a66:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a68:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003a6a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a6e:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003a72:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a74:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003a76:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003a78:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003a7a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003a7c:	436e      	muls	r6, r5
 8003a7e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003a82:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003a84:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003a86:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8003a8a:	f024 0407 	bic.w	r4, r4, #7
 8003a8e:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003a90:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003a92:	5883      	ldr	r3, [r0, r2]
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	5083      	str	r3, [r0, r2]
}
 8003a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003a9e:	2504      	movs	r5, #4
 8003aa0:	e7e2      	b.n	8003a68 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003aa2:	2503      	movs	r5, #3
 8003aa4:	e7e0      	b.n	8003a68 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003aa6:	2502      	movs	r5, #2
 8003aa8:	e7de      	b.n	8003a68 <LTDC_SetConfig+0xca>

08003aaa <HAL_LTDC_MspInit>:
}
 8003aaa:	4770      	bx	lr

08003aac <HAL_LTDC_Init>:
{
 8003aac:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003aae:	4604      	mov	r4, r0
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d063      	beq.n	8003b7c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003ab4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8003ab8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003abc:	b91b      	cbnz	r3, 8003ac6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003abe:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003ac2:	f7ff fff2 	bl	8003aaa <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003ad4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ad6:	6999      	ldr	r1, [r3, #24]
 8003ad8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003adc:	4302      	orrs	r2, r0
 8003ade:	68e0      	ldr	r0, [r4, #12]
 8003ae0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ae2:	6920      	ldr	r0, [r4, #16]
 8003ae4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ae6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ae8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003aea:	4925      	ldr	r1, [pc, #148]	@ (8003b80 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	400a      	ands	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003afa:	69a0      	ldr	r0, [r4, #24]
 8003afc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003afe:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b00:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	400a      	ands	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003b0e:	6a20      	ldr	r0, [r4, #32]
 8003b10:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b14:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	400a      	ands	r2, r1
 8003b1a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003b22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003b24:	4302      	orrs	r2, r0
 8003b26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b2c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b2e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b36:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b3e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b42:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b46:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b4c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8003b4e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003b52:	432a      	orrs	r2, r5
 8003b54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b58:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b62:	f042 0206 	orr.w	r2, r2, #6
 8003b66:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b70:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b72:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b76:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	e7fc      	b.n	8003b7a <HAL_LTDC_Init+0xce>
 8003b80:	f000f800 	.word	0xf000f800

08003b84 <HAL_LTDC_ConfigLayer>:
{
 8003b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003b88:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	460f      	mov	r7, r1
 8003b90:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f04f 0002 	mov.w	r0, #2
 8003b98:	d01f      	beq.n	8003bda <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003b9a:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8003b9c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ba0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ba2:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ba6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8003baa:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003bae:	3438      	adds	r4, #56	@ 0x38
 8003bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbc:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	4662      	mov	r2, ip
 8003bc2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003bc4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003bc6:	f7ff feea 	bl	800399e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003bca:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003bcc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003bce:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003bd2:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8003bd6:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8003bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bde <HAL_LTDC_GetState>:
  return hltdc->State;
 8003bde:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 8003be2:	4770      	bx	lr

08003be4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003be6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bea:	4c19      	ldr	r4, [pc, #100]	@ (8003c50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003bf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c02:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c04:	f7fe fb9c 	bl	8002340 <HAL_GetTick>
 8003c08:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c0a:	6863      	ldr	r3, [r4, #4]
 8003c0c:	03da      	lsls	r2, r3, #15
 8003c0e:	d50c      	bpl.n	8003c2a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c10:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c12:	4d0f      	ldr	r5, [pc, #60]	@ (8003c50 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003c1a:	f7fe fb91 	bl	8002340 <HAL_GetTick>
 8003c1e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c20:	686b      	ldr	r3, [r5, #4]
 8003c22:	039b      	lsls	r3, r3, #14
 8003c24:	d50a      	bpl.n	8003c3c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003c26:	2000      	movs	r0, #0
 8003c28:	e006      	b.n	8003c38 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2a:	f7fe fb89 	bl	8002340 <HAL_GetTick>
 8003c2e:	1b40      	subs	r0, r0, r5
 8003c30:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003c34:	d9e9      	bls.n	8003c0a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003c36:	2003      	movs	r0, #3
}
 8003c38:	b003      	add	sp, #12
 8003c3a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c3c:	f7fe fb80 	bl	8002340 <HAL_GetTick>
 8003c40:	1b00      	subs	r0, r0, r4
 8003c42:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003c46:	d9eb      	bls.n	8003c20 <HAL_PWREx_EnableOverDrive+0x3c>
 8003c48:	e7f5      	b.n	8003c36 <HAL_PWREx_EnableOverDrive+0x52>
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	40007000 	.word	0x40007000

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c58:	4604      	mov	r4, r0
 8003c5a:	b340      	cbz	r0, 8003cae <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5c:	6803      	ldr	r3, [r0, #0]
 8003c5e:	07de      	lsls	r6, r3, #31
 8003c60:	d410      	bmi.n	8003c84 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	079d      	lsls	r5, r3, #30
 8003c66:	d461      	bmi.n	8003d2c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	0719      	lsls	r1, r3, #28
 8003c6c:	f100 80a6 	bmi.w	8003dbc <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	075a      	lsls	r2, r3, #29
 8003c74:	f100 80c7 	bmi.w	8003e06 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c78:	69a2      	ldr	r2, [r4, #24]
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	f040 8130 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003c80:	2000      	movs	r0, #0
 8003c82:	e02c      	b.n	8003cde <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b94      	ldr	r3, [pc, #592]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	f002 020c 	and.w	r2, r2, #12
 8003c8c:	2a04      	cmp	r2, #4
 8003c8e:	d007      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	f002 020c 	and.w	r2, r2, #12
 8003c96:	2a08      	cmp	r2, #8
 8003c98:	d10b      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x5e>
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0259      	lsls	r1, r3, #9
 8003c9e:	d508      	bpl.n	8003cb2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	039a      	lsls	r2, r3, #14
 8003ca6:	d5dc      	bpl.n	8003c62 <HAL_RCC_OscConfig+0xe>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d9      	bne.n	8003c62 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003cae:	2001      	movs	r0, #1
 8003cb0:	e015      	b.n	8003cde <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb2:	6863      	ldr	r3, [r4, #4]
 8003cb4:	4d88      	ldr	r5, [pc, #544]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cba:	d113      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x90>
 8003cbc:	682b      	ldr	r3, [r5, #0]
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fb3c 	bl	8002340 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc8:	4e83      	ldr	r6, [pc, #524]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8003cca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	039b      	lsls	r3, r3, #14
 8003cd0:	d4c7      	bmi.n	8003c62 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd2:	f7fe fb35 	bl	8002340 <HAL_GetTick>
 8003cd6:	1b40      	subs	r0, r0, r5
 8003cd8:	2864      	cmp	r0, #100	@ 0x64
 8003cda:	d9f7      	bls.n	8003ccc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8003cdc:	2003      	movs	r0, #3
}
 8003cde:	b002      	add	sp, #8
 8003ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	b99b      	cbnz	r3, 8003d0e <HAL_RCC_OscConfig+0xba>
 8003ce6:	682b      	ldr	r3, [r5, #0]
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fb23 	bl	8002340 <HAL_GetTick>
 8003cfa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	039f      	lsls	r7, r3, #14
 8003d00:	d5af      	bpl.n	8003c62 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d02:	f7fe fb1d 	bl	8002340 <HAL_GetTick>
 8003d06:	1b80      	subs	r0, r0, r6
 8003d08:	2864      	cmp	r0, #100	@ 0x64
 8003d0a:	d9f7      	bls.n	8003cfc <HAL_RCC_OscConfig+0xa8>
 8003d0c:	e7e6      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	d103      	bne.n	8003d1e <HAL_RCC_OscConfig+0xca>
 8003d16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d1a:	602b      	str	r3, [r5, #0]
 8003d1c:	e7ce      	b.n	8003cbc <HAL_RCC_OscConfig+0x68>
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	682b      	ldr	r3, [r5, #0]
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2a:	e7ca      	b.n	8003cc2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	f012 0f0c 	tst.w	r2, #12
 8003d34:	d007      	beq.n	8003d46 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	f002 020c 	and.w	r2, r2, #12
 8003d3c:	2a08      	cmp	r2, #8
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCC_OscConfig+0x110>
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	025d      	lsls	r5, r3, #9
 8003d44:	d40e      	bmi.n	8003d64 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	4a64      	ldr	r2, [pc, #400]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003d48:	6813      	ldr	r3, [r2, #0]
 8003d4a:	0799      	lsls	r1, r3, #30
 8003d4c:	d502      	bpl.n	8003d54 <HAL_RCC_OscConfig+0x100>
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d1ac      	bne.n	8003cae <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	6921      	ldr	r1, [r4, #16]
 8003d58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003d5c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d60:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	e781      	b.n	8003c68 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d64:	68e3      	ldr	r3, [r4, #12]
 8003d66:	4d5c      	ldr	r5, [pc, #368]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003d68:	b1bb      	cbz	r3, 8003d9a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d72:	f7fe fae5 	bl	8002340 <HAL_GetTick>
 8003d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	079b      	lsls	r3, r3, #30
 8003d7c:	d507      	bpl.n	8003d8e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	682b      	ldr	r3, [r5, #0]
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003d86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	e76c      	b.n	8003c68 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fad7 	bl	8002340 <HAL_GetTick>
 8003d92:	1b80      	subs	r0, r0, r6
 8003d94:	2802      	cmp	r0, #2
 8003d96:	d9ef      	bls.n	8003d78 <HAL_RCC_OscConfig+0x124>
 8003d98:	e7a0      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003da2:	f7fe facd 	bl	8002340 <HAL_GetTick>
 8003da6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	079f      	lsls	r7, r3, #30
 8003dac:	f57f af5c 	bpl.w	8003c68 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db0:	f7fe fac6 	bl	8002340 <HAL_GetTick>
 8003db4:	1b80      	subs	r0, r0, r6
 8003db6:	2802      	cmp	r0, #2
 8003db8:	d9f6      	bls.n	8003da8 <HAL_RCC_OscConfig+0x154>
 8003dba:	e78f      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dbc:	6963      	ldr	r3, [r4, #20]
 8003dbe:	4d46      	ldr	r5, [pc, #280]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003dc0:	b183      	cbz	r3, 8003de4 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003dca:	f7fe fab9 	bl	8002340 <HAL_GetTick>
 8003dce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003dd2:	079b      	lsls	r3, r3, #30
 8003dd4:	f53f af4c 	bmi.w	8003c70 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7fe fab2 	bl	8002340 <HAL_GetTick>
 8003ddc:	1b80      	subs	r0, r0, r6
 8003dde:	2802      	cmp	r0, #2
 8003de0:	d9f6      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x17c>
 8003de2:	e77b      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8003de4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003dec:	f7fe faa8 	bl	8002340 <HAL_GetTick>
 8003df0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003df4:	079f      	lsls	r7, r3, #30
 8003df6:	f57f af3b 	bpl.w	8003c70 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfa:	f7fe faa1 	bl	8002340 <HAL_GetTick>
 8003dfe:	1b80      	subs	r0, r0, r6
 8003e00:	2802      	cmp	r0, #2
 8003e02:	d9f6      	bls.n	8003df2 <HAL_RCC_OscConfig+0x19e>
 8003e04:	e76a      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0a:	00d5      	lsls	r5, r2, #3
 8003e0c:	d427      	bmi.n	8003e5e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8003e10:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4d2e      	ldr	r5, [pc, #184]	@ (8003edc <HAL_RCC_OscConfig+0x288>)
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	05d8      	lsls	r0, r3, #23
 8003e28:	d51b      	bpl.n	8003e62 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	4d2a      	ldr	r5, [pc, #168]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d127      	bne.n	8003e82 <HAL_RCC_OscConfig+0x22e>
 8003e32:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fa7f 	bl	8002340 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e42:	4e25      	ldr	r6, [pc, #148]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8003e44:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003e48:	079a      	lsls	r2, r3, #30
 8003e4a:	d53f      	bpl.n	8003ecc <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	f43f af13 	beq.w	8003c78 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4a21      	ldr	r2, [pc, #132]	@ (8003ed8 <HAL_RCC_OscConfig+0x284>)
 8003e54:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5c:	e70c      	b.n	8003c78 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8003e5e:	2700      	movs	r7, #0
 8003e60:	e7df      	b.n	8003e22 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e68:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fa69 	bl	8002340 <HAL_GetTick>
 8003e6e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	05d9      	lsls	r1, r3, #23
 8003e74:	d4d9      	bmi.n	8003e2a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fe fa63 	bl	8002340 <HAL_GetTick>
 8003e7a:	1b80      	subs	r0, r0, r6
 8003e7c:	2864      	cmp	r0, #100	@ 0x64
 8003e7e:	d9f7      	bls.n	8003e70 <HAL_RCC_OscConfig+0x21c>
 8003e80:	e72c      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e82:	b9ab      	cbnz	r3, 8003eb0 <HAL_RCC_OscConfig+0x25c>
 8003e84:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	672b      	str	r3, [r5, #112]	@ 0x70
 8003e90:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003e98:	f7fe fa52 	bl	8002340 <HAL_GetTick>
 8003e9c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ea0:	079b      	lsls	r3, r3, #30
 8003ea2:	d5d3      	bpl.n	8003e4c <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7fe fa4c 	bl	8002340 <HAL_GetTick>
 8003ea8:	1b80      	subs	r0, r0, r6
 8003eaa:	4540      	cmp	r0, r8
 8003eac:	d9f7      	bls.n	8003e9e <HAL_RCC_OscConfig+0x24a>
 8003eae:	e715      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003eb4:	d103      	bne.n	8003ebe <HAL_RCC_OscConfig+0x26a>
 8003eb6:	f043 0304 	orr.w	r3, r3, #4
 8003eba:	672b      	str	r3, [r5, #112]	@ 0x70
 8003ebc:	e7b9      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	672b      	str	r3, [r5, #112]	@ 0x70
 8003ec4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003ec6:	f023 0304 	bic.w	r3, r3, #4
 8003eca:	e7b5      	b.n	8003e38 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fa38 	bl	8002340 <HAL_GetTick>
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	4540      	cmp	r0, r8
 8003ed4:	d9b7      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1f2>
 8003ed6:	e701      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4d38      	ldr	r5, [pc, #224]	@ (8003fc4 <HAL_RCC_OscConfig+0x370>)
 8003ee2:	68ab      	ldr	r3, [r5, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d041      	beq.n	8003f70 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 8003eec:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ef4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef6:	d12e      	bne.n	8003f56 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fa22 	bl	8002340 <HAL_GetTick>
 8003efc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	682b      	ldr	r3, [r5, #0]
 8003f00:	0199      	lsls	r1, r3, #6
 8003f02:	d422      	bmi.n	8003f4a <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f14:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003f1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003f1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f24:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003f26:	682b      	ldr	r3, [r5, #0]
 8003f28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fa07 	bl	8002340 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4d24      	ldr	r5, [pc, #144]	@ (8003fc4 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8003f34:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	682b      	ldr	r3, [r5, #0]
 8003f38:	019a      	lsls	r2, r3, #6
 8003f3a:	f53f aea1 	bmi.w	8003c80 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fe f9ff 	bl	8002340 <HAL_GetTick>
 8003f42:	1b00      	subs	r0, r0, r4
 8003f44:	2802      	cmp	r0, #2
 8003f46:	d9f6      	bls.n	8003f36 <HAL_RCC_OscConfig+0x2e2>
 8003f48:	e6c8      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fe f9f9 	bl	8002340 <HAL_GetTick>
 8003f4e:	1b80      	subs	r0, r0, r6
 8003f50:	2802      	cmp	r0, #2
 8003f52:	d9d4      	bls.n	8003efe <HAL_RCC_OscConfig+0x2aa>
 8003f54:	e6c2      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8003f56:	f7fe f9f3 	bl	8002340 <HAL_GetTick>
 8003f5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	019b      	lsls	r3, r3, #6
 8003f60:	f57f ae8e 	bpl.w	8003c80 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe f9ec 	bl	8002340 <HAL_GetTick>
 8003f68:	1b00      	subs	r0, r0, r4
 8003f6a:	2802      	cmp	r0, #2
 8003f6c:	d9f6      	bls.n	8003f5c <HAL_RCC_OscConfig+0x308>
 8003f6e:	e6b5      	b.n	8003cdc <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f70:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003f72:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f74:	f43f ae9b 	beq.w	8003cae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7c:	69e1      	ldr	r1, [r4, #28]
 8003f7e:	428a      	cmp	r2, r1
 8003f80:	f47f ae95 	bne.w	8003cae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f84:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	6a21      	ldr	r1, [r4, #32]
 8003f8a:	428a      	cmp	r2, r1
 8003f8c:	f47f ae8f 	bne.w	8003cae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f90:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f96:	401a      	ands	r2, r3
 8003f98:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003f9c:	f47f ae87 	bne.w	8003cae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fa0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003fa2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003fa6:	0852      	lsrs	r2, r2, #1
 8003fa8:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003faa:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003fae:	f47f ae7e 	bne.w	8003cae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003fb4:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb8:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003fbc:	bf14      	ite	ne
 8003fbe:	2001      	movne	r0, #1
 8003fc0:	2000      	moveq	r0, #0
 8003fc2:	e68c      	b.n	8003cde <HAL_RCC_OscConfig+0x8a>
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4913      	ldr	r1, [pc, #76]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003fca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fcc:	688b      	ldr	r3, [r1, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d01b      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x46>
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d11b      	bne.n	8004012 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fda:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fdc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fe4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003fec:	bf1a      	itte	ne
 8003fee:	480b      	ldrne	r0, [pc, #44]	@ (800401c <HAL_RCC_GetSysClockFreq+0x54>)
 8003ff0:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff2:	480b      	ldreq	r0, [pc, #44]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x58>)
 8003ff4:	fba1 0100 	umull	r0, r1, r1, r0
 8003ff8:	f7fc f962 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x50>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004008:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800400c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400e:	4803      	ldr	r0, [pc, #12]	@ (800401c <HAL_RCC_GetSysClockFreq+0x54>)
 8004010:	e7fc      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8004012:	4803      	ldr	r0, [pc, #12]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004014:	e7fa      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x44>
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	017d7840 	.word	0x017d7840
 8004020:	00f42400 	.word	0x00f42400

08004024 <HAL_RCC_ClockConfig>:
{
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800402a:	4604      	mov	r4, r0
 800402c:	b910      	cbnz	r0, 8004034 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800402e:	2001      	movs	r0, #1
}
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4a45      	ldr	r2, [pc, #276]	@ (800414c <HAL_RCC_ClockConfig+0x128>)
 8004036:	6813      	ldr	r3, [r2, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	428b      	cmp	r3, r1
 800403e:	d328      	bcc.n	8004092 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	6821      	ldr	r1, [r4, #0]
 8004042:	078f      	lsls	r7, r1, #30
 8004044:	d430      	bmi.n	80040a8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	07c8      	lsls	r0, r1, #31
 8004048:	d443      	bmi.n	80040d2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404a:	4a40      	ldr	r2, [pc, #256]	@ (800414c <HAL_RCC_ClockConfig+0x128>)
 800404c:	6813      	ldr	r3, [r2, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	42ab      	cmp	r3, r5
 8004054:	d866      	bhi.n	8004124 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	0751      	lsls	r1, r2, #29
 800405a:	d46f      	bmi.n	800413c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405c:	0713      	lsls	r3, r2, #28
 800405e:	d507      	bpl.n	8004070 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004060:	4a3b      	ldr	r2, [pc, #236]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
 8004062:	6921      	ldr	r1, [r4, #16]
 8004064:	6893      	ldr	r3, [r2, #8]
 8004066:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800406a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800406e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004070:	f7ff ffaa 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8004074:	4b36      	ldr	r3, [pc, #216]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
 8004076:	4a37      	ldr	r2, [pc, #220]	@ (8004154 <HAL_RCC_ClockConfig+0x130>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800407e:	5cd3      	ldrb	r3, [r2, r3]
 8004080:	40d8      	lsrs	r0, r3
 8004082:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCC_ClockConfig+0x134>)
 8004084:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004086:	4b35      	ldr	r3, [pc, #212]	@ (800415c <HAL_RCC_ClockConfig+0x138>)
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f7fe f915 	bl	80022b8 <HAL_InitTick>
  return HAL_OK;
 800408e:	2000      	movs	r0, #0
 8004090:	e7ce      	b.n	8004030 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	6813      	ldr	r3, [r2, #0]
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	430b      	orrs	r3, r1
 800409a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409c:	6813      	ldr	r3, [r2, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	428b      	cmp	r3, r1
 80040a4:	d1c3      	bne.n	800402e <HAL_RCC_ClockConfig+0xa>
 80040a6:	e7cb      	b.n	8004040 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	f011 0f04 	tst.w	r1, #4
 80040ac:	4b28      	ldr	r3, [pc, #160]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80040b6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b8:	070e      	lsls	r6, r1, #28
 80040ba:	d503      	bpl.n	80040c4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80040c2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68a0      	ldr	r0, [r4, #8]
 80040c8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80040cc:	4302      	orrs	r2, r0
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	e7b9      	b.n	8004046 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	6861      	ldr	r1, [r4, #4]
 80040d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
 80040d6:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	d11b      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040dc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	d0a5      	beq.n	800402e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e8:	4f19      	ldr	r7, [pc, #100]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ea:	f022 0203 	bic.w	r2, r2, #3
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80040f2:	f7fe f925 	bl	8002340 <HAL_GetTick>
 80040f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6862      	ldr	r2, [r4, #4]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004104:	d0a1      	beq.n	800404a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004106:	f7fe f91b 	bl	8002340 <HAL_GetTick>
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	4540      	cmp	r0, r8
 800410e:	d9f3      	bls.n	80040f8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004110:	2003      	movs	r0, #3
 8004112:	e78d      	b.n	8004030 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004114:	2902      	cmp	r1, #2
 8004116:	d102      	bne.n	800411e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800411c:	e7e0      	b.n	80040e0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	f012 0f02 	tst.w	r2, #2
 8004122:	e7dd      	b.n	80040e0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	432b      	orrs	r3, r5
 800412c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	42ab      	cmp	r3, r5
 8004136:	f47f af7a 	bne.w	800402e <HAL_RCC_ClockConfig+0xa>
 800413a:	e78c      	b.n	8004056 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800413c:	4904      	ldr	r1, [pc, #16]	@ (8004150 <HAL_RCC_ClockConfig+0x12c>)
 800413e:	68e0      	ldr	r0, [r4, #12]
 8004140:	688b      	ldr	r3, [r1, #8]
 8004142:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8004146:	4303      	orrs	r3, r0
 8004148:	608b      	str	r3, [r1, #8]
 800414a:	e787      	b.n	800405c <HAL_RCC_ClockConfig+0x38>
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	0800aba0 	.word	0x0800aba0
 8004158:	20000078 	.word	0x20000078
 800415c:	20000080 	.word	0x20000080

08004160 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004160:	6803      	ldr	r3, [r0, #0]
{
 8004162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004166:	f013 0601 	ands.w	r6, r3, #1
{
 800416a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800416c:	d00b      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800416e:	4aad      	ldr	r2, [pc, #692]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004170:	6891      	ldr	r1, [r2, #8]
 8004172:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8004176:	6091      	str	r1, [r2, #8]
 8004178:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 800417a:	6891      	ldr	r1, [r2, #8]
 800417c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800417e:	fab6 f686 	clz	r6, r6
 8004182:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004184:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004186:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800418a:	d012      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418c:	49a5      	ldr	r1, [pc, #660]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800418e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004190:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004194:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004198:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800419c:	bf08      	it	eq
 800419e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041a4:	bf16      	itet	ne
 80041a6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80041aa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041ac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ae:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80041b2:	02d8      	lsls	r0, r3, #11
 80041b4:	d510      	bpl.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041b6:	489b      	ldr	r0, [pc, #620]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041b8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80041ba:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041be:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041c2:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80041c6:	ea42 0201 	orr.w	r2, r2, r1
 80041ca:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041ce:	f000 8186 	beq.w	80044de <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80041d2:	2900      	cmp	r1, #0
 80041d4:	bf08      	it	eq
 80041d6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80041d8:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80041dc:	bf18      	it	ne
 80041de:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041e0:	0699      	lsls	r1, r3, #26
 80041e2:	d532      	bpl.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041e6:	4f90      	ldr	r7, [pc, #576]	@ (8004428 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7fe f89d 	bl	8002340 <HAL_GetTick>
 8004206:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	05da      	lsls	r2, r3, #23
 800420c:	f140 8169 	bpl.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004210:	4f84      	ldr	r7, [pc, #528]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004212:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004214:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004216:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800421a:	f040 816d 	bne.w	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004220:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004224:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004228:	4a7e      	ldr	r2, [pc, #504]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422a:	f040 818a 	bne.w	8004542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800422e:	6891      	ldr	r1, [r2, #8]
 8004230:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8004234:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8004238:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800423c:	4301      	orrs	r1, r0
 800423e:	6091      	str	r1, [r2, #8]
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004246:	430b      	orrs	r3, r1
 8004248:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	06d9      	lsls	r1, r3, #27
 800424e:	d50c      	bpl.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004250:	4a74      	ldr	r2, [pc, #464]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004252:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8004256:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800425a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800425e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8004262:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004264:	4301      	orrs	r1, r0
 8004266:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800426a:	045a      	lsls	r2, r3, #17
 800426c:	d508      	bpl.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426e:	496d      	ldr	r1, [pc, #436]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004270:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004272:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004276:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800427a:	4302      	orrs	r2, r0
 800427c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	041f      	lsls	r7, r3, #16
 8004282:	d508      	bpl.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004284:	4967      	ldr	r1, [pc, #412]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004286:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8004288:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800428c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004290:	4302      	orrs	r2, r0
 8004292:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004296:	03d8      	lsls	r0, r3, #15
 8004298:	d508      	bpl.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429a:	4962      	ldr	r1, [pc, #392]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800429c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800429e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80042a2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80042a6:	4302      	orrs	r2, r0
 80042a8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ac:	0399      	lsls	r1, r3, #14
 80042ae:	d508      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042b0:	495c      	ldr	r1, [pc, #368]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80042b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80042b8:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80042bc:	4302      	orrs	r2, r0
 80042be:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c2:	065a      	lsls	r2, r3, #25
 80042c4:	d508      	bpl.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c6:	4957      	ldr	r1, [pc, #348]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80042ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80042ce:	f022 0203 	bic.w	r2, r2, #3
 80042d2:	4302      	orrs	r2, r0
 80042d4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d8:	061f      	lsls	r7, r3, #24
 80042da:	d508      	bpl.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042dc:	4951      	ldr	r1, [pc, #324]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042de:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80042e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80042e4:	f022 020c 	bic.w	r2, r2, #12
 80042e8:	4302      	orrs	r2, r0
 80042ea:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	05d8      	lsls	r0, r3, #23
 80042f0:	d508      	bpl.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042f2:	494c      	ldr	r1, [pc, #304]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80042f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80042fa:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80042fe:	4302      	orrs	r2, r0
 8004300:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004304:	0599      	lsls	r1, r3, #22
 8004306:	d508      	bpl.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004308:	4946      	ldr	r1, [pc, #280]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800430a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800430c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004310:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004314:	4302      	orrs	r2, r0
 8004316:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800431a:	055a      	lsls	r2, r3, #21
 800431c:	d508      	bpl.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800431e:	4941      	ldr	r1, [pc, #260]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004320:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004322:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004326:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800432a:	4302      	orrs	r2, r0
 800432c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004330:	051f      	lsls	r7, r3, #20
 8004332:	d508      	bpl.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004334:	493b      	ldr	r1, [pc, #236]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004336:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004338:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800433c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004340:	4302      	orrs	r2, r0
 8004342:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004346:	04d8      	lsls	r0, r3, #19
 8004348:	d508      	bpl.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800434a:	4936      	ldr	r1, [pc, #216]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800434e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004352:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004356:	4302      	orrs	r2, r0
 8004358:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800435c:	0499      	lsls	r1, r3, #18
 800435e:	d508      	bpl.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004360:	4930      	ldr	r1, [pc, #192]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004362:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004364:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004368:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800436c:	4302      	orrs	r2, r0
 800436e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004372:	025a      	lsls	r2, r3, #9
 8004374:	d508      	bpl.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004376:	492b      	ldr	r1, [pc, #172]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004378:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800437a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800437e:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004382:	4302      	orrs	r2, r0
 8004384:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004388:	029f      	lsls	r7, r3, #10
 800438a:	d50c      	bpl.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800438c:	4825      	ldr	r0, [pc, #148]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800438e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004390:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004394:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004398:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800439c:	bf08      	it	eq
 800439e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043a0:	430a      	orrs	r2, r1
 80043a2:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80043a6:	f013 0f08 	tst.w	r3, #8
 80043aa:	bf18      	it	ne
 80043ac:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ae:	0358      	lsls	r0, r3, #13
 80043b0:	d508      	bpl.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	491c      	ldr	r1, [pc, #112]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b4:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80043b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80043ba:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80043be:	4302      	orrs	r2, r0
 80043c0:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043c4:	0219      	lsls	r1, r3, #8
 80043c6:	d509      	bpl.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043c8:	4916      	ldr	r1, [pc, #88]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80043ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80043d2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80043d6:	4302      	orrs	r2, r0
 80043d8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043dc:	2e01      	cmp	r6, #1
 80043de:	f000 80b4 	beq.w	800454a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80043e2:	019a      	lsls	r2, r3, #6
 80043e4:	f100 80b1 	bmi.w	800454a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043e8:	2d01      	cmp	r5, #1
 80043ea:	d176      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043ec:	4d0d      	ldr	r5, [pc, #52]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ee:	682b      	ldr	r3, [r5, #0]
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f6:	f7fd ffa3 	bl	8002340 <HAL_GetTick>
 80043fa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	009f      	lsls	r7, r3, #2
 8004400:	f100 8127 	bmi.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004404:	6821      	ldr	r1, [r4, #0]
 8004406:	030e      	lsls	r6, r1, #12
 8004408:	d501      	bpl.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800440a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800440c:	b11b      	cbz	r3, 8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800440e:	02cd      	lsls	r5, r1, #11
 8004410:	d523      	bpl.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004412:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004414:	bb0b      	cbnz	r3, 800445a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004416:	4a03      	ldr	r2, [pc, #12]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004418:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800441c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800442c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004430:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004434:	4303      	orrs	r3, r0
 8004436:	6960      	ldr	r0, [r4, #20]
 8004438:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800443c:	69a0      	ldr	r0, [r4, #24]
 800443e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004442:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004446:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800444a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800444c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8004450:	3801      	subs	r0, #1
 8004452:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004456:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800445a:	0288      	lsls	r0, r1, #10
 800445c:	d515      	bpl.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800445e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004464:	d111      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004466:	4a82      	ldr	r2, [pc, #520]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004468:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800446c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004470:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8004474:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004478:	4303      	orrs	r3, r0
 800447a:	6960      	ldr	r0, [r4, #20]
 800447c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004480:	6a20      	ldr	r0, [r4, #32]
 8004482:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004486:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800448a:	070a      	lsls	r2, r1, #28
 800448c:	d519      	bpl.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448e:	4a78      	ldr	r2, [pc, #480]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004490:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004494:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004498:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800449c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6961      	ldr	r1, [r4, #20]
 80044a4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80044a8:	69e1      	ldr	r1, [r4, #28]
 80044aa:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80044ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80044b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80044b8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80044bc:	430b      	orrs	r3, r1
 80044be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044c2:	4c6b      	ldr	r4, [pc, #428]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd ff38 	bl	8002340 <HAL_GetTick>
 80044d0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	f140 80c3 	bpl.w	8004660 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80044da:	2000      	movs	r0, #0
 80044dc:	e009      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 80044de:	2601      	movs	r6, #1
 80044e0:	e67a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd ff2d 	bl	8002340 <HAL_GetTick>
 80044e6:	eba0 0008 	sub.w	r0, r0, r8
 80044ea:	2864      	cmp	r0, #100	@ 0x64
 80044ec:	f67f ae8c 	bls.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80044f0:	2003      	movs	r0, #3
}
 80044f2:	b003      	add	sp, #12
 80044f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f43f ae8e 	beq.w	800421e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800450a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800450e:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004512:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004516:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8004518:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800451a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800451c:	07db      	lsls	r3, r3, #31
 800451e:	f57f ae7e 	bpl.w	800421e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8004522:	f7fd ff0d 	bl	8002340 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800452a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800452e:	0798      	lsls	r0, r3, #30
 8004530:	f53f ae75 	bmi.w	800421e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7fd ff04 	bl	8002340 <HAL_GetTick>
 8004538:	eba0 0008 	sub.w	r0, r0, r8
 800453c:	4548      	cmp	r0, r9
 800453e:	d9f5      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004540:	e7d6      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004542:	6891      	ldr	r1, [r2, #8]
 8004544:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8004548:	e679      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800454a:	4e49      	ldr	r6, [pc, #292]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800454c:	6833      	ldr	r3, [r6, #0]
 800454e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004552:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004554:	f7fd fef4 	bl	8002340 <HAL_GetTick>
 8004558:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800455a:	6833      	ldr	r3, [r6, #0]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	d472      	bmi.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	07d7      	lsls	r7, r2, #31
 8004564:	d512      	bpl.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004566:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004568:	b983      	cbnz	r3, 800458c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800456a:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800456e:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004572:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004576:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800457a:	430b      	orrs	r3, r1
 800457c:	6861      	ldr	r1, [r4, #4]
 800457e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004582:	68a1      	ldr	r1, [r4, #8]
 8004584:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004588:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800458c:	0316      	lsls	r6, r2, #12
 800458e:	d503      	bpl.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8004590:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004596:	d005      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004598:	02d0      	lsls	r0, r2, #11
 800459a:	d51e      	bpl.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800459c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a2:	d11a      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045a4:	4932      	ldr	r1, [pc, #200]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80045a6:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045aa:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045b2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80045b6:	4303      	orrs	r3, r0
 80045b8:	6860      	ldr	r0, [r4, #4]
 80045ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80045be:	68e0      	ldr	r0, [r4, #12]
 80045c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80045c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045c8:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 80045cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80045ce:	f020 001f 	bic.w	r0, r0, #31
 80045d2:	3b01      	subs	r3, #1
 80045d4:	4303      	orrs	r3, r0
 80045d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045da:	01d1      	lsls	r1, r2, #7
 80045dc:	d511      	bpl.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045de:	4924      	ldr	r1, [pc, #144]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80045e0:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045e4:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80045e8:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80045ec:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80045f0:	4303      	orrs	r3, r0
 80045f2:	6860      	ldr	r0, [r4, #4]
 80045f4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80045f8:	6920      	ldr	r0, [r4, #16]
 80045fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80045fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004602:	0192      	lsls	r2, r2, #6
 8004604:	d50d      	bpl.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	6862      	ldr	r2, [r4, #4]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004610:	68e2      	ldr	r2, [r4, #12]
 8004612:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004616:	68a2      	ldr	r2, [r4, #8]
 8004618:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800461e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004622:	4e13      	ldr	r6, [pc, #76]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800462a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800462c:	f7fd fe88 	bl	8002340 <HAL_GetTick>
 8004630:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	f53f aed7 	bmi.w	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800463a:	f7fd fe81 	bl	8002340 <HAL_GetTick>
 800463e:	1bc0      	subs	r0, r0, r7
 8004640:	2864      	cmp	r0, #100	@ 0x64
 8004642:	d9f6      	bls.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004644:	e754      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004646:	f7fd fe7b 	bl	8002340 <HAL_GetTick>
 800464a:	1bc0      	subs	r0, r0, r7
 800464c:	2864      	cmp	r0, #100	@ 0x64
 800464e:	d984      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004650:	e74e      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004652:	f7fd fe75 	bl	8002340 <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2864      	cmp	r0, #100	@ 0x64
 800465a:	f67f aecf 	bls.w	80043fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800465e:	e747      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004660:	f7fd fe6e 	bl	8002340 <HAL_GetTick>
 8004664:	1b40      	subs	r0, r0, r5
 8004666:	2864      	cmp	r0, #100	@ 0x64
 8004668:	f67f af33 	bls.w	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800466c:	e740      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 8004676:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004678:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 800467a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800467e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004682:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004684:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004688:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800468c:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800468e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004692:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8004696:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004698:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800469c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80046a0:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80046a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046a6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 80046aa:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046b0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80046b4:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046ba:	f3c2 6203 	ubfx	r2, r2, #24, #4
 80046be:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046c4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 80046c8:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80046ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046ce:	f002 021f 	and.w	r2, r2, #31
 80046d2:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80046d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046d8:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80046dc:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80046de:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046e2:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80046e6:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80046e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046ec:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80046f0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80046f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046f6:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80046fa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8004702:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8004704:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004708:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 800470c:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800470e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004712:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 8004716:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8004718:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800471c:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8004720:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8004722:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004726:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 800472a:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800472c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004730:	f002 0203 	and.w	r2, r2, #3
 8004734:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8004736:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800473a:	f002 020c 	and.w	r2, r2, #12
 800473e:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8004740:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004744:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8004748:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800474a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800474e:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8004752:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8004754:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004758:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800475c:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800475e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004762:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8004766:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8004768:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800476c:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8004770:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8004772:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004776:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800477a:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800477c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004780:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8004784:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8004786:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800478a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800478e:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004790:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004794:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004798:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800479a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800479e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80047a2:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80047a6:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80047a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80047aa:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80047ae:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80047b2:	430a      	orrs	r2, r1
 80047b4:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047be:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	00fffff1 	.word	0x00fffff1
 80047c8:	40023800 	.word	0x40023800

080047cc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047cc:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 80047d0:	d140      	bne.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 80047d2:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80047d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80047d8:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 80047dc:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80047e0:	d046      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80047e2:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 80047e6:	d04c      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d14c      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	bf08      	it	eq
 80047f6:	4b26      	ldreq	r3, [pc, #152]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80047f8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047fc:	bf18      	it	ne
 80047fe:	4b25      	ldrne	r3, [pc, #148]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004800:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004804:	4a21      	ldr	r2, [pc, #132]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004806:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800480a:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 800480e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004812:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004814:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004818:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800481c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004820:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8004824:	e012      	b.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004826:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004828:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800482e:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004832:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8004836:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800483a:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800483c:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004840:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004844:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 800484e:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004852:	4770      	bx	lr
 8004854:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004858:	d115      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 800485a:	4b0c      	ldr	r3, [pc, #48]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800485c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004860:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 8004864:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8004868:	d002      	beq.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800486a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800486e:	e7ba      	b.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800487c:	d1d3      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004880:	e7d2      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004882:	4805      	ldr	r0, [pc, #20]	@ (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004884:	4770      	bx	lr
    switch (saiclocksource)
 8004886:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	00f42400 	.word	0x00f42400
 8004894:	017d7840 	.word	0x017d7840
 8004898:	00bb8000 	.word	0x00bb8000

0800489c <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800489c:	2901      	cmp	r1, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800489e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048a0:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80048a2:	bf0c      	ite	eq
 80048a4:	2309      	moveq	r3, #9
 80048a6:	2301      	movne	r3, #1
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048a8:	2908      	cmp	r1, #8
 80048aa:	d105      	bne.n	80048b8 <SAI_InterruptFlag+0x1c>
 80048ac:	f022 0102 	bic.w	r1, r2, #2
 80048b0:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 80048b2:	bf08      	it	eq
 80048b4:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048b8:	3a02      	subs	r2, #2
 80048ba:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048bc:	bf94      	ite	ls
 80048be:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048c2:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80048c6:	4770      	bx	lr

080048c8 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <SAI_Disable.isra.0+0x34>)
 80048ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80048d4:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80048d6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80048d8:	6811      	ldr	r1, [r2, #0]
 80048da:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80048de:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80048e0:	3b01      	subs	r3, #1
 80048e2:	d206      	bcs.n	80048f2 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80048e4:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80048e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ec:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
      break;
 80048f0:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80048f2:	6811      	ldr	r1, [r2, #0]
 80048f4:	03c9      	lsls	r1, r1, #15
 80048f6:	d4f3      	bmi.n	80048e0 <SAI_Disable.isra.0+0x18>

  return status;
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000078 	.word	0x20000078

08004900 <HAL_SAI_MspInit>:
}
 8004900:	4770      	bx	lr
	...

08004904 <HAL_SAI_Init>:
{
 8004904:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8004906:	4604      	mov	r4, r0
 8004908:	2800      	cmp	r0, #0
 800490a:	f000 80c8 	beq.w	8004a9e <HAL_SAI_Init+0x19a>
  if (hsai->State == HAL_SAI_STATE_RESET)
 800490e:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8004912:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004916:	b91b      	cbnz	r3, 8004920 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8004918:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 800491c:	f7ff fff0 	bl	8004900 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004920:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8004922:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8004924:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 8004928:	f7ff ffce 	bl	80048c8 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 800492c:	68e3      	ldr	r3, [r4, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	f000 80a5 	beq.w	8004a7e <HAL_SAI_Init+0x17a>
 8004934:	1e98      	subs	r0, r3, #2
 8004936:	4243      	negs	r3, r0
 8004938:	4143      	adcs	r3, r0
 800493a:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 800493c:	68a5      	ldr	r5, [r4, #8]
 800493e:	2d02      	cmp	r5, #2
 8004940:	f000 80a1 	beq.w	8004a86 <HAL_SAI_Init+0x182>
 8004944:	2d03      	cmp	r5, #3
 8004946:	f000 809c 	beq.w	8004a82 <HAL_SAI_Init+0x17e>
 800494a:	1e69      	subs	r1, r5, #1
 800494c:	424d      	negs	r5, r1
 800494e:	414d      	adcs	r5, r1
 8004950:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	4953      	ldr	r1, [pc, #332]	@ (8004aa4 <HAL_SAI_Init+0x1a0>)
 8004956:	4854      	ldr	r0, [pc, #336]	@ (8004aa8 <HAL_SAI_Init+0x1a4>)
 8004958:	428a      	cmp	r2, r1
 800495a:	d003      	beq.n	8004964 <HAL_SAI_Init+0x60>
 800495c:	4e53      	ldr	r6, [pc, #332]	@ (8004aac <HAL_SAI_Init+0x1a8>)
 800495e:	42b2      	cmp	r2, r6
 8004960:	f040 8094 	bne.w	8004a8c <HAL_SAI_Init+0x188>
    SAI1->GCR = tmpregisterGCR;
 8004964:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004968:	69e3      	ldr	r3, [r4, #28]
 800496a:	b33b      	cbz	r3, 80049bc <HAL_SAI_Init+0xb8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800496c:	428a      	cmp	r2, r1
 800496e:	d003      	beq.n	8004978 <HAL_SAI_Init+0x74>
 8004970:	4b4e      	ldr	r3, [pc, #312]	@ (8004aac <HAL_SAI_Init+0x1a8>)
 8004972:	429a      	cmp	r2, r3
 8004974:	f040 808d 	bne.w	8004a92 <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004978:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800497c:	f7ff ff26 	bl	80047cc <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab0 <HAL_SAI_Init+0x1ac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d002      	beq.n	800498e <HAL_SAI_Init+0x8a>
 8004988:	3220      	adds	r2, #32
 800498a:	4293      	cmp	r3, r2
 800498c:	d103      	bne.n	8004996 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800498e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004992:	f7ff ff1b 	bl	80047cc <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004996:	220a      	movs	r2, #10
 8004998:	69e3      	ldr	r3, [r4, #28]
 800499a:	4350      	muls	r0, r2
 800499c:	025b      	lsls	r3, r3, #9
 800499e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80049a2:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 80049a6:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80049aa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    if ((tmpval % 10) > 8)
 80049ac:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 80049ae:	bf08      	it	eq
 80049b0:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80049b2:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10;
 80049b4:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80049b6:	bf04      	itt	eq
 80049b8:	085b      	lsreq	r3, r3, #1
 80049ba:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049bc:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80049be:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049c0:	f033 0202 	bics.w	r2, r3, #2
 80049c4:	d167      	bne.n	8004a96 <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80049c6:	3901      	subs	r1, #1
 80049c8:	bf18      	it	ne
 80049ca:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80049cc:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80049ce:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80049d0:	4838      	ldr	r0, [pc, #224]	@ (8004ab4 <HAL_SAI_Init+0x1b0>)
 80049d2:	6816      	ldr	r6, [r2, #0]
 80049d4:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049d6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80049d8:	4333      	orrs	r3, r6
 80049da:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80049dc:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049de:	4333      	orrs	r3, r6
 80049e0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80049e2:	6810      	ldr	r0, [r2, #0]
 80049e4:	4333      	orrs	r3, r6
 80049e6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80049e8:	4333      	orrs	r3, r6
 80049ea:	6926      	ldr	r6, [r4, #16]
 80049ec:	4333      	orrs	r3, r6
 80049ee:	6966      	ldr	r6, [r4, #20]
 80049f0:	4333      	orrs	r3, r6
 80049f2:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80049f4:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049f6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80049fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049fc:	432b      	orrs	r3, r5
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a02:	6853      	ldr	r3, [r2, #4]
 8004a04:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004a08:	f023 030f 	bic.w	r3, r3, #15
 8004a0c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a0e:	69a3      	ldr	r3, [r4, #24]
 8004a10:	6851      	ldr	r1, [r2, #4]
 8004a12:	4303      	orrs	r3, r0
 8004a14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004a16:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a18:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a1e:	4b26      	ldr	r3, [pc, #152]	@ (8004ab8 <HAL_SAI_Init+0x1b4>)
 8004a20:	6891      	ldr	r1, [r2, #8]
 8004a22:	400b      	ands	r3, r1
 8004a24:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a26:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004a28:	6891      	ldr	r1, [r2, #8]
 8004a2a:	4303      	orrs	r3, r0
 8004a2c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004a2e:	4303      	orrs	r3, r0
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004a34:	3901      	subs	r1, #1
 8004a36:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004a38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a3a:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a3c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a40:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a42:	68d3      	ldr	r3, [r2, #12]
 8004a44:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8004a48:	f023 030f 	bic.w	r3, r3, #15
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a52:	68d1      	ldr	r1, [r2, #12]
 8004a54:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 8004a58:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a5a:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a5c:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004a5e:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004a64:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004a66:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004a6c:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8004a6e:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a70:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8004a74:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8004a78:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8004a7e:	2310      	movs	r3, #16
 8004a80:	e75c      	b.n	800493c <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a82:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a86:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8004a8a:	e762      	b.n	8004952 <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 8004a8c:	f8c0 3c00 	str.w	r3, [r0, #3072]	@ 0xc00
 8004a90:	e76a      	b.n	8004968 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 8004a92:	2000      	movs	r0, #0
 8004a94:	e774      	b.n	8004980 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004a96:	1e4a      	subs	r2, r1, #1
 8004a98:	4251      	negs	r1, r2
 8004a9a:	4151      	adcs	r1, r2
 8004a9c:	e796      	b.n	80049cc <HAL_SAI_Init+0xc8>
    return HAL_ERROR;
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	e7ec      	b.n	8004a7c <HAL_SAI_Init+0x178>
 8004aa2:	bf00      	nop
 8004aa4:	40015804 	.word	0x40015804
 8004aa8:	40015000 	.word	0x40015000
 8004aac:	40015824 	.word	0x40015824
 8004ab0:	40015c04 	.word	0x40015c04
 8004ab4:	ff05c010 	.word	0xff05c010
 8004ab8:	fff88000 	.word	0xfff88000

08004abc <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 8004abc:	4770      	bx	lr

08004abe <HAL_SAI_DeInit>:
{
 8004abe:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	b1c0      	cbz	r0, 8004af6 <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ac4:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8004ac6:	6806      	ldr	r6, [r0, #0]
 8004ac8:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 8004aca:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 8004ad2:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004ad4:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
 8004ad6:	f7ff fef7 	bl	80048c8 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004ada:	6873      	ldr	r3, [r6, #4]
 8004adc:	f043 0308 	orr.w	r3, r3, #8
 8004ae0:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
 8004ae2:	f7ff ffeb 	bl	8004abc <HAL_SAI_MspDeInit>
  return HAL_OK;
 8004ae6:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ae8:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8004aec:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 8004af0:	f885 407d 	strb.w	r4, [r5, #125]	@ 0x7d
}
 8004af4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004af6:	2001      	movs	r0, #1
 8004af8:	e7fc      	b.n	8004af4 <HAL_SAI_DeInit+0x36>

08004afa <HAL_SAI_DMAStop>:
{
 8004afa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8004afc:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 8004b00:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d040      	beq.n	8004b88 <HAL_SAI_DMAStop+0x8e>
 8004b06:	2501      	movs	r5, #1
 8004b08:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  SAI_Disable(hsai);
 8004b0c:	f7ff fedc 	bl	80048c8 <SAI_Disable.isra.0>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b10:	6802      	ldr	r2, [r0, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004b12:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004b14:	6813      	ldr	r3, [r2, #0]
 8004b16:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b1a:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004b1c:	bb08      	cbnz	r0, 8004b62 <HAL_SAI_DMAStop+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004b20:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004b22:	b188      	cbz	r0, 8004b48 <HAL_SAI_DMAStop+0x4e>
 8004b24:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004b28:	2b22      	cmp	r3, #34	@ 0x22
 8004b2a:	d10d      	bne.n	8004b48 <HAL_SAI_DMAStop+0x4e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004b2c:	f7fd ffff 	bl	8002b2e <HAL_DMA_Abort>
 8004b30:	b150      	cbz	r0, 8004b48 <HAL_SAI_DMAStop+0x4e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004b32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	2b80      	cmp	r3, #128	@ 0x80
 8004b38:	d006      	beq.n	8004b48 <HAL_SAI_DMAStop+0x4e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004b3a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8004b3e:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b44:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	6853      	ldr	r3, [r2, #4]
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8004b5e:	4628      	mov	r0, r5
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004b62:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004b66:	2b12      	cmp	r3, #18
 8004b68:	d1d9      	bne.n	8004b1e <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004b6a:	f7fd ffe0 	bl	8002b2e <HAL_DMA_Abort>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d0d5      	beq.n	8004b1e <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004b72:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d0d1      	beq.n	8004b1e <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004b7a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b82:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004b86:	e7cb      	b.n	8004b20 <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 8004b88:	2502      	movs	r5, #2
 8004b8a:	e7e8      	b.n	8004b5e <HAL_SAI_DMAStop+0x64>

08004b8c <HAL_SAI_Transmit_DMA>:
{
 8004b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b90:	460e      	mov	r6, r1
 8004b92:	4604      	mov	r4, r0
 8004b94:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8004b96:	f7fd fbd3 	bl	8002340 <HAL_GetTick>
 8004b9a:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0))
 8004b9c:	b34e      	cbz	r6, 8004bf2 <HAL_SAI_Transmit_DMA+0x66>
 8004b9e:	b345      	cbz	r5, 8004bf2 <HAL_SAI_Transmit_DMA+0x66>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004ba0:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	d153      	bne.n	8004c52 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_LOCK(hsai);
 8004baa:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d04f      	beq.n	8004c52 <HAL_SAI_Transmit_DMA+0xc6>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bb2:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004bb6:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004bb8:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004bba:	4631      	mov	r1, r6
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bbc:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004bc0:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004bc4:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <HAL_SAI_Transmit_DMA+0xcc>)
    __HAL_LOCK(hsai);
 8004bc6:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 8004bca:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8004bce:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 8004bd2:	6666      	str	r6, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004bd4:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004bd6:	4b21      	ldr	r3, [pc, #132]	@ (8004c5c <HAL_SAI_Transmit_DMA+0xd0>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004bd8:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004bda:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004bdc:	4b20      	ldr	r3, [pc, #128]	@ (8004c60 <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004bde:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8004be0:	e9c0 3813 	strd	r3, r8, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004be4:	462b      	mov	r3, r5
 8004be6:	f7fd ff65 	bl	8002ab4 <HAL_DMA_Start_IT>
 8004bea:	4605      	mov	r5, r0
 8004bec:	b128      	cbz	r0, 8004bfa <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8004bee:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8004bf2:	2501      	movs	r5, #1
}
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004bfa:	4601      	mov	r1, r0
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff fe4d 	bl	800489c <SAI_InterruptFlag>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	4302      	orrs	r2, r0
 8004c08:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004c10:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	695e      	ldr	r6, [r3, #20]
 8004c16:	f416 26e0 	ands.w	r6, r6, #458752	@ 0x70000
 8004c1a:	d00a      	beq.n	8004c32 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	03d2      	lsls	r2, r2, #15
 8004c20:	d403      	bmi.n	8004c2a <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c28:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8004c30:	e7e0      	b.n	8004bf4 <HAL_SAI_Transmit_DMA+0x68>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004c32:	f7fd fb85 	bl	8002340 <HAL_GetTick>
 8004c36:	1bc0      	subs	r0, r0, r7
 8004c38:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004c3c:	d9e9      	bls.n	8004c12 <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004c3e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8004c42:	2503      	movs	r5, #3
        __HAL_UNLOCK(hsai);
 8004c44:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c4c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8004c50:	e7d0      	b.n	8004bf4 <HAL_SAI_Transmit_DMA+0x68>
    __HAL_LOCK(hsai);
 8004c52:	2502      	movs	r5, #2
 8004c54:	e7ce      	b.n	8004bf4 <HAL_SAI_Transmit_DMA+0x68>
 8004c56:	bf00      	nop
 8004c58:	08004d39 	.word	0x08004d39
 8004c5c:	08004d01 	.word	0x08004d01
 8004c60:	08004d85 	.word	0x08004d85

08004c64 <HAL_SAI_Receive_DMA>:
{
 8004c64:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 8004c66:	460a      	mov	r2, r1
{
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 8004c6c:	b331      	cbz	r1, 8004cbc <HAL_SAI_Receive_DMA+0x58>
 8004c6e:	b32b      	cbz	r3, 8004cbc <HAL_SAI_Receive_DMA+0x58>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004c70:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
 8004c74:	2901      	cmp	r1, #1
 8004c76:	b2c8      	uxtb	r0, r1
 8004c78:	d13a      	bne.n	8004cf0 <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 8004c7a:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
 8004c7e:	2901      	cmp	r1, #1
 8004c80:	d036      	beq.n	8004cf0 <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c82:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004c84:	2122      	movs	r1, #34	@ 0x22
    __HAL_LOCK(hsai);
 8004c86:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c8a:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004c8e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004c90:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004c94:	4917      	ldr	r1, [pc, #92]	@ (8004cf4 <HAL_SAI_Receive_DMA+0x90>)
    hsai->pBuffPtr = pData;
 8004c96:	6662      	str	r2, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 8004c98:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8004c9c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004ca0:	6401      	str	r1, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004ca2:	4915      	ldr	r1, [pc, #84]	@ (8004cf8 <HAL_SAI_Receive_DMA+0x94>)
 8004ca4:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004ca6:	4915      	ldr	r1, [pc, #84]	@ (8004cfc <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8004ca8:	e9c0 1613 	strd	r1, r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004cac:	6821      	ldr	r1, [r4, #0]
 8004cae:	311c      	adds	r1, #28
 8004cb0:	f7fd ff00 	bl	8002ab4 <HAL_DMA_Start_IT>
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	b120      	cbz	r0, 8004cc2 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 8004cb8:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8004cbc:	2501      	movs	r5, #1
}
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff fde9 	bl	800489c <SAI_InterruptFlag>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	4302      	orrs	r2, r0
 8004cd0:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004cd8:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	03d2      	lsls	r2, r2, #15
 8004cde:	d403      	bmi.n	8004ce8 <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ce6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8004cee:	e7e6      	b.n	8004cbe <HAL_SAI_Receive_DMA+0x5a>
    __HAL_LOCK(hsai);
 8004cf0:	2502      	movs	r5, #2
 8004cf2:	e7e4      	b.n	8004cbe <HAL_SAI_Receive_DMA+0x5a>
 8004cf4:	08004d7b 	.word	0x08004d7b
 8004cf8:	08004d43 	.word	0x08004d43
 8004cfc:	08004d85 	.word	0x08004d85

08004d00 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004d00:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d02:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d04:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0a:	d011      	beq.n	8004d30 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004d0c:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8004d0e:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004d10:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004d12:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8004d14:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004d18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d1c:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004d1e:	f7ff fdbd 	bl	800489c <SAI_InterruptFlag>
 8004d22:	692b      	ldr	r3, [r5, #16]
 8004d24:	ea23 0300 	bic.w	r3, r3, r0
 8004d28:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7fc faf7 	bl	8001324 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004d36:	bd38      	pop	{r3, r4, r5, pc}

08004d38 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004d38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004d3a:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004d3c:	f7fc faf6 	bl	800132c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004d40:	bd08      	pop	{r3, pc}

08004d42 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004d42:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d44:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d4c:	d011      	beq.n	8004d72 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004d4e:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8004d50:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004d52:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d5a:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8004d5c:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004d60:	f7ff fd9c 	bl	800489c <SAI_InterruptFlag>
 8004d64:	692b      	ldr	r3, [r5, #16]
 8004d66:	ea23 0300 	bic.w	r3, r3, r0
 8004d6a:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7fc fc46 	bl	8001604 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004d78:	bd38      	pop	{r3, r4, r5, pc}

08004d7a <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004d7a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004d7c:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004d7e:	f7fc fc45 	bl	800160c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004d82:	bd08      	pop	{r3, pc}

08004d84 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d84:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004d86:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004d88:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d90:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8004d94:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d003      	beq.n	8004da4 <SAI_DMAError+0x20>
 8004d9c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d10c      	bne.n	8004dbe <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004da4:	6802      	ldr	r2, [r0, #0]
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004dac:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8004dae:	f7ff fd8b 	bl	80048c8 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004db2:	2301      	movs	r3, #1
 8004db4:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004dbe:	f7fc fc29 	bl	8001614 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004dc2:	bd08      	pop	{r3, pc}

08004dc4 <HAL_SAI_GetState>:
  return hsai->State;
 8004dc4:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 8004dc8:	4770      	bx	lr

08004dca <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004dca:	4770      	bx	lr

08004dcc <HAL_SDRAM_Init>:
{
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	b1c8      	cbz	r0, 8004e08 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004dd4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8004dd8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004ddc:	b91b      	cbnz	r3, 8004de6 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004dde:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004de2:	f7ff fff2 	bl	8004dca <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004de6:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004de8:	1d21      	adds	r1, r4, #4
 8004dea:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004dec:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004df0:	f000 f843 	bl	8004e7a <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004df4:	6862      	ldr	r2, [r4, #4]
 8004df6:	4629      	mov	r1, r5
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	f000 f876 	bl	8004eea <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004dfe:	2301      	movs	r3, #1
  return HAL_OK;
 8004e00:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e02:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e08:	2001      	movs	r0, #1
 8004e0a:	e7fc      	b.n	8004e06 <HAL_SDRAM_Init+0x3a>

08004e0c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004e0c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004e0e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8004e12:	4605      	mov	r5, r0
 8004e14:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004e16:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004e18:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004e1a:	d010      	beq.n	8004e3e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004e1c:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8004e20:	2c01      	cmp	r4, #1
 8004e22:	d110      	bne.n	8004e46 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e24:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e26:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e28:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004e2c:	f000 f893 	bl	8004f56 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d104      	bne.n	8004e40 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e36:	2305      	movs	r3, #5
 8004e38:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e3c:	2000      	movs	r0, #0
}
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004e40:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8004e44:	e7fa      	b.n	8004e3c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8004e46:	2001      	movs	r0, #1
 8004e48:	e7f9      	b.n	8004e3e <HAL_SDRAM_SendCommand+0x32>

08004e4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004e4a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8004e50:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	b2d8      	uxtb	r0, r3
 8004e56:	d00d      	beq.n	8004e74 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004e58:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	b2dd      	uxtb	r5, r3
 8004e60:	d109      	bne.n	8004e76 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e62:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004e64:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e66:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004e6a:	f000 f886 	bl	8004f7a <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e6e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e70:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e76:	2001      	movs	r0, #1
 8004e78:	e7fc      	b.n	8004e74 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08004e7a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004e7e:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8004e82:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8004e86:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8004e8a:	ea43 0308 	orr.w	r3, r3, r8
 8004e8e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8004e92:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004e96:	6809      	ldr	r1, [r1, #0]
 8004e98:	b991      	cbnz	r1, 8004ec0 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004e9a:	ea43 030e 	orr.w	r3, r3, lr
 8004e9e:	6801      	ldr	r1, [r0, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8004ea6:	ea43 030c 	orr.w	r3, r3, ip
 8004eaa:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8004eae:	433b      	orrs	r3, r7
 8004eb0:	4333      	orrs	r3, r6
 8004eb2:	432b      	orrs	r3, r5
 8004eb4:	4323      	orrs	r3, r4
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004ec0:	6801      	ldr	r1, [r0, #0]
 8004ec2:	ea43 030e 	orr.w	r3, r3, lr
 8004ec6:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004ece:	ea42 030c 	orr.w	r3, r2, ip
 8004ed2:	6841      	ldr	r1, [r0, #4]
 8004ed4:	433b      	orrs	r3, r7
 8004ed6:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8004eda:	4333      	orrs	r3, r6
 8004edc:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004ee0:	432b      	orrs	r3, r5
 8004ee2:	4323      	orrs	r3, r4
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	6043      	str	r3, [r0, #4]
 8004ee8:	e7e7      	b.n	8004eba <FMC_SDRAM_Init+0x40>

08004eea <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004eea:	68cb      	ldr	r3, [r1, #12]
 8004eec:	f103 3cff 	add.w	ip, r3, #4294967295
 8004ef0:	694b      	ldr	r3, [r1, #20]
{
 8004ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	680f      	ldr	r7, [r1, #0]
 8004ef8:	684c      	ldr	r4, [r1, #4]
 8004efa:	688e      	ldr	r6, [r1, #8]
 8004efc:	051b      	lsls	r3, r3, #20
 8004efe:	690d      	ldr	r5, [r1, #16]
 8004f00:	3c01      	subs	r4, #1
 8004f02:	6989      	ldr	r1, [r1, #24]
 8004f04:	3e01      	subs	r6, #1
 8004f06:	3d01      	subs	r5, #1
 8004f08:	3f01      	subs	r7, #1
 8004f0a:	3901      	subs	r1, #1
 8004f0c:	0124      	lsls	r4, r4, #4
 8004f0e:	0236      	lsls	r6, r6, #8
 8004f10:	042d      	lsls	r5, r5, #16
 8004f12:	0609      	lsls	r1, r1, #24
 8004f14:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8004f18:	b95a      	cbnz	r2, 8004f32 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004f1a:	433b      	orrs	r3, r7
 8004f1c:	6882      	ldr	r2, [r0, #8]
 8004f1e:	4323      	orrs	r3, r4
 8004f20:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8004f24:	4333      	orrs	r3, r6
 8004f26:	432b      	orrs	r3, r5
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8004f2e:	2000      	movs	r0, #0
 8004f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004f32:	6882      	ldr	r2, [r0, #8]
 8004f34:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004f38:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8004f3c:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004f3e:	ea44 0306 	orr.w	r3, r4, r6
 8004f42:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004f44:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004f46:	68c2      	ldr	r2, [r0, #12]
 8004f48:	432b      	orrs	r3, r5
 8004f4a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60c3      	str	r3, [r0, #12]
 8004f54:	e7eb      	b.n	8004f2e <FMC_SDRAM_Timing_Init+0x44>

08004f56 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004f56:	6902      	ldr	r2, [r0, #16]
{
 8004f58:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004f5a:	e9d1 3400 	ldrd	r3, r4, [r1]
 8004f5e:	0d92      	lsrs	r2, r2, #22
 8004f60:	4323      	orrs	r3, r4
 8004f62:	68cc      	ldr	r4, [r1, #12]
 8004f64:	0592      	lsls	r2, r2, #22
 8004f66:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	3a01      	subs	r2, #1
 8004f70:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004f74:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8004f76:	2000      	movs	r0, #0
 8004f78:	bd10      	pop	{r4, pc}

08004f7a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004f7a:	6943      	ldr	r3, [r0, #20]
 8004f7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f80:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8004f84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004f88:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	4770      	bx	lr
	...

08004f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f96:	e003      	b.n	8004fa0 <LoopCopyDataInit>

08004f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f98:	4b0c      	ldr	r3, [pc, #48]	@ (8004fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f9e:	3104      	adds	r1, #4

08004fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fa0:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fa8:	d3f6      	bcc.n	8004f98 <CopyDataInit>
  ldr  r2, =_sbss
 8004faa:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fac:	e002      	b.n	8004fb4 <LoopFillZerobss>

08004fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fb0:	f842 3b04 	str.w	r3, [r2], #4

08004fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fb8:	d3f9      	bcc.n	8004fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fba:	f7fd f955 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fbe:	f000 ffef 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fc2:	f000 fa6d 	bl	80054a0 <main>
  bx  lr    
 8004fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fc8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004fcc:	0800d28c 	.word	0x0800d28c
  ldr  r0, =_sdata
 8004fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fd4:	20000120 	.word	0x20000120
  ldr  r2, =_sbss
 8004fd8:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 8004fdc:	20024e30 	.word	0x20024e30

08004fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fe0:	e7fe      	b.n	8004fe0 <ADC_IRQHandler>

08004fe2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8004fe2:	b570      	push	{r4, r5, r6, lr}
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	460e      	mov	r6, r1
 8004fea:	1b73      	subs	r3, r6, r5
 8004fec:	429c      	cmp	r4, r3
 8004fee:	dc01      	bgt.n	8004ff4 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004ff4:	f3af 8000 	nop.w
 8004ff8:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffc:	e7f5      	b.n	8004fea <_read+0x8>

08004ffe <_write>:

int _write(int file, char *ptr, int len)
{
 8004ffe:	b570      	push	{r4, r5, r6, lr}
 8005000:	460d      	mov	r5, r1
 8005002:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005004:	460e      	mov	r6, r1
 8005006:	1b73      	subs	r3, r6, r5
 8005008:	429c      	cmp	r4, r3
 800500a:	dc01      	bgt.n	8005010 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800500c:	4620      	mov	r0, r4
 800500e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8005010:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005014:	f000 fdc2 	bl	8005b9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005018:	e7f5      	b.n	8005006 <_write+0x8>
	...

0800501c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800501c:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <_sbrk+0x2c>)
 800501e:	6811      	ldr	r1, [r2, #0]
{
 8005020:	b508      	push	{r3, lr}
 8005022:	4603      	mov	r3, r0
	if (heap_end == 0)
 8005024:	b909      	cbnz	r1, 800502a <_sbrk+0xe>
		heap_end = &end;
 8005026:	4909      	ldr	r1, [pc, #36]	@ (800504c <_sbrk+0x30>)
 8005028:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800502a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800502c:	4669      	mov	r1, sp
 800502e:	4403      	add	r3, r0
 8005030:	428b      	cmp	r3, r1
 8005032:	d906      	bls.n	8005042 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005034:	f000 ffae 	bl	8005f94 <__errno>
 8005038:	230c      	movs	r3, #12
 800503a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005040:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8005042:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8005044:	e7fc      	b.n	8005040 <_sbrk+0x24>
 8005046:	bf00      	nop
 8005048:	20000710 	.word	0x20000710
 800504c:	20024e30 	.word	0x20024e30

08005050 <_close>:

int _close(int file)
{
	return -1;
}
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	4770      	bx	lr

08005056 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005056:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 800505a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800505c:	604b      	str	r3, [r1, #4]
}
 800505e:	4770      	bx	lr

08005060 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005060:	2001      	movs	r0, #1
 8005062:	4770      	bx	lr

08005064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005064:	2000      	movs	r0, #0
 8005066:	4770      	bx	lr

08005068 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8005068:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800506a:	4c07      	ldr	r4, [pc, #28]	@ (8005088 <GetData+0x20>)
 800506c:	6825      	ldr	r5, [r4, #0]
 800506e:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 8005070:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8005072:	1846      	adds	r6, r0, r1
 8005074:	42b5      	cmp	r5, r6
 8005076:	d901      	bls.n	800507c <GetData+0x14>
 8005078:	4298      	cmp	r0, r3
 800507a:	d100      	bne.n	800507e <GetData+0x16>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }
  return ReadDataNbr;
}
 800507c:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800507e:	f814 6b01 	ldrb.w	r6, [r4], #1
 8005082:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 8005084:	3001      	adds	r0, #1
 8005086:	e7f4      	b.n	8005072 <GetData+0xa>
 8005088:	20000720 	.word	0x20000720

0800508c <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 800508c:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8005090:	4a06      	ldr	r2, [pc, #24]	@ (80050ac <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 8005092:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8005096:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 800509a:	3020      	adds	r0, #32
    while (op_size > 0) {
 800509c:	4298      	cmp	r0, r3
 800509e:	d1fa      	bne.n	8005096 <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 80050a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80050a4:	f3bf 8f6f 	isb	sy
}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <AUDIO_Start>:
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80050b2:	4d11      	ldr	r5, [pc, #68]	@ (80050f8 <AUDIO_Start+0x48>)
 80050b4:	2400      	movs	r4, #0
  bytesread = GetData( (void *)AudioStartAddress,
 80050b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  AudioFileSize = audio_file_size;
 80050ba:	462a      	mov	r2, r5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80050bc:	f885 4824 	strb.w	r4, [r5, #2084]	@ 0x824
  AudioStartAddress = audio_start_address;
 80050c0:	f8c5 0828 	str.w	r0, [r5, #2088]	@ 0x828
  AudioFileSize = audio_file_size;
 80050c4:	f842 1b20 	str.w	r1, [r2], #32
  bytesread = GetData( (void *)AudioStartAddress,
 80050c8:	4621      	mov	r1, r4
 80050ca:	f7ff ffcd 	bl	8005068 <GetData>
  if(bytesread > 0)
 80050ce:	4606      	mov	r6, r0
 80050d0:	b178      	cbz	r0, 80050f2 <AUDIO_Start+0x42>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80050d2:	4610      	mov	r0, r2
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80050d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80050d8:	f7ff ffd8 	bl	800508c <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80050dc:	f105 0020 	add.w	r0, r5, #32
 80050e0:	f7fc f8d6 	bl	8001290 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 80050e4:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 80050e6:	4620      	mov	r0, r4
    buffer_ctl.fptr = bytesread;
 80050e8:	f8c5 6820 	str.w	r6, [r5, #2080]	@ 0x820
    audio_state = AUDIO_STATE_PLAYING;      
 80050ec:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
}
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_ERROR_IO;
 80050f2:	2002      	movs	r0, #2
 80050f4:	e7fc      	b.n	80050f0 <AUDIO_Start+0x40>
 80050f6:	bf00      	nop
 80050f8:	20000720 	.word	0x20000720

080050fc <AUDIO_Process>:
{
 80050fc:	b538      	push	{r3, r4, r5, lr}
  switch(audio_state)
 80050fe:	4c22      	ldr	r4, [pc, #136]	@ (8005188 <AUDIO_Process+0x8c>)
 8005100:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8005104:	2b02      	cmp	r3, #2
 8005106:	d13c      	bne.n	8005182 <AUDIO_Process+0x86>
    if(buffer_ctl.fptr >= AudioFileSize)
 8005108:	f8d4 2820 	ldr.w	r2, [r4, #2080]	@ 0x820
 800510c:	2500      	movs	r5, #0
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	429a      	cmp	r2, r3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8005112:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
      buffer_ctl.fptr = 0; 
 8005116:	bf24      	itt	cs
 8005118:	f8c4 5820 	strcs.w	r5, [r4, #2080]	@ 0x820
      error_state = AUDIO_ERROR_EOF;
 800511c:	2503      	movcs	r5, #3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 800511e:	2b01      	cmp	r3, #1
 8005120:	d114      	bne.n	800514c <AUDIO_Process+0x50>
      bytesread = GetData((void *)AudioStartAddress,
 8005122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005126:	4a19      	ldr	r2, [pc, #100]	@ (800518c <AUDIO_Process+0x90>)
 8005128:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 800512c:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8005130:	f7ff ff9a 	bl	8005068 <GetData>
      if( bytesread >0)
 8005134:	b150      	cbz	r0, 800514c <AUDIO_Process+0x50>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread; 
 800513c:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8005140:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005142:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread; 
 8005144:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005148:	f7ff ffa0 	bl	800508c <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 800514c:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
 8005150:	2b02      	cmp	r3, #2
 8005152:	d114      	bne.n	800517e <AUDIO_Process+0x82>
      bytesread = GetData((void *)AudioStartAddress,
 8005154:	4a0e      	ldr	r2, [pc, #56]	@ (8005190 <AUDIO_Process+0x94>)
 8005156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800515a:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 800515e:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8005162:	f7ff ff81 	bl	8005068 <GetData>
      if( bytesread > 0)
 8005166:	b150      	cbz	r0, 800517e <AUDIO_Process+0x82>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005168:	2300      	movs	r3, #0
 800516a:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread;
 800516e:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8005172:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8005174:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread;
 8005176:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 800517a:	f7ff ff87 	bl	800508c <SCB_CleanDCache_by_Addr.constprop.0>
}
 800517e:	4628      	mov	r0, r5
 8005180:	bd38      	pop	{r3, r4, r5, pc}
    error_state = AUDIO_ERROR_NOTREADY;
 8005182:	2501      	movs	r5, #1
 8005184:	e7fb      	b.n	800517e <AUDIO_Process+0x82>
 8005186:	bf00      	nop
 8005188:	20000720 	.word	0x20000720
 800518c:	20000740 	.word	0x20000740
 8005190:	20000b40 	.word	0x20000b40

08005194 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8005194:	4b03      	ldr	r3, [pc, #12]	@ (80051a4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8005196:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 800519a:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 800519c:	bf08      	it	eq
 800519e:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 80051a2:	4770      	bx	lr
 80051a4:	20000720 	.word	0x20000720

080051a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 80051a8:	4b04      	ldr	r3, [pc, #16]	@ (80051bc <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 80051aa:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 80051ae:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 80051b0:	bf04      	itt	eq
 80051b2:	2201      	moveq	r2, #1
 80051b4:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000720 	.word	0x20000720

080051c0 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80051c0:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80051c2:	4806      	ldr	r0, [pc, #24]	@ (80051dc <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 80051c4:	f7fc fbbe 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 80051c8:	200e      	movs	r0, #14
 80051ca:	4905      	ldr	r1, [pc, #20]	@ (80051e0 <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 80051cc:	f7fc fd42 	bl	8001c54 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80051d0:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80051d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80051d6:	f7fb bf7f 	b.w	80010d8 <BSP_PB_GetState>
 80051da:	bf00      	nop
 80051dc:	ffff0000 	.word	0xffff0000
 80051e0:	0800d10c 	.word	0x0800d10c

080051e4 <AudioRec_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioRec_demo (void)
{
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @retval None
  */
static void AudioRec_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ea:	f7fc fbcf 	bl	800198c <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80051ee:	4877      	ldr	r0, [pc, #476]	@ (80053cc <AudioRec_demo+0x1e8>)
 80051f0:	f7fc fb9c 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 80051f4:	f7fc fb40 	bl	8001878 <BSP_LCD_GetXSize>
 80051f8:	2100      	movs	r1, #0
 80051fa:	b282      	uxth	r2, r0
 80051fc:	235a      	movs	r3, #90	@ 0x5a
 80051fe:	4608      	mov	r0, r1
 8005200:	f7fc fda4 	bl	8001d4c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	f7fc fb90 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800520c:	486f      	ldr	r0, [pc, #444]	@ (80053cc <AudioRec_demo+0x1e8>)
 800520e:	f7fc fb99 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8005212:	486f      	ldr	r0, [pc, #444]	@ (80053d0 <AudioRec_demo+0x1ec>)
 8005214:	f7fc fba2 	bl	800195c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD EXAMPLE", CENTER_MODE);
 8005218:	2100      	movs	r1, #0
 800521a:	2301      	movs	r3, #1
 800521c:	4a6d      	ldr	r2, [pc, #436]	@ (80053d4 <AudioRec_demo+0x1f0>)
 800521e:	4608      	mov	r0, r1
 8005220:	f7fc fcc4 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8005224:	486c      	ldr	r0, [pc, #432]	@ (80053d8 <AudioRec_demo+0x1f4>)
 8005226:	f7fc fb99 	bl	800195c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 800522a:	2301      	movs	r3, #1
 800522c:	4a6b      	ldr	r2, [pc, #428]	@ (80053dc <AudioRec_demo+0x1f8>)
 800522e:	211e      	movs	r1, #30
 8005230:	2000      	movs	r0, #0
 8005232:	f7fc fcbb 	bl	8001bac <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005236:	4865      	ldr	r0, [pc, #404]	@ (80053cc <AudioRec_demo+0x1e8>)
 8005238:	f7fc fb78 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 800523c:	f7fc fb1c 	bl	8001878 <BSP_LCD_GetXSize>
 8005240:	4604      	mov	r4, r0
 8005242:	f7fc fb25 	bl	8001890 <BSP_LCD_GetYSize>
 8005246:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 800524a:	f1a4 0214 	sub.w	r2, r4, #20
 800524e:	2164      	movs	r1, #100	@ 0x64
 8005250:	b29b      	uxth	r3, r3
 8005252:	200a      	movs	r0, #10
 8005254:	b292      	uxth	r2, r2
 8005256:	f7fc fc13 	bl	8001a80 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 800525a:	f7fc fb0d 	bl	8001878 <BSP_LCD_GetXSize>
 800525e:	4604      	mov	r4, r0
 8005260:	f7fc fb16 	bl	8001890 <BSP_LCD_GetYSize>
 8005264:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 8005268:	f1a4 0216 	sub.w	r2, r4, #22
 800526c:	2165      	movs	r1, #101	@ 0x65
 800526e:	b29b      	uxth	r3, r3
 8005270:	200b      	movs	r0, #11
 8005272:	b292      	uxth	r2, r2
 8005274:	f7fc fc04 	bl	8001a80 <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8005278:	2202      	movs	r2, #2
 800527a:	2110      	movs	r1, #16
 800527c:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8005280:	f7fc fab6 	bl	80017f0 <BSP_AUDIO_IN_Init>
 8005284:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005286:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 800528a:	2c00      	cmp	r4, #0
 800528c:	d17a      	bne.n	8005384 <AudioRec_demo+0x1a0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800528e:	f7fc fb59 	bl	8001944 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8005292:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8005296:	f7fc fb49 	bl	800192c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 800529a:	f7fc faf9 	bl	8001890 <BSP_LCD_GetYSize>
 800529e:	2301      	movs	r3, #1
 80052a0:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 80052a4:	4a4e      	ldr	r2, [pc, #312]	@ (80053e0 <AudioRec_demo+0x1fc>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80052a6:	b289      	uxth	r1, r1
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80052a8:	2400      	movs	r4, #0
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80052aa:	2000      	movs	r0, #0
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80052ac:	4d4d      	ldr	r5, [pc, #308]	@ (80053e4 <AudioRec_demo+0x200>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80052ae:	f7fc fc7d 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80052b6:	602c      	str	r4, [r5, #0]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80052b8:	f7fc fb44 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80052bc:	4843      	ldr	r0, [pc, #268]	@ (80053cc <AudioRec_demo+0x1e8>)
 80052be:	f7fc fb35 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80052c2:	f7fc fae5 	bl	8001890 <BSP_LCD_GetYSize>
 80052c6:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80052ca:	2301      	movs	r3, #1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4a46      	ldr	r2, [pc, #280]	@ (80053e8 <AudioRec_demo+0x204>)
 80052d0:	b289      	uxth	r1, r1
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80052d2:	4c46      	ldr	r4, [pc, #280]	@ (80053ec <AudioRec_demo+0x208>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80052d4:	f7fc fc6a 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80052d8:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80052dc:	4844      	ldr	r0, [pc, #272]	@ (80053f0 <AudioRec_demo+0x20c>)
 80052de:	f7fc f96d 	bl	80015bc <BSP_AUDIO_IN_Record>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d163      	bne.n	80053b0 <AudioRec_demo+0x1cc>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80052e8:	f5a4 407f 	sub.w	r0, r4, #65280	@ 0xff00
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80052ec:	2300      	movs	r3, #0
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80052ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80052f2:	493f      	ldr	r1, [pc, #252]	@ (80053f0 <AudioRec_demo+0x20c>)
 80052f4:	38fe      	subs	r0, #254	@ 0xfe
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80052f6:	602b      	str	r3, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80052f8:	f000 fe79 	bl	8005fee <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80052fc:	682f      	ldr	r7, [r5, #0]
 80052fe:	2f02      	cmp	r7, #2
 8005300:	d15f      	bne.n	80053c2 <AudioRec_demo+0x1de>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8005302:	4620      	mov	r0, r4
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005304:	2600      	movs	r6, #0
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8005306:	f504 34ff 	add.w	r4, r4, #130560	@ 0x1fe00
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 800530a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800530e:	4939      	ldr	r1, [pc, #228]	@ (80053f4 <AudioRec_demo+0x210>)
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8005310:	f504 74fe 	add.w	r4, r4, #508	@ 0x1fc
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005314:	602e      	str	r6, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8005316:	f000 fe6a 	bl	8005fee <memcpy>
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800531a:	4b37      	ldr	r3, [pc, #220]	@ (80053f8 <AudioRec_demo+0x214>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d1e0      	bne.n	80052e2 <AudioRec_demo+0xfe>
  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8005320:	4638      	mov	r0, r7
 8005322:	f7fc f955 	bl	80015d0 <BSP_AUDIO_IN_Stop>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005326:	f04f 30ff 	mov.w	r0, #4294967295
 800532a:	f7fc fb0b 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800532e:	4827      	ldr	r0, [pc, #156]	@ (80053cc <AudioRec_demo+0x1e8>)
 8005330:	f7fc fafc 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 8005334:	f7fc faac 	bl	8001890 <BSP_LCD_GetYSize>
 8005338:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 800533c:	2301      	movs	r3, #1
 800533e:	4a2f      	ldr	r2, [pc, #188]	@ (80053fc <AudioRec_demo+0x218>)
 8005340:	b289      	uxth	r1, r1
 8005342:	4630      	mov	r0, r6
 8005344:	f7fc fc32 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 8005348:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800534c:	2146      	movs	r1, #70	@ 0x46
 800534e:	4638      	mov	r0, r7
 8005350:	f7fc f8ca 	bl	80014e8 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8005354:	2005      	movs	r0, #5
 8005356:	f7fb ffd1 	bl	80012fc <BSP_AUDIO_OUT_SetAudioFrameSlot>
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 800535a:	4929      	ldr	r1, [pc, #164]	@ (8005400 <AudioRec_demo+0x21c>)
 800535c:	4829      	ldr	r0, [pc, #164]	@ (8005404 <AudioRec_demo+0x220>)
 800535e:	f7ff fea7 	bl	80050b0 <AUDIO_Start>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t *)"PLAYBACK DONE", CENTER_MODE);
 8005362:	f7fc fa95 	bl	8001890 <BSP_LCD_GetYSize>
 8005366:	f1a0 0128 	sub.w	r1, r0, #40	@ 0x28
 800536a:	2301      	movs	r3, #1
 800536c:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <AudioRec_demo+0x224>)
 800536e:	b289      	uxth	r1, r1
 8005370:	4630      	mov	r0, r6
 8005372:	f7fc fc1b 	bl	8001bac <BSP_LCD_DisplayStringAt>
    AUDIO_Process();
 8005376:	f7ff fec1 	bl	80050fc <AUDIO_Process>
    if (CheckForUserInput() > 0)
 800537a:	f000 fad7 	bl	800592c <CheckForUserInput>
 800537e:	2800      	cmp	r0, #0
 8005380:	d0f9      	beq.n	8005376 <AudioRec_demo+0x192>
 8005382:	e019      	b.n	80053b8 <AudioRec_demo+0x1d4>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005384:	f7fc fade 	bl	8001944 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005388:	4820      	ldr	r0, [pc, #128]	@ (800540c <AudioRec_demo+0x228>)
 800538a:	f7fc facf 	bl	800192c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 800538e:	f7fc fa7f 	bl	8001890 <BSP_LCD_GetYSize>
 8005392:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 8005396:	2301      	movs	r3, #1
 8005398:	4a1d      	ldr	r2, [pc, #116]	@ (8005410 <AudioRec_demo+0x22c>)
 800539a:	b289      	uxth	r1, r1
 800539c:	2000      	movs	r0, #0
 800539e:	f7fc fc05 	bl	8001bac <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80053a2:	f7fc fa75 	bl	8001890 <BSP_LCD_GetYSize>
 80053a6:	2301      	movs	r3, #1
 80053a8:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80053ac:	4a19      	ldr	r2, [pc, #100]	@ (8005414 <AudioRec_demo+0x230>)
 80053ae:	e77a      	b.n	80052a6 <AudioRec_demo+0xc2>
      if (CheckForUserInput() > 0)
 80053b0:	f000 fabc 	bl	800592c <CheckForUserInput>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d094      	beq.n	80052e2 <AudioRec_demo+0xfe>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80053b8:	2002      	movs	r0, #2
}
 80053ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80053be:	f7fb bf85 	b.w	80012cc <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 80053c2:	f000 fab3 	bl	800592c <CheckForUserInput>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d098      	beq.n	80052fc <AudioRec_demo+0x118>
 80053ca:	e7f5      	b.n	80053b8 <AudioRec_demo+0x1d4>
 80053cc:	ff0000ff 	.word	0xff0000ff
 80053d0:	2000004c 	.word	0x2000004c
 80053d4:	0800d123 	.word	0x0800d123
 80053d8:	2000005c 	.word	0x2000005c
 80053dc:	0800cfa4 	.word	0x0800cfa4
 80053e0:	0800d138 	.word	0x0800d138
 80053e4:	20000f54 	.word	0x20000f54
 80053e8:	0800d16a 	.word	0x0800d16a
 80053ec:	c01257fe 	.word	0xc01257fe
 80053f0:	20000f58 	.word	0x20000f58
 80053f4:	20010f56 	.word	0x20010f56
 80053f8:	c01a57ee 	.word	0xc01a57ee
 80053fc:	0800d183 	.word	0x0800d183
 8005400:	0007fff0 	.word	0x0007fff0
 8005404:	c0115800 	.word	0xc0115800
 8005408:	0800d1a5 	.word	0x0800d1a5
 800540c:	ffff0000 	.word	0xffff0000
 8005410:	0800d151 	.word	0x0800d151
 8005414:	0800d072 	.word	0x0800d072

08005418 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8005418:	4b01      	ldr	r3, [pc, #4]	@ (8005420 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 800541a:	2202      	movs	r2, #2
 800541c:	601a      	str	r2, [r3, #0]
  return;
}
 800541e:	4770      	bx	lr
 8005420:	20000f54 	.word	0x20000f54

08005424 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8005424:	4b01      	ldr	r3, [pc, #4]	@ (800542c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
  return;
}
 800542a:	4770      	bx	lr
 800542c:	20000f54 	.word	0x20000f54

08005430 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8005430:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8005432:	480a      	ldr	r0, [pc, #40]	@ (800545c <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 8005434:	f7fc fa86 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8005438:	f7fc fa9c 	bl	8001974 <BSP_LCD_GetFont>
 800543c:	88c1      	ldrh	r1, [r0, #6]
 800543e:	2301      	movs	r3, #1
 8005440:	2000      	movs	r0, #0
 8005442:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005446:	4a06      	ldr	r2, [pc, #24]	@ (8005460 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8005448:	0049      	lsls	r1, r1, #1
 800544a:	b289      	uxth	r1, r1
 800544c:	f7fc fbae 	bl	8001bac <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005450:	2002      	movs	r0, #2
  {
    return;
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8005452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005456:	f7fb be3f 	b.w	80010d8 <BSP_PB_GetState>
 800545a:	bf00      	nop
 800545c:	ffff0000 	.word	0xffff0000
 8005460:	0800d10c 	.word	0x0800d10c

08005464 <BSP_LCD_DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_LCD_DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d_camera);
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <BSP_LCD_DMA2D_IRQHandler+0x8>)
 8005466:	f7fd bd67 	b.w	8002f38 <HAL_DMA2D_IRQHandler>
 800546a:	bf00      	nop
 800546c:	20020f5c 	.word	0x20020f5c

08005470 <HAL_DMA2D_MspInit>:
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005470:	4b0a      	ldr	r3, [pc, #40]	@ (800549c <HAL_DMA2D_MspInit+0x2c>)
{
 8005472:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*##-2- NVIC configuration  ################################################*/
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005476:	205a      	movs	r0, #90	@ 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005478:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800547e:	2200      	movs	r2, #0
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8005482:	4611      	mov	r1, r2
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800548c:	f7fd f9b6 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005490:	205a      	movs	r0, #90	@ 0x5a
}
 8005492:	b003      	add	sp, #12
 8005494:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005498:	f7fd b9e2 	b.w	8002860 <HAL_NVIC_EnableIRQ>
 800549c:	40023800 	.word	0x40023800

080054a0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a2:	b0ab      	sub	sp, #172	@ 0xac
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80054a4:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_Disable();
 80054a8:	f7fd f9fc 	bl	80028a4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054ac:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80054ae:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054b0:	a81d      	add	r0, sp, #116	@ 0x74
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054b2:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80054b6:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80054ba:	9520      	str	r5, [sp, #128]	@ 0x80

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80054bc:	f04f 4640 	mov.w	r6, #3221225472	@ 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80054c0:	f04f 4710 	mov.w	r7, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80054c4:	e9cd 431e 	strd	r4, r3, [sp, #120]	@ 0x78
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054c8:	f7fd fa0a 	bl	80028e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80054cc:	4b99      	ldr	r3, [pc, #612]	@ (8005734 <main+0x294>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054ce:	f8ad 5074 	strh.w	r5, [sp, #116]	@ 0x74
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80054d2:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054d6:	a81d      	add	r0, sp, #116	@ 0x74
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80054d8:	9520      	str	r5, [sp, #128]	@ 0x80
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80054da:	e9cd 631e 	strd	r6, r3, [sp, #120]	@ 0x78
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054de:	f7fd f9ff 	bl	80028e0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054e2:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054e6:	a81d      	add	r0, sp, #116	@ 0x74
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80054e8:	9520      	str	r5, [sp, #128]	@ 0x80
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054ea:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80054ee:	4b92      	ldr	r3, [pc, #584]	@ (8005738 <main+0x298>)
 80054f0:	e9cd 731e 	strd	r7, r3, [sp, #120]	@ 0x78
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80054f4:	f7fd f9f4 	bl	80028e0 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80054f8:	f240 3301 	movw	r3, #769	@ 0x301
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80054fc:	f04f 4c20 	mov.w	ip, #2684354560	@ 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005500:	a81d      	add	r0, sp, #116	@ 0x74
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005502:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8005506:	4b8d      	ldr	r3, [pc, #564]	@ (800573c <main+0x29c>)
 8005508:	e9cd c31e 	strd	ip, r3, [sp, #120]	@ 0x78
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800550c:	4b8c      	ldr	r3, [pc, #560]	@ (8005740 <main+0x2a0>)
 800550e:	9320      	str	r3, [sp, #128]	@ 0x80
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005510:	f7fd f9e6 	bl	80028e0 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005514:	2004      	movs	r0, #4
 8005516:	f7fd f9d3 	bl	80028c0 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 800551a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800551e:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005522:	4a88      	ldr	r2, [pc, #544]	@ (8005744 <main+0x2a4>)
 8005524:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800552c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005530:	6953      	ldr	r3, [r2, #20]
 8005532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005536:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800553c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005540:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005544:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005548:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800554c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005550:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005554:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8005558:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800555a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800555e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005560:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8005564:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005566:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 800556a:	d2f9      	bcs.n	8005560 <main+0xc0>
    } while(sets-- != 0U);
 800556c:	3b20      	subs	r3, #32
 800556e:	f113 0f20 	cmn.w	r3, #32
 8005572:	d1f2      	bne.n	800555a <main+0xba>
 8005574:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005578:	6953      	ldr	r3, [r2, #20]
 800557a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557e:	6153      	str	r3, [r2, #20]
 8005580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005584:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005588:	f7fc feb8 	bl	80022fc <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	4b6e      	ldr	r3, [pc, #440]	@ (8005748 <main+0x2a8>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800558e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005590:	2519      	movs	r5, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8005592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005594:	a81d      	add	r0, sp, #116	@ 0x74
  __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	9b05      	ldr	r3, [sp, #20]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055a6:	4b69      	ldr	r3, [pc, #420]	@ (800574c <main+0x2ac>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80055ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80055ba:	9306      	str	r3, [sp, #24]
 80055bc:	9b06      	ldr	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055c2:	e9cd 431d 	strd	r4, r3, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055c6:	2302      	movs	r3, #2
 80055c8:	4c61      	ldr	r4, [pc, #388]	@ (8005750 <main+0x2b0>)
 80055ca:	e9cd 3223 	strd	r3, r2, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055ce:	9327      	str	r3, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80055d0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80055d4:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 80055d6:	e9cd 5225 	strd	r5, r2, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80055da:	9328      	str	r3, [sp, #160]	@ 0xa0
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80055dc:	f7fe fb3a 	bl	8003c54 <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 80055e0:	b110      	cbz	r0, 80055e8 <main+0x148>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	6023      	str	r3, [r4, #0]
  ret = HAL_PWREx_ActivateOverDrive();
 80055e8:	f7fe fafc 	bl	8003be4 <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 80055ec:	b110      	cbz	r0, 80055f4 <main+0x154>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	6023      	str	r3, [r4, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055f4:	210f      	movs	r1, #15
 80055f6:	2302      	movs	r3, #2
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055f8:	2000      	movs	r0, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055fa:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80055fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005602:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005604:	e9cd 0312 	strd	r0, r3, [sp, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800560c:	a810      	add	r0, sp, #64	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800560e:	9314      	str	r3, [sp, #80]	@ 0x50
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005610:	f7fe fd08 	bl	8004024 <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 8005614:	b110      	cbz	r0, 800561c <main+0x17c>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	6023      	str	r3, [r4, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800561c:	4b4a      	ldr	r3, [pc, #296]	@ (8005748 <main+0x2a8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561e:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 8005620:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005622:	a90b      	add	r1, sp, #44	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005626:	484b      	ldr	r0, [pc, #300]	@ (8005754 <main+0x2b4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	631a      	str	r2, [r3, #48]	@ 0x30
 800562e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005630:	f002 0201 	and.w	r2, r2, #1
 8005634:	9201      	str	r2, [sp, #4]
 8005636:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800563a:	f042 0220 	orr.w	r2, r2, #32
 800563e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005642:	f002 0220 	and.w	r2, r2, #32
 8005646:	9202      	str	r2, [sp, #8]
 8005648:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800564a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800564c:	f042 0202 	orr.w	r2, r2, #2
 8005650:	631a      	str	r2, [r3, #48]	@ 0x30
 8005652:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005654:	f002 0202 	and.w	r2, r2, #2
 8005658:	9203      	str	r2, [sp, #12]
 800565a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_ADC3_CLK_ENABLE();   // Enable ADC3 clock (assuming using ADC3)
 800565c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800565e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005662:	645a      	str	r2, [r3, #68]	@ 0x44
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005666:	950f      	str	r5, [sp, #60]	@ 0x3c
  __HAL_RCC_ADC3_CLK_ENABLE();   // Enable ADC3 clock (assuming using ADC3)
 8005668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 8005670:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;   // Use IT_RISING, IT_FALLING, or IT_RISING_FALLING
 8005678:	e9cd 630b 	strd	r6, r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567c:	f7fd fd2c 	bl	80030d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15; // Change pin to PF10
 8005680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005684:	a90b      	add	r1, sp, #44	@ 0x2c
 8005686:	4834      	ldr	r0, [pc, #208]	@ (8005758 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15; // Change pin to PF10
 8005688:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	f7fd fd25 	bl	80030d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9; // Change pin to PF9
 800568e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005692:	a90b      	add	r1, sp, #44	@ 0x2c
 8005694:	4830      	ldr	r0, [pc, #192]	@ (8005758 <main+0x2b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_9; // Change pin to PF9
 8005696:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005698:	f7fd fd1e 	bl	80030d8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800569c:	462a      	mov	r2, r5
 800569e:	4629      	mov	r1, r5
 80056a0:	2006      	movs	r0, #6
 80056a2:	f7fd f8ab 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80056a6:	2006      	movs	r0, #6
 80056a8:	f7fd f8da 	bl	8002860 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);  // PF10 is on EXTI Line 10
 80056ac:	462a      	mov	r2, r5
 80056ae:	4629      	mov	r1, r5
 80056b0:	2028      	movs	r0, #40	@ 0x28
 80056b2:	f7fd f8a3 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80056b6:	2028      	movs	r0, #40	@ 0x28
 80056b8:	f7fd f8d2 	bl	8002860 <HAL_NVIC_EnableIRQ>
  BSP_LED_Init(LED1);
 80056bc:	4628      	mov	r0, r5
 80056be:	f7fb fc8d 	bl	8000fdc <BSP_LED_Init>
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 80056c2:	60e5      	str	r5, [r4, #12]
  AdcHandle.Init.ScanConvMode          = DISABLE;                       /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 80056c4:	6165      	str	r5, [r4, #20]
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80056c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 80056ca:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  AdcHandle.Init.NbrOfDiscConversion   = 0;
 80056ce:	62a5      	str	r5, [r4, #40]	@ 0x28
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80056d0:	6125      	str	r5, [r4, #16]
  AdcHandle.Init.EOCSelection          = DISABLE;
 80056d2:	61a5      	str	r5, [r4, #24]
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80056d4:	4a21      	ldr	r2, [pc, #132]	@ (800575c <main+0x2bc>)
  AdcHandle.Init.ContinuousConvMode    = ENABLE;                       /* Continuous mode enabled to have continuous conversion  */
 80056d6:	61e6      	str	r6, [r4, #28]
  AdcHandle.Init.NbrOfConversion       = 1;
 80056d8:	6226      	str	r6, [r4, #32]
  AdcHandle.Init.DMAContinuousRequests = ENABLE;
 80056da:	f884 6034 	strb.w	r6, [r4, #52]	@ 0x34
  AdcHandle.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T1_CC1;
 80056de:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 80056e2:	4d1f      	ldr	r5, [pc, #124]	@ (8005760 <main+0x2c0>)
 80056e4:	4628      	mov	r0, r5
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80056e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 80056ea:	f7fc fe41 	bl	8002370 <HAL_ADC_Init>
 80056ee:	b120      	cbz	r0, 80056fa <main+0x25a>
    printf("Error ADC");
 80056f0:	4c1c      	ldr	r4, [pc, #112]	@ (8005764 <main+0x2c4>)
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb8a 	bl	8005e0c <iprintf>
  while (1)
 80056f8:	e7fb      	b.n	80056f2 <main+0x252>
	sConfig.Channel      = ADC_CHANNEL_8;
 80056fa:	2308      	movs	r3, #8
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 80056fc:	a907      	add	r1, sp, #28
	sConfig.Offset       = 0;
 80056fe:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8005702:	4628      	mov	r0, r5
	sConfig.Rank         = 1;
 8005704:	e9cd 3607 	strd	r3, r6, [sp, #28]
    if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8005708:	f7fc ffb8 	bl	800267c <HAL_ADC_ConfigChannel>
 800570c:	b120      	cbz	r0, 8005718 <main+0x278>
    printf("Error ADC");
 800570e:	4c15      	ldr	r4, [pc, #84]	@ (8005764 <main+0x2c4>)
 8005710:	4620      	mov	r0, r4
 8005712:	f000 fb7b 	bl	8005e0c <iprintf>
  while (1)
 8005716:	e7fb      	b.n	8005710 <main+0x270>
    if(HAL_ADC_Start_DMA(&AdcHandle, (uint32_t*)&uhADCxConvertedValue, 1) != HAL_OK)
 8005718:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 800571c:	4632      	mov	r2, r6
 800571e:	4628      	mov	r0, r5
 8005720:	f7fc fecc 	bl	80024bc <HAL_ADC_Start_DMA>
 8005724:	4601      	mov	r1, r0
 8005726:	b1f8      	cbz	r0, 8005768 <main+0x2c8>
    printf("Error ADC");
 8005728:	4c0e      	ldr	r4, [pc, #56]	@ (8005764 <main+0x2c4>)
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fb6e 	bl	8005e0c <iprintf>
  while (1)
 8005730:	e7fb      	b.n	800572a <main+0x28a>
 8005732:	bf00      	nop
 8005734:	03000018 	.word	0x03000018
 8005738:	03000019 	.word	0x03000019
 800573c:	0300000c 	.word	0x0300000c
 8005740:	01000101 	.word	0x01000101
 8005744:	e000ed00 	.word	0xe000ed00
 8005748:	40023800 	.word	0x40023800
 800574c:	40007000 	.word	0x40007000
 8005750:	20020fb8 	.word	0x20020fb8
 8005754:	40020000 	.word	0x40020000
 8005758:	40020400 	.word	0x40020400
 800575c:	40012200 	.word	0x40012200
 8005760:	20020fbc 	.word	0x20020fbc
 8005764:	0800d1b3 	.word	0x0800d1b3
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8005768:	2002      	movs	r0, #2
 800576a:	f7fb fc63 	bl	8001034 <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 800576e:	f7fc fbdf 	bl	8001f30 <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 8005772:	b110      	cbz	r0, 800577a <main+0x2da>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	6023      	str	r3, [r4, #0]
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 800577a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800577e:	2001      	movs	r0, #1
 8005780:	f7fc f892 	bl	80018a8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8005784:	2001      	movs	r0, #1
 8005786:	f7fc f8cb 	bl	8001920 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800578a:	485b      	ldr	r0, [pc, #364]	@ (80058f8 <main+0x458>)
 800578c:	f7fc f8e6 	bl	800195c <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	f7fc f8d6 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005798:	f04f 30ff 	mov.w	r0, #4294967295
 800579c:	f7fc f8f6 	bl	800198c <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80057a0:	4856      	ldr	r0, [pc, #344]	@ (80058fc <main+0x45c>)
 80057a2:	f7fc f8c3 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 80057a6:	2301      	movs	r3, #1
 80057a8:	4a55      	ldr	r2, [pc, #340]	@ (8005900 <main+0x460>)
 80057aa:	210a      	movs	r1, #10
 80057ac:	2000      	movs	r0, #0
    sprintf((char *)desc, "Record and play with effect %d", EffectIndex);
 80057ae:	4e55      	ldr	r6, [pc, #340]	@ (8005904 <main+0x464>)
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 80057b0:	f7fc f9fc 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 80057b4:	2301      	movs	r3, #1
 80057b6:	4a54      	ldr	r2, [pc, #336]	@ (8005908 <main+0x468>)
 80057b8:	2123      	movs	r1, #35	@ 0x23
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fc f9f6 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 80057c0:	f7fc f85a 	bl	8001878 <BSP_LCD_GetXSize>
 80057c4:	3850      	subs	r0, #80	@ 0x50
 80057c6:	4a51      	ldr	r2, [pc, #324]	@ (800590c <main+0x46c>)
 80057c8:	2141      	movs	r1, #65	@ 0x41
 80057ca:	0840      	lsrs	r0, r0, #1
 80057cc:	f7fc fa52 	bl	8001c74 <BSP_LCD_DrawBitmap>
  BSP_LCD_SetFont(&Font12);
 80057d0:	484f      	ldr	r0, [pc, #316]	@ (8005910 <main+0x470>)
 80057d2:	f7fc f8c3 	bl	800195c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);
 80057d6:	f7fc f85b 	bl	8001890 <BSP_LCD_GetYSize>
 80057da:	f1a0 0114 	sub.w	r1, r0, #20
 80057de:	2301      	movs	r3, #1
 80057e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005914 <main+0x474>)
 80057e2:	b289      	uxth	r1, r1
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fc f9e1 	bl	8001bac <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 80057ea:	484b      	ldr	r0, [pc, #300]	@ (8005918 <main+0x478>)
 80057ec:	f7fc f8b6 	bl	800195c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80057f0:	484a      	ldr	r0, [pc, #296]	@ (800591c <main+0x47c>)
 80057f2:	f7fc f89b 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 80057f6:	f7fc f84b 	bl	8001890 <BSP_LCD_GetYSize>
 80057fa:	4605      	mov	r5, r0
 80057fc:	f7fc f83c 	bl	8001878 <BSP_LCD_GetXSize>
 8005800:	233c      	movs	r3, #60	@ 0x3c
 8005802:	0869      	lsrs	r1, r5, #1
      BSP_examples[DemoIndex++].DemoFunc();
 8005804:	4d46      	ldr	r5, [pc, #280]	@ (8005920 <main+0x480>)
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8005806:	b282      	uxth	r2, r0
 8005808:	2000      	movs	r0, #0
 800580a:	310f      	adds	r1, #15
 800580c:	b289      	uxth	r1, r1
 800580e:	f7fc fa9d 	bl	8001d4c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	f7fc f889 	bl	800192c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800581a:	4840      	ldr	r0, [pc, #256]	@ (800591c <main+0x47c>)
 800581c:	f7fc f892 	bl	8001944 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
 8005820:	f7fc f836 	bl	8001890 <BSP_LCD_GetYSize>
 8005824:	2301      	movs	r3, #1
 8005826:	0841      	lsrs	r1, r0, #1
 8005828:	4a3e      	ldr	r2, [pc, #248]	@ (8005924 <main+0x484>)
 800582a:	2000      	movs	r0, #0
 800582c:	311e      	adds	r1, #30
 800582e:	b289      	uxth	r1, r1
 8005830:	f7fc f9bc 	bl	8001bac <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc, "Record and play with effect %d", EffectIndex);
 8005834:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005836:	4933      	ldr	r1, [pc, #204]	@ (8005904 <main+0x464>)
 8005838:	a810      	add	r0, sp, #64	@ 0x40
 800583a:	f000 faf9 	bl	8005e30 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 800583e:	f7fc f827 	bl	8001890 <BSP_LCD_GetYSize>
 8005842:	2301      	movs	r3, #1
 8005844:	0841      	lsrs	r1, r0, #1
 8005846:	aa10      	add	r2, sp, #64	@ 0x40
 8005848:	2000      	movs	r0, #0
 800584a:	312d      	adds	r1, #45	@ 0x2d
 800584c:	b289      	uxth	r1, r1
 800584e:	f7fc f9ad 	bl	8001bac <BSP_LCD_DisplayStringAt>
  sprintf((char *)adcText1, "ADC1 : %d", uhADCxConvertedValue);
 8005852:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 8005856:	4934      	ldr	r1, [pc, #208]	@ (8005928 <main+0x488>)
 8005858:	a81d      	add	r0, sp, #116	@ 0x74
 800585a:	b292      	uxth	r2, r2
 800585c:	f000 fae8 	bl	8005e30 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 60, (uint8_t *)adcText1, CENTER_MODE);
 8005860:	f7fc f816 	bl	8001890 <BSP_LCD_GetYSize>
 8005864:	2301      	movs	r3, #1
 8005866:	0841      	lsrs	r1, r0, #1
 8005868:	aa1d      	add	r2, sp, #116	@ 0x74
 800586a:	2000      	movs	r0, #0
 800586c:	313c      	adds	r1, #60	@ 0x3c
 800586e:	b289      	uxth	r1, r1
 8005870:	f7fc f99c 	bl	8001bac <BSP_LCD_DisplayStringAt>
    if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005874:	2002      	movs	r0, #2
 8005876:	f7fb fc2f 	bl	80010d8 <BSP_PB_GetState>
 800587a:	b1d8      	cbz	r0, 80058b4 <main+0x414>
      HAL_Delay(10);
 800587c:	200a      	movs	r0, #10
 800587e:	f7fc fd65 	bl	800234c <HAL_Delay>
      while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005882:	2002      	movs	r0, #2
 8005884:	f7fb fc28 	bl	80010d8 <BSP_PB_GetState>
 8005888:	4607      	mov	r7, r0
 800588a:	2800      	cmp	r0, #0
 800588c:	d1f9      	bne.n	8005882 <main+0x3e2>
      BSP_examples[DemoIndex++].DemoFunc();
 800588e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8005898:	223c      	movs	r2, #60	@ 0x3c
 800589a:	4353      	muls	r3, r2
 800589c:	58eb      	ldr	r3, [r5, r3]
 800589e:	4798      	blx	r3
      if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 80058a0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80058a4:	b133      	cbz	r3, 80058b4 <main+0x414>
        NbLoop++;
 80058a6:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
        DemoIndex = 0;
 80058aa:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
        NbLoop++;
 80058ae:	3301      	adds	r3, #1
 80058b0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
    sprintf((char *)desc, "Record and play with effect %d", EffectIndex);
 80058b4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80058b6:	4631      	mov	r1, r6
 80058b8:	a810      	add	r0, sp, #64	@ 0x40
 80058ba:	f000 fab9 	bl	8005e30 <siprintf>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 80058be:	f7fb ffe7 	bl	8001890 <BSP_LCD_GetYSize>
 80058c2:	2301      	movs	r3, #1
 80058c4:	0841      	lsrs	r1, r0, #1
 80058c6:	aa10      	add	r2, sp, #64	@ 0x40
 80058c8:	2000      	movs	r0, #0
 80058ca:	312d      	adds	r1, #45	@ 0x2d
 80058cc:	b289      	uxth	r1, r1
 80058ce:	f7fc f96d 	bl	8001bac <BSP_LCD_DisplayStringAt>
    sprintf((char *)adcText1, "ADC1 : %d", uhADCxConvertedValue);
 80058d2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 80058d6:	4914      	ldr	r1, [pc, #80]	@ (8005928 <main+0x488>)
 80058d8:	a81d      	add	r0, sp, #116	@ 0x74
 80058da:	b292      	uxth	r2, r2
 80058dc:	f000 faa8 	bl	8005e30 <siprintf>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 60, (uint8_t *)adcText1, CENTER_MODE);
 80058e0:	f7fb ffd6 	bl	8001890 <BSP_LCD_GetYSize>
 80058e4:	2301      	movs	r3, #1
 80058e6:	0841      	lsrs	r1, r0, #1
 80058e8:	aa1d      	add	r2, sp, #116	@ 0x74
 80058ea:	2000      	movs	r0, #0
 80058ec:	313c      	adds	r1, #60	@ 0x3c
 80058ee:	b289      	uxth	r1, r1
 80058f0:	f7fc f95c 	bl	8001bac <BSP_LCD_DisplayStringAt>
  {
 80058f4:	e7be      	b.n	8005874 <main+0x3d4>
 80058f6:	bf00      	nop
 80058f8:	2000004c 	.word	0x2000004c
 80058fc:	ff000080 	.word	0xff000080
 8005900:	0800d1bd 	.word	0x0800d1bd
 8005904:	0800d220 	.word	0x0800d220
 8005908:	0800d1cc 	.word	0x0800d1cc
 800590c:	0800abc0 	.word	0x0800abc0
 8005910:	2000005c 	.word	0x2000005c
 8005914:	0800d1dd 	.word	0x0800d1dd
 8005918:	20000064 	.word	0x20000064
 800591c:	ff0000ff 	.word	0xff0000ff
 8005920:	20000084 	.word	0x20000084
 8005924:	0800d203 	.word	0x0800d203
 8005928:	0800d23f 	.word	0x0800d23f

0800592c <CheckForUserInput>:
{
 800592c:	b508      	push	{r3, lr}
  if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800592e:	2002      	movs	r0, #2
 8005930:	f7fb fbd2 	bl	80010d8 <BSP_PB_GetState>
 8005934:	b140      	cbz	r0, 8005948 <CheckForUserInput+0x1c>
    HAL_Delay(10);
 8005936:	200a      	movs	r0, #10
 8005938:	f7fc fd08 	bl	800234c <HAL_Delay>
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800593c:	2002      	movs	r0, #2
 800593e:	f7fb fbcb 	bl	80010d8 <BSP_PB_GetState>
 8005942:	2800      	cmp	r0, #0
 8005944:	d1fa      	bne.n	800593c <CheckForUserInput+0x10>
    return 1 ;
 8005946:	2001      	movs	r0, #1
}
 8005948:	bd08      	pop	{r3, pc}
	...

0800594c <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == KEY_BUTTON_PIN)
 800594c:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 8005950:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 8005952:	d109      	bne.n	8005968 <HAL_GPIO_EXTI_Callback+0x1c>
    if ((HAL_GetTick() - debounce_time) > 50)
 8005954:	4c05      	ldr	r4, [pc, #20]	@ (800596c <HAL_GPIO_EXTI_Callback+0x20>)
 8005956:	f7fc fcf3 	bl	8002340 <HAL_GetTick>
 800595a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800595c:	1ac0      	subs	r0, r0, r3
 800595e:	2832      	cmp	r0, #50	@ 0x32
 8005960:	d902      	bls.n	8005968 <HAL_GPIO_EXTI_Callback+0x1c>
      debounce_time = HAL_GetTick();
 8005962:	f7fc fced 	bl	8002340 <HAL_GetTick>
 8005966:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8005968:	bd10      	pop	{r4, pc}
 800596a:	bf00      	nop
 800596c:	20020fb8 	.word	0x20020fb8

08005970 <HAL_ADC_ConvCpltCallback>:
	BSP_LED_Toggle(LED1);
 8005970:	2000      	movs	r0, #0
{
 8005972:	b508      	push	{r3, lr}
	BSP_LED_Toggle(LED1);
 8005974:	f7fb fb56 	bl	8001024 <BSP_LED_Toggle>
	HAL_Delay(1000);
 8005978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
}
 800597c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1000);
 8005980:	f7fc bce4 	b.w	800234c <HAL_Delay>

08005984 <HAL_ADC_MspInit>:
  GPIO_InitTypeDef          GPIO_InitStruct;
  static DMA_HandleTypeDef  hdma_adc;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* ADC3 Periph clock enable */
  ADCx_CLK_ENABLE();
 8005984:	4b29      	ldr	r3, [pc, #164]	@ (8005a2c <HAL_ADC_MspInit+0xa8>)
 8005986:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
{
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADCx_CLK_ENABLE();
 800598e:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8005990:	b089      	sub	sp, #36	@ 0x24
  ADCx_CLK_ENABLE();
 8005992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005994:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005996:	f44f 6780 	mov.w	r7, #1024	@ 0x400
{
 800599a:	4606      	mov	r6, r0
  ADCx_CLK_ENABLE();
 800599c:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 80059a0:	a903      	add	r1, sp, #12
 80059a2:	4823      	ldr	r0, [pc, #140]	@ (8005a30 <HAL_ADC_MspInit+0xac>)
  ADCx_CLK_ENABLE();
 80059a4:	9200      	str	r2, [sp, #0]
 80059a6:	9a00      	ldr	r2, [sp, #0]
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 80059a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*##-3- Configure the DMA streams ##########################################*/
  /* Set the parameters to be configured */
  hdma_adc.Instance = ADCx_DMA_STREAM;
 80059aa:	4c22      	ldr	r4, [pc, #136]	@ (8005a34 <HAL_ADC_MspInit+0xb0>)
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 80059ac:	f042 0220 	orr.w	r2, r2, #32
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b4:	f002 0220 	and.w	r2, r2, #32
 80059b8:	9201      	str	r2, [sp, #4]
 80059ba:	9a01      	ldr	r2, [sp, #4]
  DMAx_CLK_ENABLE();
 80059bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059be:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c6:	9505      	str	r5, [sp, #20]
  DMAx_CLK_ENABLE();
 80059c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e9cd 7303 	strd	r7, r3, [sp, #12]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 80059d6:	f7fd fb7f 	bl	80030d8 <HAL_GPIO_Init>

  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 80059da:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <HAL_ADC_MspInit+0xb4>)
 80059dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
  hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80059e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  hdma_adc.Init.Mode = DMA_CIRCULAR;
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80059e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
  hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80059e8:	6127      	str	r7, [r4, #16]
  hdma_adc.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059ea:	6265      	str	r5, [r4, #36]	@ 0x24
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
  hdma_adc.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80059ec:	6325      	str	r5, [r4, #48]	@ 0x30
  hdma_adc.Init.Channel  = ADCx_DMA_CHANNEL;
 80059ee:	e9c4 2300 	strd	r2, r3, [r4]
  hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80059f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059f6:	e9c4 1305 	strd	r1, r3, [r4, #20]
  hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80059fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059fe:	e9c4 0307 	strd	r0, r3, [r4, #28]
  hdma_adc.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8005a02:	2301      	movs	r3, #1

  HAL_DMA_Init(&hdma_adc);
 8005a04:	4620      	mov	r0, r4
  hdma_adc.Init.MemBurst = DMA_MBURST_SINGLE;
 8005a06:	e9c4 350a 	strd	r3, r5, [r4, #40]	@ 0x28
  hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a0a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_DMA_Init(&hdma_adc);
 8005a0e:	f7fc ffa9 	bl	8002964 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8005a12:	462a      	mov	r2, r5
 8005a14:	4629      	mov	r1, r5
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8005a16:	63b4      	str	r4, [r6, #56]	@ 0x38
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8005a18:	203a      	movs	r0, #58	@ 0x3a
  __HAL_LINKDMA(hadc, DMA_Handle, hdma_adc);
 8005a1a:	63a6      	str	r6, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 0, 0);
 8005a1c:	f7fc feee 	bl	80027fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 8005a20:	203a      	movs	r0, #58	@ 0x3a
 8005a22:	f7fc ff1d 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 8005a26:	b009      	add	sp, #36	@ 0x24
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40021400 	.word	0x40021400
 8005a34:	20021014 	.word	0x20021014
 8005a38:	40026428 	.word	0x40026428

08005a3c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005a3c:	4770      	bx	lr

08005a3e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005a3e:	e7fe      	b.n	8005a3e <HardFault_Handler>

08005a40 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005a40:	e7fe      	b.n	8005a40 <MemManage_Handler>

08005a42 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005a42:	e7fe      	b.n	8005a42 <BusFault_Handler>

08005a44 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005a44:	e7fe      	b.n	8005a44 <UsageFault_Handler>

08005a46 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8005a46:	4770      	bx	lr

08005a48 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8005a48:	4770      	bx	lr

08005a4a <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8005a4a:	4770      	bx	lr

08005a4c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8005a4c:	f7fc bc6c 	b.w	8002328 <HAL_IncTick>

08005a50 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8005a50:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);

    // Check if the interrupt is triggered by EXTI Line0
    static uint32_t debounce_time = 0;

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8005a52:	4c0e      	ldr	r4, [pc, #56]	@ (8005a8c <EXTI0_IRQHandler+0x3c>)
    HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8005a54:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005a58:	f7fd fc36 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8005a5c:	6963      	ldr	r3, [r4, #20]
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d512      	bpl.n	8005a88 <EXTI0_IRQHandler+0x38>
    {
        // Prevent debounce effect for user key
        if ((HAL_GetTick() - debounce_time) > 150)
 8005a62:	4d0b      	ldr	r5, [pc, #44]	@ (8005a90 <EXTI0_IRQHandler+0x40>)
 8005a64:	f7fc fc6c 	bl	8002340 <HAL_GetTick>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	1ac0      	subs	r0, r0, r3
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	2896      	cmp	r0, #150	@ 0x96
        {
            // Clear the EXTI line pending bit
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8005a70:	6163      	str	r3, [r4, #20]
        if ((HAL_GetTick() - debounce_time) > 150)
 8005a72:	d909      	bls.n	8005a88 <EXTI0_IRQHandler+0x38>

            // Add your code here, e.g., toggle an LED
            EffectIndex++;
 8005a74:	4a07      	ldr	r2, [pc, #28]	@ (8005a94 <EXTI0_IRQHandler+0x44>)
 8005a76:	6813      	ldr	r3, [r2, #0]
 8005a78:	3301      	adds	r3, #1
            if (EffectIndex >= 5)
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	bfa8      	it	ge
 8005a7e:	2305      	movge	r3, #5
            EffectIndex++;
 8005a80:	6013      	str	r3, [r2, #0]
			{
				EffectIndex = 5;
			}
            // Update the debounce time
            debounce_time = HAL_GetTick();
 8005a82:	f7fc fc5d 	bl	8002340 <HAL_GetTick>
 8005a86:	6028      	str	r0, [r5, #0]
        {
            // If the time is not sufficient, clear the interrupt to prevent further triggers
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
        }
    }
}
 8005a88:	bd38      	pop	{r3, r4, r5, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40013c00 	.word	0x40013c00
 8005a90:	20021074 	.word	0x20021074
 8005a94:	20021008 	.word	0x20021008

08005a98 <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a98:	2004      	movs	r0, #4
 8005a9a:	f7fd bc15 	b.w	80032c8 <HAL_GPIO_EXTI_IRQHandler>
	...

08005aa0 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8005aa0:	b538      	push	{r3, r4, r5, lr}
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 8005aa2:	4c12      	ldr	r4, [pc, #72]	@ (8005aec <EXTI15_10_IRQHandler+0x4c>)
 8005aa4:	6963      	ldr	r3, [r4, #20]
 8005aa6:	049a      	lsls	r2, r3, #18
 8005aa8:	d505      	bpl.n	8005ab6 <EXTI15_10_IRQHandler+0x16>
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8005aaa:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
  }
}
 8005aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8005ab2:	f7fd bc09 	b.w	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  else if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 8005ab6:	6963      	ldr	r3, [r4, #20]
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	d513      	bpl.n	8005ae4 <EXTI15_10_IRQHandler+0x44>
	  if ((HAL_GetTick() - debounce_time) > 125)
 8005abc:	4d0c      	ldr	r5, [pc, #48]	@ (8005af0 <EXTI15_10_IRQHandler+0x50>)
 8005abe:	f7fc fc3f 	bl	8002340 <HAL_GetTick>
 8005ac2:	686b      	ldr	r3, [r5, #4]
 8005ac4:	1ac0      	subs	r0, r0, r3
 8005ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aca:	287d      	cmp	r0, #125	@ 0x7d
		  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 8005acc:	6163      	str	r3, [r4, #20]
	  if ((HAL_GetTick() - debounce_time) > 125)
 8005ace:	d908      	bls.n	8005ae2 <EXTI15_10_IRQHandler+0x42>
		  EffectIndex--;
 8005ad0:	4a08      	ldr	r2, [pc, #32]	@ (8005af4 <EXTI15_10_IRQHandler+0x54>)
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	3b01      	subs	r3, #1
		  if (EffectIndex <= 0)
 8005ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		  EffectIndex--;
 8005ada:	6013      	str	r3, [r2, #0]
		  debounce_time = HAL_GetTick();
 8005adc:	f7fc fc30 	bl	8002340 <HAL_GetTick>
 8005ae0:	6068      	str	r0, [r5, #4]
}
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8005ae4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005ae8:	e7e1      	b.n	8005aae <EXTI15_10_IRQHandler+0xe>
 8005aea:	bf00      	nop
 8005aec:	40013c00 	.word	0x40013c00
 8005af0:	20021074 	.word	0x20021074
 8005af4:	20021008 	.word	0x20021008

08005af8 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8005af8:	4b01      	ldr	r3, [pc, #4]	@ (8005b00 <DMA2_Stream7_IRQHandler+0x8>)
 8005afa:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005afc:	f7fd b856 	b.w	8002bac <HAL_DMA_IRQHandler>
 8005b00:	20000270 	.word	0x20000270

08005b04 <DMA2_Stream2_IRQHandler>:
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 8005b04:	4b01      	ldr	r3, [pc, #4]	@ (8005b0c <DMA2_Stream2_IRQHandler+0x8>)
 8005b06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b08:	f7fd b850 	b.w	8002bac <HAL_DMA_IRQHandler>
 8005b0c:	20020fbc 	.word	0x20020fbc

08005b10 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005b10:	4b01      	ldr	r3, [pc, #4]	@ (8005b18 <DMA2_Stream4_IRQHandler+0x8>)
 8005b12:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005b14:	f7fd b84a 	b.w	8002bac <HAL_DMA_IRQHandler>
 8005b18:	200001ec 	.word	0x200001ec

08005b1c <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  BSP_LCD_DMA2D_IRQHandler();
 8005b1c:	f7ff bca2 	b.w	8005464 <BSP_LCD_DMA2D_IRQHandler>

08005b20 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8005b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8005b24:	4c1b      	ldr	r4, [pc, #108]	@ (8005b94 <LCD_LOG_UpdateDisplay+0x74>)
 8005b26:	4f1c      	ldr	r7, [pc, #112]	@ (8005b98 <LCD_LOG_UpdateDisplay+0x78>)
 8005b28:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8005b2a:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8005b2c:	2b0f      	cmp	r3, #15
 8005b2e:	d811      	bhi.n	8005b54 <LCD_LOG_UpdateDisplay+0x34>
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d311      	bcc.n	8005b58 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8005b34:	2584      	movs	r5, #132	@ 0x84
 8005b36:	fb05 7303 	mla	r3, r5, r3, r7
 8005b3a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005b3e:	f7fb fef5 	bl	800192c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8005b42:	8921      	ldrh	r1, [r4, #8]
 8005b44:	1d08      	adds	r0, r1, #4
 8005b46:	fb05 7101 	mla	r1, r5, r1, r7
 8005b4a:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8005b4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8005b50:	f7fc b880 	b.w	8001c54 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d201      	bcs.n	8005b5c <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8005b58:	3375      	adds	r3, #117	@ 0x75
 8005b5a:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8005b5c:	3b10      	subs	r3, #16
 8005b5e:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8005b60:	f04f 0875 	mov.w	r8, #117	@ 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8005b64:	f04f 0984 	mov.w	r9, #132	@ 0x84
    ptr = length - YWINDOW_SIZE + 1;
 8005b68:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8005b6a:	19a5      	adds	r5, r4, r6
 8005b6c:	fbb5 f3f8 	udiv	r3, r5, r8
 8005b70:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8005b74:	fb09 7505 	mla	r5, r9, r5, r7
 8005b78:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8005b7c:	f7fb fed6 	bl	800192c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8005b80:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8005b82:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8005b84:	4629      	mov	r1, r5
 8005b86:	b280      	uxth	r0, r0
 8005b88:	f7fc f864 	bl	8001c54 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8005b8c:	2e11      	cmp	r6, #17
 8005b8e:	d1ec      	bne.n	8005b6a <LCD_LOG_UpdateDisplay+0x4a>
}
 8005b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b94:	2002107c 	.word	0x2002107c
 8005b98:	20021090 	.word	0x20021090

08005b9c <__io_putchar>:
{
 8005b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 8005ba0:	4c37      	ldr	r4, [pc, #220]	@ (8005c80 <__io_putchar+0xe4>)
{
 8005ba2:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8005ba4:	f7fb fee6 	bl	8001974 <BSP_LCD_GetFont>
 8005ba8:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 8005baa:	7c23      	ldrb	r3, [r4, #16]
 8005bac:	b9e3      	cbnz	r3, 8005be8 <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 8005bae:	7be2      	ldrb	r2, [r4, #15]
 8005bb0:	2a01      	cmp	r2, #1
 8005bb2:	d106      	bne.n	8005bc2 <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8005bb4:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 8005bb6:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8005bb8:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8005bba:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 8005bbc:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8005bbe:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 8005bc0:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8005bc2:	88a6      	ldrh	r6, [r4, #4]
 8005bc4:	f7fb fe58 	bl	8001878 <BSP_LCD_GetXSize>
 8005bc8:	88bb      	ldrh	r3, [r7, #4]
 8005bca:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bce:	4286      	cmp	r6, r0
 8005bd0:	4e2c      	ldr	r6, [pc, #176]	@ (8005c84 <__io_putchar+0xe8>)
 8005bd2:	d20c      	bcs.n	8005bee <__io_putchar+0x52>
 8005bd4:	2d0a      	cmp	r5, #10
 8005bd6:	d00a      	beq.n	8005bee <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8005bd8:	88a2      	ldrh	r2, [r4, #4]
 8005bda:	8923      	ldrh	r3, [r4, #8]
 8005bdc:	1c51      	adds	r1, r2, #1
 8005bde:	80a1      	strh	r1, [r4, #4]
 8005be0:	2184      	movs	r1, #132	@ 0x84
 8005be2:	fb01 6303 	mla	r3, r1, r3, r6
 8005be6:	549d      	strb	r5, [r3, r2]
}
 8005be8:	4628      	mov	r0, r5
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8005bee:	88e3      	ldrh	r3, [r4, #6]
 8005bf0:	8922      	ldrh	r2, [r4, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d808      	bhi.n	8005c08 <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8005bf6:	7ba2      	ldrb	r2, [r4, #14]
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d133      	bne.n	8005c64 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8005c00:	2b75      	cmp	r3, #117	@ 0x75
          LCD_CacheBuffer_yptr_top++;
 8005c02:	bf14      	ite	ne
 8005c04:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 8005c06:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8005c08:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8005c0c:	f04f 0984 	mov.w	r9, #132	@ 0x84
 8005c10:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8005c14:	f7fb fe30 	bl	8001878 <BSP_LCD_GetXSize>
 8005c18:	88bb      	ldrh	r3, [r7, #4]
 8005c1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c1e:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8005c20:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8005c22:	d822      	bhi.n	8005c6a <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8005c24:	2284      	movs	r2, #132	@ 0x84
      LCD_CacheBuffer_xptr = 0;
 8005c26:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8005c28:	fb02 6303 	mla	r3, r2, r3, r6
 8005c2c:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 8005c2e:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8005c30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      LCD_LOG_UpdateDisplay (); 
 8005c34:	f7ff ff74 	bl	8005b20 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8005c38:	8923      	ldrh	r3, [r4, #8]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8005c3e:	2b75      	cmp	r3, #117	@ 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 8005c40:	bf09      	itett	eq
 8005c42:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 8005c44:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 8005c46:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 8005c48:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8005c4a:	bf08      	it	eq
 8005c4c:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 8005c4e:	2d0a      	cmp	r5, #10
 8005c50:	d0ca      	beq.n	8005be8 <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8005c52:	88a3      	ldrh	r3, [r4, #4]
 8005c54:	8922      	ldrh	r2, [r4, #8]
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	80a1      	strh	r1, [r4, #4]
 8005c5a:	2184      	movs	r1, #132	@ 0x84
 8005c5c:	fb01 6602 	mla	r6, r1, r2, r6
 8005c60:	54f5      	strb	r5, [r6, r3]
 8005c62:	e7c1      	b.n	8005be8 <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73a3      	strb	r3, [r4, #14]
 8005c68:	e7ce      	b.n	8005c08 <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8005c6a:	88a2      	ldrh	r2, [r4, #4]
 8005c6c:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8005c70:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8005c74:	1c51      	adds	r1, r2, #1
 8005c76:	f803 a002 	strb.w	sl, [r3, r2]
 8005c7a:	80a1      	strh	r1, [r4, #4]
 8005c7c:	e7ca      	b.n	8005c14 <__io_putchar+0x78>
 8005c7e:	bf00      	nop
 8005c80:	2002107c 	.word	0x2002107c
 8005c84:	20021090 	.word	0x20021090

08005c88 <std>:
 8005c88:	2300      	movs	r3, #0
 8005c8a:	b510      	push	{r4, lr}
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c96:	6083      	str	r3, [r0, #8]
 8005c98:	8181      	strh	r1, [r0, #12]
 8005c9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c9c:	81c2      	strh	r2, [r0, #14]
 8005c9e:	6183      	str	r3, [r0, #24]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	305c      	adds	r0, #92	@ 0x5c
 8005ca6:	f000 f926 	bl	8005ef6 <memset>
 8005caa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <std+0x58>)
 8005cac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <std+0x5c>)
 8005cb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <std+0x60>)
 8005cb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <std+0x64>)
 8005cb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cba:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <std+0x68>)
 8005cbc:	6224      	str	r4, [r4, #32]
 8005cbe:	429c      	cmp	r4, r3
 8005cc0:	d006      	beq.n	8005cd0 <std+0x48>
 8005cc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cc6:	4294      	cmp	r4, r2
 8005cc8:	d002      	beq.n	8005cd0 <std+0x48>
 8005cca:	33d0      	adds	r3, #208	@ 0xd0
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	d105      	bne.n	8005cdc <std+0x54>
 8005cd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd8:	f000 b986 	b.w	8005fe8 <__retarget_lock_init_recursive>
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	08005e71 	.word	0x08005e71
 8005ce4:	08005e93 	.word	0x08005e93
 8005ce8:	08005ecb 	.word	0x08005ecb
 8005cec:	08005eef 	.word	0x08005eef
 8005cf0:	20024ce4 	.word	0x20024ce4

08005cf4 <stdio_exit_handler>:
 8005cf4:	4a02      	ldr	r2, [pc, #8]	@ (8005d00 <stdio_exit_handler+0xc>)
 8005cf6:	4903      	ldr	r1, [pc, #12]	@ (8005d04 <stdio_exit_handler+0x10>)
 8005cf8:	4803      	ldr	r0, [pc, #12]	@ (8005d08 <stdio_exit_handler+0x14>)
 8005cfa:	f000 b869 	b.w	8005dd0 <_fwalk_sglue>
 8005cfe:	bf00      	nop
 8005d00:	200000c4 	.word	0x200000c4
 8005d04:	08006b55 	.word	0x08006b55
 8005d08:	200000d4 	.word	0x200000d4

08005d0c <cleanup_stdio>:
 8005d0c:	6841      	ldr	r1, [r0, #4]
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <cleanup_stdio+0x34>)
 8005d10:	4299      	cmp	r1, r3
 8005d12:	b510      	push	{r4, lr}
 8005d14:	4604      	mov	r4, r0
 8005d16:	d001      	beq.n	8005d1c <cleanup_stdio+0x10>
 8005d18:	f000 ff1c 	bl	8006b54 <_fflush_r>
 8005d1c:	68a1      	ldr	r1, [r4, #8]
 8005d1e:	4b09      	ldr	r3, [pc, #36]	@ (8005d44 <cleanup_stdio+0x38>)
 8005d20:	4299      	cmp	r1, r3
 8005d22:	d002      	beq.n	8005d2a <cleanup_stdio+0x1e>
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 ff15 	bl	8006b54 <_fflush_r>
 8005d2a:	68e1      	ldr	r1, [r4, #12]
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <cleanup_stdio+0x3c>)
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d004      	beq.n	8005d3c <cleanup_stdio+0x30>
 8005d32:	4620      	mov	r0, r4
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	f000 bf0c 	b.w	8006b54 <_fflush_r>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	bf00      	nop
 8005d40:	20024ce4 	.word	0x20024ce4
 8005d44:	20024d4c 	.word	0x20024d4c
 8005d48:	20024db4 	.word	0x20024db4

08005d4c <global_stdio_init.part.0>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <global_stdio_init.part.0+0x30>)
 8005d50:	4c0b      	ldr	r4, [pc, #44]	@ (8005d80 <global_stdio_init.part.0+0x34>)
 8005d52:	4a0c      	ldr	r2, [pc, #48]	@ (8005d84 <global_stdio_init.part.0+0x38>)
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	4620      	mov	r0, r4
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2104      	movs	r1, #4
 8005d5c:	f7ff ff94 	bl	8005c88 <std>
 8005d60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d64:	2201      	movs	r2, #1
 8005d66:	2109      	movs	r1, #9
 8005d68:	f7ff ff8e 	bl	8005c88 <std>
 8005d6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d70:	2202      	movs	r2, #2
 8005d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d76:	2112      	movs	r1, #18
 8005d78:	f7ff bf86 	b.w	8005c88 <std>
 8005d7c:	20024e1c 	.word	0x20024e1c
 8005d80:	20024ce4 	.word	0x20024ce4
 8005d84:	08005cf5 	.word	0x08005cf5

08005d88 <__sfp_lock_acquire>:
 8005d88:	4801      	ldr	r0, [pc, #4]	@ (8005d90 <__sfp_lock_acquire+0x8>)
 8005d8a:	f000 b92e 	b.w	8005fea <__retarget_lock_acquire_recursive>
 8005d8e:	bf00      	nop
 8005d90:	20024e25 	.word	0x20024e25

08005d94 <__sfp_lock_release>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__sfp_lock_release+0x8>)
 8005d96:	f000 b929 	b.w	8005fec <__retarget_lock_release_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	20024e25 	.word	0x20024e25

08005da0 <__sinit>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	f7ff fff0 	bl	8005d88 <__sfp_lock_acquire>
 8005da8:	6a23      	ldr	r3, [r4, #32]
 8005daa:	b11b      	cbz	r3, 8005db4 <__sinit+0x14>
 8005dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db0:	f7ff bff0 	b.w	8005d94 <__sfp_lock_release>
 8005db4:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <__sinit+0x28>)
 8005db6:	6223      	str	r3, [r4, #32]
 8005db8:	4b04      	ldr	r3, [pc, #16]	@ (8005dcc <__sinit+0x2c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f5      	bne.n	8005dac <__sinit+0xc>
 8005dc0:	f7ff ffc4 	bl	8005d4c <global_stdio_init.part.0>
 8005dc4:	e7f2      	b.n	8005dac <__sinit+0xc>
 8005dc6:	bf00      	nop
 8005dc8:	08005d0d 	.word	0x08005d0d
 8005dcc:	20024e1c 	.word	0x20024e1c

08005dd0 <_fwalk_sglue>:
 8005dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	4614      	mov	r4, r2
 8005dda:	2600      	movs	r6, #0
 8005ddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005de0:	f1b9 0901 	subs.w	r9, r9, #1
 8005de4:	d505      	bpl.n	8005df2 <_fwalk_sglue+0x22>
 8005de6:	6824      	ldr	r4, [r4, #0]
 8005de8:	2c00      	cmp	r4, #0
 8005dea:	d1f7      	bne.n	8005ddc <_fwalk_sglue+0xc>
 8005dec:	4630      	mov	r0, r6
 8005dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d907      	bls.n	8005e08 <_fwalk_sglue+0x38>
 8005df8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	d003      	beq.n	8005e08 <_fwalk_sglue+0x38>
 8005e00:	4629      	mov	r1, r5
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c0      	blx	r8
 8005e06:	4306      	orrs	r6, r0
 8005e08:	3568      	adds	r5, #104	@ 0x68
 8005e0a:	e7e9      	b.n	8005de0 <_fwalk_sglue+0x10>

08005e0c <iprintf>:
 8005e0c:	b40f      	push	{r0, r1, r2, r3}
 8005e0e:	b507      	push	{r0, r1, r2, lr}
 8005e10:	4906      	ldr	r1, [pc, #24]	@ (8005e2c <iprintf+0x20>)
 8005e12:	ab04      	add	r3, sp, #16
 8005e14:	6808      	ldr	r0, [r1, #0]
 8005e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1a:	6881      	ldr	r1, [r0, #8]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	f000 fb6f 	bl	8006500 <_vfiprintf_r>
 8005e22:	b003      	add	sp, #12
 8005e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e28:	b004      	add	sp, #16
 8005e2a:	4770      	bx	lr
 8005e2c:	200000d0 	.word	0x200000d0

08005e30 <siprintf>:
 8005e30:	b40e      	push	{r1, r2, r3}
 8005e32:	b500      	push	{lr}
 8005e34:	b09c      	sub	sp, #112	@ 0x70
 8005e36:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9006      	str	r0, [sp, #24]
 8005e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e40:	4809      	ldr	r0, [pc, #36]	@ (8005e68 <siprintf+0x38>)
 8005e42:	9107      	str	r1, [sp, #28]
 8005e44:	9104      	str	r1, [sp, #16]
 8005e46:	4909      	ldr	r1, [pc, #36]	@ (8005e6c <siprintf+0x3c>)
 8005e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e4c:	9105      	str	r1, [sp, #20]
 8005e4e:	6800      	ldr	r0, [r0, #0]
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	a902      	add	r1, sp, #8
 8005e54:	f000 fa2e 	bl	80062b4 <_svfiprintf_r>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	b01c      	add	sp, #112	@ 0x70
 8005e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e64:	b003      	add	sp, #12
 8005e66:	4770      	bx	lr
 8005e68:	200000d0 	.word	0x200000d0
 8005e6c:	ffff0208 	.word	0xffff0208

08005e70 <__sread>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	460c      	mov	r4, r1
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 f868 	bl	8005f4c <_read_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	bfab      	itete	ge
 8005e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e82:	89a3      	ldrhlt	r3, [r4, #12]
 8005e84:	181b      	addge	r3, r3, r0
 8005e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e8a:	bfac      	ite	ge
 8005e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e8e:	81a3      	strhlt	r3, [r4, #12]
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <__swrite>:
 8005e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	461f      	mov	r7, r3
 8005e98:	898b      	ldrh	r3, [r1, #12]
 8005e9a:	05db      	lsls	r3, r3, #23
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	d505      	bpl.n	8005eb0 <__swrite+0x1e>
 8005ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f000 f83c 	bl	8005f28 <_lseek_r>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	f000 b853 	b.w	8005f70 <_write_r>

08005eca <__sseek>:
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	460c      	mov	r4, r1
 8005ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed2:	f000 f829 	bl	8005f28 <_lseek_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	bf15      	itete	ne
 8005edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ee6:	81a3      	strheq	r3, [r4, #12]
 8005ee8:	bf18      	it	ne
 8005eea:	81a3      	strhne	r3, [r4, #12]
 8005eec:	bd10      	pop	{r4, pc}

08005eee <__sclose>:
 8005eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef2:	f000 b809 	b.w	8005f08 <_close_r>

08005ef6 <memset>:
 8005ef6:	4402      	add	r2, r0
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d100      	bne.n	8005f00 <memset+0xa>
 8005efe:	4770      	bx	lr
 8005f00:	f803 1b01 	strb.w	r1, [r3], #1
 8005f04:	e7f9      	b.n	8005efa <memset+0x4>
	...

08005f08 <_close_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d06      	ldr	r5, [pc, #24]	@ (8005f24 <_close_r+0x1c>)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	f7ff f89c 	bl	8005050 <_close>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_close_r+0x1a>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_close_r+0x1a>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	20024e20 	.word	0x20024e20

08005f28 <_lseek_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d07      	ldr	r5, [pc, #28]	@ (8005f48 <_lseek_r+0x20>)
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	4608      	mov	r0, r1
 8005f30:	4611      	mov	r1, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f7ff f894 	bl	8005064 <_lseek>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_lseek_r+0x1e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_lseek_r+0x1e>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20024e20 	.word	0x20024e20

08005f4c <_read_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	@ (8005f6c <_read_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7ff f841 	bl	8004fe2 <_read>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_read_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_read_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20024e20 	.word	0x20024e20

08005f70 <_write_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d07      	ldr	r5, [pc, #28]	@ (8005f90 <_write_r+0x20>)
 8005f74:	4604      	mov	r4, r0
 8005f76:	4608      	mov	r0, r1
 8005f78:	4611      	mov	r1, r2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	602a      	str	r2, [r5, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f7ff f83d 	bl	8004ffe <_write>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_write_r+0x1e>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_write_r+0x1e>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20024e20 	.word	0x20024e20

08005f94 <__errno>:
 8005f94:	4b01      	ldr	r3, [pc, #4]	@ (8005f9c <__errno+0x8>)
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	200000d0 	.word	0x200000d0

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd8 <__libc_init_array+0x38>)
 8005fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8005fdc <__libc_init_array+0x3c>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	2600      	movs	r6, #0
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8005fe0 <__libc_init_array+0x40>)
 8005fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8005fe4 <__libc_init_array+0x44>)
 8005fb4:	f000 ff6e 	bl	8006e94 <_init>
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	0800d284 	.word	0x0800d284
 8005fdc:	0800d284 	.word	0x0800d284
 8005fe0:	0800d284 	.word	0x0800d284
 8005fe4:	0800d288 	.word	0x0800d288

08005fe8 <__retarget_lock_init_recursive>:
 8005fe8:	4770      	bx	lr

08005fea <__retarget_lock_acquire_recursive>:
 8005fea:	4770      	bx	lr

08005fec <__retarget_lock_release_recursive>:
 8005fec:	4770      	bx	lr

08005fee <memcpy>:
 8005fee:	440a      	add	r2, r1
 8005ff0:	4291      	cmp	r1, r2
 8005ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff6:	d100      	bne.n	8005ffa <memcpy+0xc>
 8005ff8:	4770      	bx	lr
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006004:	4291      	cmp	r1, r2
 8006006:	d1f9      	bne.n	8005ffc <memcpy+0xe>
 8006008:	bd10      	pop	{r4, pc}
	...

0800600c <_free_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4605      	mov	r5, r0
 8006010:	2900      	cmp	r1, #0
 8006012:	d041      	beq.n	8006098 <_free_r+0x8c>
 8006014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006018:	1f0c      	subs	r4, r1, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfb8      	it	lt
 800601e:	18e4      	addlt	r4, r4, r3
 8006020:	f000 f8e0 	bl	80061e4 <__malloc_lock>
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <_free_r+0x90>)
 8006026:	6813      	ldr	r3, [r2, #0]
 8006028:	b933      	cbnz	r3, 8006038 <_free_r+0x2c>
 800602a:	6063      	str	r3, [r4, #4]
 800602c:	6014      	str	r4, [r2, #0]
 800602e:	4628      	mov	r0, r5
 8006030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006034:	f000 b8dc 	b.w	80061f0 <__malloc_unlock>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d908      	bls.n	800604e <_free_r+0x42>
 800603c:	6820      	ldr	r0, [r4, #0]
 800603e:	1821      	adds	r1, r4, r0
 8006040:	428b      	cmp	r3, r1
 8006042:	bf01      	itttt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	1809      	addeq	r1, r1, r0
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	e7ed      	b.n	800602a <_free_r+0x1e>
 800604e:	461a      	mov	r2, r3
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	b10b      	cbz	r3, 8006058 <_free_r+0x4c>
 8006054:	42a3      	cmp	r3, r4
 8006056:	d9fa      	bls.n	800604e <_free_r+0x42>
 8006058:	6811      	ldr	r1, [r2, #0]
 800605a:	1850      	adds	r0, r2, r1
 800605c:	42a0      	cmp	r0, r4
 800605e:	d10b      	bne.n	8006078 <_free_r+0x6c>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	4401      	add	r1, r0
 8006064:	1850      	adds	r0, r2, r1
 8006066:	4283      	cmp	r3, r0
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	d1e0      	bne.n	800602e <_free_r+0x22>
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	6053      	str	r3, [r2, #4]
 8006072:	4408      	add	r0, r1
 8006074:	6010      	str	r0, [r2, #0]
 8006076:	e7da      	b.n	800602e <_free_r+0x22>
 8006078:	d902      	bls.n	8006080 <_free_r+0x74>
 800607a:	230c      	movs	r3, #12
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	e7d6      	b.n	800602e <_free_r+0x22>
 8006080:	6820      	ldr	r0, [r4, #0]
 8006082:	1821      	adds	r1, r4, r0
 8006084:	428b      	cmp	r3, r1
 8006086:	bf04      	itt	eq
 8006088:	6819      	ldreq	r1, [r3, #0]
 800608a:	685b      	ldreq	r3, [r3, #4]
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	bf04      	itt	eq
 8006090:	1809      	addeq	r1, r1, r0
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	6054      	str	r4, [r2, #4]
 8006096:	e7ca      	b.n	800602e <_free_r+0x22>
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop
 800609c:	20024e2c 	.word	0x20024e2c

080060a0 <sbrk_aligned>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4e0f      	ldr	r6, [pc, #60]	@ (80060e0 <sbrk_aligned+0x40>)
 80060a4:	460c      	mov	r4, r1
 80060a6:	6831      	ldr	r1, [r6, #0]
 80060a8:	4605      	mov	r5, r0
 80060aa:	b911      	cbnz	r1, 80060b2 <sbrk_aligned+0x12>
 80060ac:	f000 fe28 	bl	8006d00 <_sbrk_r>
 80060b0:	6030      	str	r0, [r6, #0]
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 fe23 	bl	8006d00 <_sbrk_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d103      	bne.n	80060c6 <sbrk_aligned+0x26>
 80060be:	f04f 34ff 	mov.w	r4, #4294967295
 80060c2:	4620      	mov	r0, r4
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	1cc4      	adds	r4, r0, #3
 80060c8:	f024 0403 	bic.w	r4, r4, #3
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d0f8      	beq.n	80060c2 <sbrk_aligned+0x22>
 80060d0:	1a21      	subs	r1, r4, r0
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 fe14 	bl	8006d00 <_sbrk_r>
 80060d8:	3001      	adds	r0, #1
 80060da:	d1f2      	bne.n	80060c2 <sbrk_aligned+0x22>
 80060dc:	e7ef      	b.n	80060be <sbrk_aligned+0x1e>
 80060de:	bf00      	nop
 80060e0:	20024e28 	.word	0x20024e28

080060e4 <_malloc_r>:
 80060e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	1ccd      	adds	r5, r1, #3
 80060ea:	f025 0503 	bic.w	r5, r5, #3
 80060ee:	3508      	adds	r5, #8
 80060f0:	2d0c      	cmp	r5, #12
 80060f2:	bf38      	it	cc
 80060f4:	250c      	movcc	r5, #12
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	4606      	mov	r6, r0
 80060fa:	db01      	blt.n	8006100 <_malloc_r+0x1c>
 80060fc:	42a9      	cmp	r1, r5
 80060fe:	d904      	bls.n	800610a <_malloc_r+0x26>
 8006100:	230c      	movs	r3, #12
 8006102:	6033      	str	r3, [r6, #0]
 8006104:	2000      	movs	r0, #0
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061e0 <_malloc_r+0xfc>
 800610e:	f000 f869 	bl	80061e4 <__malloc_lock>
 8006112:	f8d8 3000 	ldr.w	r3, [r8]
 8006116:	461c      	mov	r4, r3
 8006118:	bb44      	cbnz	r4, 800616c <_malloc_r+0x88>
 800611a:	4629      	mov	r1, r5
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff ffbf 	bl	80060a0 <sbrk_aligned>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	4604      	mov	r4, r0
 8006126:	d158      	bne.n	80061da <_malloc_r+0xf6>
 8006128:	f8d8 4000 	ldr.w	r4, [r8]
 800612c:	4627      	mov	r7, r4
 800612e:	2f00      	cmp	r7, #0
 8006130:	d143      	bne.n	80061ba <_malloc_r+0xd6>
 8006132:	2c00      	cmp	r4, #0
 8006134:	d04b      	beq.n	80061ce <_malloc_r+0xea>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	4639      	mov	r1, r7
 800613a:	4630      	mov	r0, r6
 800613c:	eb04 0903 	add.w	r9, r4, r3
 8006140:	f000 fdde 	bl	8006d00 <_sbrk_r>
 8006144:	4581      	cmp	r9, r0
 8006146:	d142      	bne.n	80061ce <_malloc_r+0xea>
 8006148:	6821      	ldr	r1, [r4, #0]
 800614a:	1a6d      	subs	r5, r5, r1
 800614c:	4629      	mov	r1, r5
 800614e:	4630      	mov	r0, r6
 8006150:	f7ff ffa6 	bl	80060a0 <sbrk_aligned>
 8006154:	3001      	adds	r0, #1
 8006156:	d03a      	beq.n	80061ce <_malloc_r+0xea>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	442b      	add	r3, r5
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	f8d8 3000 	ldr.w	r3, [r8]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	bb62      	cbnz	r2, 80061c0 <_malloc_r+0xdc>
 8006166:	f8c8 7000 	str.w	r7, [r8]
 800616a:	e00f      	b.n	800618c <_malloc_r+0xa8>
 800616c:	6822      	ldr	r2, [r4, #0]
 800616e:	1b52      	subs	r2, r2, r5
 8006170:	d420      	bmi.n	80061b4 <_malloc_r+0xd0>
 8006172:	2a0b      	cmp	r2, #11
 8006174:	d917      	bls.n	80061a6 <_malloc_r+0xc2>
 8006176:	1961      	adds	r1, r4, r5
 8006178:	42a3      	cmp	r3, r4
 800617a:	6025      	str	r5, [r4, #0]
 800617c:	bf18      	it	ne
 800617e:	6059      	strne	r1, [r3, #4]
 8006180:	6863      	ldr	r3, [r4, #4]
 8006182:	bf08      	it	eq
 8006184:	f8c8 1000 	streq.w	r1, [r8]
 8006188:	5162      	str	r2, [r4, r5]
 800618a:	604b      	str	r3, [r1, #4]
 800618c:	4630      	mov	r0, r6
 800618e:	f000 f82f 	bl	80061f0 <__malloc_unlock>
 8006192:	f104 000b 	add.w	r0, r4, #11
 8006196:	1d23      	adds	r3, r4, #4
 8006198:	f020 0007 	bic.w	r0, r0, #7
 800619c:	1ac2      	subs	r2, r0, r3
 800619e:	bf1c      	itt	ne
 80061a0:	1a1b      	subne	r3, r3, r0
 80061a2:	50a3      	strne	r3, [r4, r2]
 80061a4:	e7af      	b.n	8006106 <_malloc_r+0x22>
 80061a6:	6862      	ldr	r2, [r4, #4]
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	bf0c      	ite	eq
 80061ac:	f8c8 2000 	streq.w	r2, [r8]
 80061b0:	605a      	strne	r2, [r3, #4]
 80061b2:	e7eb      	b.n	800618c <_malloc_r+0xa8>
 80061b4:	4623      	mov	r3, r4
 80061b6:	6864      	ldr	r4, [r4, #4]
 80061b8:	e7ae      	b.n	8006118 <_malloc_r+0x34>
 80061ba:	463c      	mov	r4, r7
 80061bc:	687f      	ldr	r7, [r7, #4]
 80061be:	e7b6      	b.n	800612e <_malloc_r+0x4a>
 80061c0:	461a      	mov	r2, r3
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	d1fb      	bne.n	80061c0 <_malloc_r+0xdc>
 80061c8:	2300      	movs	r3, #0
 80061ca:	6053      	str	r3, [r2, #4]
 80061cc:	e7de      	b.n	800618c <_malloc_r+0xa8>
 80061ce:	230c      	movs	r3, #12
 80061d0:	6033      	str	r3, [r6, #0]
 80061d2:	4630      	mov	r0, r6
 80061d4:	f000 f80c 	bl	80061f0 <__malloc_unlock>
 80061d8:	e794      	b.n	8006104 <_malloc_r+0x20>
 80061da:	6005      	str	r5, [r0, #0]
 80061dc:	e7d6      	b.n	800618c <_malloc_r+0xa8>
 80061de:	bf00      	nop
 80061e0:	20024e2c 	.word	0x20024e2c

080061e4 <__malloc_lock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	@ (80061ec <__malloc_lock+0x8>)
 80061e6:	f7ff bf00 	b.w	8005fea <__retarget_lock_acquire_recursive>
 80061ea:	bf00      	nop
 80061ec:	20024e24 	.word	0x20024e24

080061f0 <__malloc_unlock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	@ (80061f8 <__malloc_unlock+0x8>)
 80061f2:	f7ff befb 	b.w	8005fec <__retarget_lock_release_recursive>
 80061f6:	bf00      	nop
 80061f8:	20024e24 	.word	0x20024e24

080061fc <__ssputs_r>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	688e      	ldr	r6, [r1, #8]
 8006202:	461f      	mov	r7, r3
 8006204:	42be      	cmp	r6, r7
 8006206:	680b      	ldr	r3, [r1, #0]
 8006208:	4682      	mov	sl, r0
 800620a:	460c      	mov	r4, r1
 800620c:	4690      	mov	r8, r2
 800620e:	d82d      	bhi.n	800626c <__ssputs_r+0x70>
 8006210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006218:	d026      	beq.n	8006268 <__ssputs_r+0x6c>
 800621a:	6965      	ldr	r5, [r4, #20]
 800621c:	6909      	ldr	r1, [r1, #16]
 800621e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006222:	eba3 0901 	sub.w	r9, r3, r1
 8006226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800622a:	1c7b      	adds	r3, r7, #1
 800622c:	444b      	add	r3, r9
 800622e:	106d      	asrs	r5, r5, #1
 8006230:	429d      	cmp	r5, r3
 8006232:	bf38      	it	cc
 8006234:	461d      	movcc	r5, r3
 8006236:	0553      	lsls	r3, r2, #21
 8006238:	d527      	bpl.n	800628a <__ssputs_r+0x8e>
 800623a:	4629      	mov	r1, r5
 800623c:	f7ff ff52 	bl	80060e4 <_malloc_r>
 8006240:	4606      	mov	r6, r0
 8006242:	b360      	cbz	r0, 800629e <__ssputs_r+0xa2>
 8006244:	6921      	ldr	r1, [r4, #16]
 8006246:	464a      	mov	r2, r9
 8006248:	f7ff fed1 	bl	8005fee <memcpy>
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	6126      	str	r6, [r4, #16]
 800625a:	6165      	str	r5, [r4, #20]
 800625c:	444e      	add	r6, r9
 800625e:	eba5 0509 	sub.w	r5, r5, r9
 8006262:	6026      	str	r6, [r4, #0]
 8006264:	60a5      	str	r5, [r4, #8]
 8006266:	463e      	mov	r6, r7
 8006268:	42be      	cmp	r6, r7
 800626a:	d900      	bls.n	800626e <__ssputs_r+0x72>
 800626c:	463e      	mov	r6, r7
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	4632      	mov	r2, r6
 8006272:	4641      	mov	r1, r8
 8006274:	f000 fd2a 	bl	8006ccc <memmove>
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	1b9b      	subs	r3, r3, r6
 800627c:	60a3      	str	r3, [r4, #8]
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	4433      	add	r3, r6
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	2000      	movs	r0, #0
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	462a      	mov	r2, r5
 800628c:	f000 fd48 	bl	8006d20 <_realloc_r>
 8006290:	4606      	mov	r6, r0
 8006292:	2800      	cmp	r0, #0
 8006294:	d1e0      	bne.n	8006258 <__ssputs_r+0x5c>
 8006296:	6921      	ldr	r1, [r4, #16]
 8006298:	4650      	mov	r0, sl
 800629a:	f7ff feb7 	bl	800600c <_free_r>
 800629e:	230c      	movs	r3, #12
 80062a0:	f8ca 3000 	str.w	r3, [sl]
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	e7e9      	b.n	8006286 <__ssputs_r+0x8a>
	...

080062b4 <_svfiprintf_r>:
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	4698      	mov	r8, r3
 80062ba:	898b      	ldrh	r3, [r1, #12]
 80062bc:	061b      	lsls	r3, r3, #24
 80062be:	b09d      	sub	sp, #116	@ 0x74
 80062c0:	4607      	mov	r7, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	4614      	mov	r4, r2
 80062c6:	d510      	bpl.n	80062ea <_svfiprintf_r+0x36>
 80062c8:	690b      	ldr	r3, [r1, #16]
 80062ca:	b973      	cbnz	r3, 80062ea <_svfiprintf_r+0x36>
 80062cc:	2140      	movs	r1, #64	@ 0x40
 80062ce:	f7ff ff09 	bl	80060e4 <_malloc_r>
 80062d2:	6028      	str	r0, [r5, #0]
 80062d4:	6128      	str	r0, [r5, #16]
 80062d6:	b930      	cbnz	r0, 80062e6 <_svfiprintf_r+0x32>
 80062d8:	230c      	movs	r3, #12
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	b01d      	add	sp, #116	@ 0x74
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	2340      	movs	r3, #64	@ 0x40
 80062e8:	616b      	str	r3, [r5, #20]
 80062ea:	2300      	movs	r3, #0
 80062ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ee:	2320      	movs	r3, #32
 80062f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062f8:	2330      	movs	r3, #48	@ 0x30
 80062fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006498 <_svfiprintf_r+0x1e4>
 80062fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006302:	f04f 0901 	mov.w	r9, #1
 8006306:	4623      	mov	r3, r4
 8006308:	469a      	mov	sl, r3
 800630a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800630e:	b10a      	cbz	r2, 8006314 <_svfiprintf_r+0x60>
 8006310:	2a25      	cmp	r2, #37	@ 0x25
 8006312:	d1f9      	bne.n	8006308 <_svfiprintf_r+0x54>
 8006314:	ebba 0b04 	subs.w	fp, sl, r4
 8006318:	d00b      	beq.n	8006332 <_svfiprintf_r+0x7e>
 800631a:	465b      	mov	r3, fp
 800631c:	4622      	mov	r2, r4
 800631e:	4629      	mov	r1, r5
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff ff6b 	bl	80061fc <__ssputs_r>
 8006326:	3001      	adds	r0, #1
 8006328:	f000 80a7 	beq.w	800647a <_svfiprintf_r+0x1c6>
 800632c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800632e:	445a      	add	r2, fp
 8006330:	9209      	str	r2, [sp, #36]	@ 0x24
 8006332:	f89a 3000 	ldrb.w	r3, [sl]
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 809f 	beq.w	800647a <_svfiprintf_r+0x1c6>
 800633c:	2300      	movs	r3, #0
 800633e:	f04f 32ff 	mov.w	r2, #4294967295
 8006342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006346:	f10a 0a01 	add.w	sl, sl, #1
 800634a:	9304      	str	r3, [sp, #16]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006352:	931a      	str	r3, [sp, #104]	@ 0x68
 8006354:	4654      	mov	r4, sl
 8006356:	2205      	movs	r2, #5
 8006358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635c:	484e      	ldr	r0, [pc, #312]	@ (8006498 <_svfiprintf_r+0x1e4>)
 800635e:	f7f9 ff5f 	bl	8000220 <memchr>
 8006362:	9a04      	ldr	r2, [sp, #16]
 8006364:	b9d8      	cbnz	r0, 800639e <_svfiprintf_r+0xea>
 8006366:	06d0      	lsls	r0, r2, #27
 8006368:	bf44      	itt	mi
 800636a:	2320      	movmi	r3, #32
 800636c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006370:	0711      	lsls	r1, r2, #28
 8006372:	bf44      	itt	mi
 8006374:	232b      	movmi	r3, #43	@ 0x2b
 8006376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800637a:	f89a 3000 	ldrb.w	r3, [sl]
 800637e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006380:	d015      	beq.n	80063ae <_svfiprintf_r+0xfa>
 8006382:	9a07      	ldr	r2, [sp, #28]
 8006384:	4654      	mov	r4, sl
 8006386:	2000      	movs	r0, #0
 8006388:	f04f 0c0a 	mov.w	ip, #10
 800638c:	4621      	mov	r1, r4
 800638e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006392:	3b30      	subs	r3, #48	@ 0x30
 8006394:	2b09      	cmp	r3, #9
 8006396:	d94b      	bls.n	8006430 <_svfiprintf_r+0x17c>
 8006398:	b1b0      	cbz	r0, 80063c8 <_svfiprintf_r+0x114>
 800639a:	9207      	str	r2, [sp, #28]
 800639c:	e014      	b.n	80063c8 <_svfiprintf_r+0x114>
 800639e:	eba0 0308 	sub.w	r3, r0, r8
 80063a2:	fa09 f303 	lsl.w	r3, r9, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	46a2      	mov	sl, r4
 80063ac:	e7d2      	b.n	8006354 <_svfiprintf_r+0xa0>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d19      	adds	r1, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9103      	str	r1, [sp, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbb      	ittet	lt
 80063ba:	425b      	neglt	r3, r3
 80063bc:	f042 0202 	orrlt.w	r2, r2, #2
 80063c0:	9307      	strge	r3, [sp, #28]
 80063c2:	9307      	strlt	r3, [sp, #28]
 80063c4:	bfb8      	it	lt
 80063c6:	9204      	strlt	r2, [sp, #16]
 80063c8:	7823      	ldrb	r3, [r4, #0]
 80063ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80063cc:	d10a      	bne.n	80063e4 <_svfiprintf_r+0x130>
 80063ce:	7863      	ldrb	r3, [r4, #1]
 80063d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063d2:	d132      	bne.n	800643a <_svfiprintf_r+0x186>
 80063d4:	9b03      	ldr	r3, [sp, #12]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	9203      	str	r2, [sp, #12]
 80063dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063e0:	3402      	adds	r4, #2
 80063e2:	9305      	str	r3, [sp, #20]
 80063e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80064a8 <_svfiprintf_r+0x1f4>
 80063e8:	7821      	ldrb	r1, [r4, #0]
 80063ea:	2203      	movs	r2, #3
 80063ec:	4650      	mov	r0, sl
 80063ee:	f7f9 ff17 	bl	8000220 <memchr>
 80063f2:	b138      	cbz	r0, 8006404 <_svfiprintf_r+0x150>
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	eba0 000a 	sub.w	r0, r0, sl
 80063fa:	2240      	movs	r2, #64	@ 0x40
 80063fc:	4082      	lsls	r2, r0
 80063fe:	4313      	orrs	r3, r2
 8006400:	3401      	adds	r4, #1
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006408:	4824      	ldr	r0, [pc, #144]	@ (800649c <_svfiprintf_r+0x1e8>)
 800640a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800640e:	2206      	movs	r2, #6
 8006410:	f7f9 ff06 	bl	8000220 <memchr>
 8006414:	2800      	cmp	r0, #0
 8006416:	d036      	beq.n	8006486 <_svfiprintf_r+0x1d2>
 8006418:	4b21      	ldr	r3, [pc, #132]	@ (80064a0 <_svfiprintf_r+0x1ec>)
 800641a:	bb1b      	cbnz	r3, 8006464 <_svfiprintf_r+0x1b0>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	3307      	adds	r3, #7
 8006420:	f023 0307 	bic.w	r3, r3, #7
 8006424:	3308      	adds	r3, #8
 8006426:	9303      	str	r3, [sp, #12]
 8006428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642a:	4433      	add	r3, r6
 800642c:	9309      	str	r3, [sp, #36]	@ 0x24
 800642e:	e76a      	b.n	8006306 <_svfiprintf_r+0x52>
 8006430:	fb0c 3202 	mla	r2, ip, r2, r3
 8006434:	460c      	mov	r4, r1
 8006436:	2001      	movs	r0, #1
 8006438:	e7a8      	b.n	800638c <_svfiprintf_r+0xd8>
 800643a:	2300      	movs	r3, #0
 800643c:	3401      	adds	r4, #1
 800643e:	9305      	str	r3, [sp, #20]
 8006440:	4619      	mov	r1, r3
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4620      	mov	r0, r4
 8006448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800644c:	3a30      	subs	r2, #48	@ 0x30
 800644e:	2a09      	cmp	r2, #9
 8006450:	d903      	bls.n	800645a <_svfiprintf_r+0x1a6>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0c6      	beq.n	80063e4 <_svfiprintf_r+0x130>
 8006456:	9105      	str	r1, [sp, #20]
 8006458:	e7c4      	b.n	80063e4 <_svfiprintf_r+0x130>
 800645a:	fb0c 2101 	mla	r1, ip, r1, r2
 800645e:	4604      	mov	r4, r0
 8006460:	2301      	movs	r3, #1
 8006462:	e7f0      	b.n	8006446 <_svfiprintf_r+0x192>
 8006464:	ab03      	add	r3, sp, #12
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	462a      	mov	r2, r5
 800646a:	4b0e      	ldr	r3, [pc, #56]	@ (80064a4 <_svfiprintf_r+0x1f0>)
 800646c:	a904      	add	r1, sp, #16
 800646e:	4638      	mov	r0, r7
 8006470:	f3af 8000 	nop.w
 8006474:	1c42      	adds	r2, r0, #1
 8006476:	4606      	mov	r6, r0
 8006478:	d1d6      	bne.n	8006428 <_svfiprintf_r+0x174>
 800647a:	89ab      	ldrh	r3, [r5, #12]
 800647c:	065b      	lsls	r3, r3, #25
 800647e:	f53f af2d 	bmi.w	80062dc <_svfiprintf_r+0x28>
 8006482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006484:	e72c      	b.n	80062e0 <_svfiprintf_r+0x2c>
 8006486:	ab03      	add	r3, sp, #12
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	462a      	mov	r2, r5
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <_svfiprintf_r+0x1f0>)
 800648e:	a904      	add	r1, sp, #16
 8006490:	4638      	mov	r0, r7
 8006492:	f000 f9bb 	bl	800680c <_printf_i>
 8006496:	e7ed      	b.n	8006474 <_svfiprintf_r+0x1c0>
 8006498:	0800d249 	.word	0x0800d249
 800649c:	0800d253 	.word	0x0800d253
 80064a0:	00000000 	.word	0x00000000
 80064a4:	080061fd 	.word	0x080061fd
 80064a8:	0800d24f 	.word	0x0800d24f

080064ac <__sfputc_r>:
 80064ac:	6893      	ldr	r3, [r2, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	b410      	push	{r4}
 80064b4:	6093      	str	r3, [r2, #8]
 80064b6:	da08      	bge.n	80064ca <__sfputc_r+0x1e>
 80064b8:	6994      	ldr	r4, [r2, #24]
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	db01      	blt.n	80064c2 <__sfputc_r+0x16>
 80064be:	290a      	cmp	r1, #10
 80064c0:	d103      	bne.n	80064ca <__sfputc_r+0x1e>
 80064c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064c6:	f000 bb6d 	b.w	8006ba4 <__swbuf_r>
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	1c58      	adds	r0, r3, #1
 80064ce:	6010      	str	r0, [r2, #0]
 80064d0:	7019      	strb	r1, [r3, #0]
 80064d2:	4608      	mov	r0, r1
 80064d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d8:	4770      	bx	lr

080064da <__sfputs_r>:
 80064da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064dc:	4606      	mov	r6, r0
 80064de:	460f      	mov	r7, r1
 80064e0:	4614      	mov	r4, r2
 80064e2:	18d5      	adds	r5, r2, r3
 80064e4:	42ac      	cmp	r4, r5
 80064e6:	d101      	bne.n	80064ec <__sfputs_r+0x12>
 80064e8:	2000      	movs	r0, #0
 80064ea:	e007      	b.n	80064fc <__sfputs_r+0x22>
 80064ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f0:	463a      	mov	r2, r7
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ffda 	bl	80064ac <__sfputc_r>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d1f3      	bne.n	80064e4 <__sfputs_r+0xa>
 80064fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006500 <_vfiprintf_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	460d      	mov	r5, r1
 8006506:	b09d      	sub	sp, #116	@ 0x74
 8006508:	4614      	mov	r4, r2
 800650a:	4698      	mov	r8, r3
 800650c:	4606      	mov	r6, r0
 800650e:	b118      	cbz	r0, 8006518 <_vfiprintf_r+0x18>
 8006510:	6a03      	ldr	r3, [r0, #32]
 8006512:	b90b      	cbnz	r3, 8006518 <_vfiprintf_r+0x18>
 8006514:	f7ff fc44 	bl	8005da0 <__sinit>
 8006518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800651a:	07d9      	lsls	r1, r3, #31
 800651c:	d405      	bmi.n	800652a <_vfiprintf_r+0x2a>
 800651e:	89ab      	ldrh	r3, [r5, #12]
 8006520:	059a      	lsls	r2, r3, #22
 8006522:	d402      	bmi.n	800652a <_vfiprintf_r+0x2a>
 8006524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006526:	f7ff fd60 	bl	8005fea <__retarget_lock_acquire_recursive>
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	071b      	lsls	r3, r3, #28
 800652e:	d501      	bpl.n	8006534 <_vfiprintf_r+0x34>
 8006530:	692b      	ldr	r3, [r5, #16]
 8006532:	b99b      	cbnz	r3, 800655c <_vfiprintf_r+0x5c>
 8006534:	4629      	mov	r1, r5
 8006536:	4630      	mov	r0, r6
 8006538:	f000 fb72 	bl	8006c20 <__swsetup_r>
 800653c:	b170      	cbz	r0, 800655c <_vfiprintf_r+0x5c>
 800653e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006540:	07dc      	lsls	r4, r3, #31
 8006542:	d504      	bpl.n	800654e <_vfiprintf_r+0x4e>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	b01d      	add	sp, #116	@ 0x74
 800654a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654e:	89ab      	ldrh	r3, [r5, #12]
 8006550:	0598      	lsls	r0, r3, #22
 8006552:	d4f7      	bmi.n	8006544 <_vfiprintf_r+0x44>
 8006554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006556:	f7ff fd49 	bl	8005fec <__retarget_lock_release_recursive>
 800655a:	e7f3      	b.n	8006544 <_vfiprintf_r+0x44>
 800655c:	2300      	movs	r3, #0
 800655e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006560:	2320      	movs	r3, #32
 8006562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006566:	f8cd 800c 	str.w	r8, [sp, #12]
 800656a:	2330      	movs	r3, #48	@ 0x30
 800656c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800671c <_vfiprintf_r+0x21c>
 8006570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006574:	f04f 0901 	mov.w	r9, #1
 8006578:	4623      	mov	r3, r4
 800657a:	469a      	mov	sl, r3
 800657c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006580:	b10a      	cbz	r2, 8006586 <_vfiprintf_r+0x86>
 8006582:	2a25      	cmp	r2, #37	@ 0x25
 8006584:	d1f9      	bne.n	800657a <_vfiprintf_r+0x7a>
 8006586:	ebba 0b04 	subs.w	fp, sl, r4
 800658a:	d00b      	beq.n	80065a4 <_vfiprintf_r+0xa4>
 800658c:	465b      	mov	r3, fp
 800658e:	4622      	mov	r2, r4
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ffa1 	bl	80064da <__sfputs_r>
 8006598:	3001      	adds	r0, #1
 800659a:	f000 80a7 	beq.w	80066ec <_vfiprintf_r+0x1ec>
 800659e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065a0:	445a      	add	r2, fp
 80065a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80065a4:	f89a 3000 	ldrb.w	r3, [sl]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 809f 	beq.w	80066ec <_vfiprintf_r+0x1ec>
 80065ae:	2300      	movs	r3, #0
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b8:	f10a 0a01 	add.w	sl, sl, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	9307      	str	r3, [sp, #28]
 80065c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80065c6:	4654      	mov	r4, sl
 80065c8:	2205      	movs	r2, #5
 80065ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ce:	4853      	ldr	r0, [pc, #332]	@ (800671c <_vfiprintf_r+0x21c>)
 80065d0:	f7f9 fe26 	bl	8000220 <memchr>
 80065d4:	9a04      	ldr	r2, [sp, #16]
 80065d6:	b9d8      	cbnz	r0, 8006610 <_vfiprintf_r+0x110>
 80065d8:	06d1      	lsls	r1, r2, #27
 80065da:	bf44      	itt	mi
 80065dc:	2320      	movmi	r3, #32
 80065de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e2:	0713      	lsls	r3, r2, #28
 80065e4:	bf44      	itt	mi
 80065e6:	232b      	movmi	r3, #43	@ 0x2b
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ec:	f89a 3000 	ldrb.w	r3, [sl]
 80065f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f2:	d015      	beq.n	8006620 <_vfiprintf_r+0x120>
 80065f4:	9a07      	ldr	r2, [sp, #28]
 80065f6:	4654      	mov	r4, sl
 80065f8:	2000      	movs	r0, #0
 80065fa:	f04f 0c0a 	mov.w	ip, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006604:	3b30      	subs	r3, #48	@ 0x30
 8006606:	2b09      	cmp	r3, #9
 8006608:	d94b      	bls.n	80066a2 <_vfiprintf_r+0x1a2>
 800660a:	b1b0      	cbz	r0, 800663a <_vfiprintf_r+0x13a>
 800660c:	9207      	str	r2, [sp, #28]
 800660e:	e014      	b.n	800663a <_vfiprintf_r+0x13a>
 8006610:	eba0 0308 	sub.w	r3, r0, r8
 8006614:	fa09 f303 	lsl.w	r3, r9, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	46a2      	mov	sl, r4
 800661e:	e7d2      	b.n	80065c6 <_vfiprintf_r+0xc6>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	1d19      	adds	r1, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	9103      	str	r1, [sp, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfbb      	ittet	lt
 800662c:	425b      	neglt	r3, r3
 800662e:	f042 0202 	orrlt.w	r2, r2, #2
 8006632:	9307      	strge	r3, [sp, #28]
 8006634:	9307      	strlt	r3, [sp, #28]
 8006636:	bfb8      	it	lt
 8006638:	9204      	strlt	r2, [sp, #16]
 800663a:	7823      	ldrb	r3, [r4, #0]
 800663c:	2b2e      	cmp	r3, #46	@ 0x2e
 800663e:	d10a      	bne.n	8006656 <_vfiprintf_r+0x156>
 8006640:	7863      	ldrb	r3, [r4, #1]
 8006642:	2b2a      	cmp	r3, #42	@ 0x2a
 8006644:	d132      	bne.n	80066ac <_vfiprintf_r+0x1ac>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9203      	str	r2, [sp, #12]
 800664e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006652:	3402      	adds	r4, #2
 8006654:	9305      	str	r3, [sp, #20]
 8006656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800672c <_vfiprintf_r+0x22c>
 800665a:	7821      	ldrb	r1, [r4, #0]
 800665c:	2203      	movs	r2, #3
 800665e:	4650      	mov	r0, sl
 8006660:	f7f9 fdde 	bl	8000220 <memchr>
 8006664:	b138      	cbz	r0, 8006676 <_vfiprintf_r+0x176>
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	eba0 000a 	sub.w	r0, r0, sl
 800666c:	2240      	movs	r2, #64	@ 0x40
 800666e:	4082      	lsls	r2, r0
 8006670:	4313      	orrs	r3, r2
 8006672:	3401      	adds	r4, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667a:	4829      	ldr	r0, [pc, #164]	@ (8006720 <_vfiprintf_r+0x220>)
 800667c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006680:	2206      	movs	r2, #6
 8006682:	f7f9 fdcd 	bl	8000220 <memchr>
 8006686:	2800      	cmp	r0, #0
 8006688:	d03f      	beq.n	800670a <_vfiprintf_r+0x20a>
 800668a:	4b26      	ldr	r3, [pc, #152]	@ (8006724 <_vfiprintf_r+0x224>)
 800668c:	bb1b      	cbnz	r3, 80066d6 <_vfiprintf_r+0x1d6>
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	3307      	adds	r3, #7
 8006692:	f023 0307 	bic.w	r3, r3, #7
 8006696:	3308      	adds	r3, #8
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669c:	443b      	add	r3, r7
 800669e:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a0:	e76a      	b.n	8006578 <_vfiprintf_r+0x78>
 80066a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a6:	460c      	mov	r4, r1
 80066a8:	2001      	movs	r0, #1
 80066aa:	e7a8      	b.n	80065fe <_vfiprintf_r+0xfe>
 80066ac:	2300      	movs	r3, #0
 80066ae:	3401      	adds	r4, #1
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	4619      	mov	r1, r3
 80066b4:	f04f 0c0a 	mov.w	ip, #10
 80066b8:	4620      	mov	r0, r4
 80066ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066be:	3a30      	subs	r2, #48	@ 0x30
 80066c0:	2a09      	cmp	r2, #9
 80066c2:	d903      	bls.n	80066cc <_vfiprintf_r+0x1cc>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0c6      	beq.n	8006656 <_vfiprintf_r+0x156>
 80066c8:	9105      	str	r1, [sp, #20]
 80066ca:	e7c4      	b.n	8006656 <_vfiprintf_r+0x156>
 80066cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d0:	4604      	mov	r4, r0
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7f0      	b.n	80066b8 <_vfiprintf_r+0x1b8>
 80066d6:	ab03      	add	r3, sp, #12
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	462a      	mov	r2, r5
 80066dc:	4b12      	ldr	r3, [pc, #72]	@ (8006728 <_vfiprintf_r+0x228>)
 80066de:	a904      	add	r1, sp, #16
 80066e0:	4630      	mov	r0, r6
 80066e2:	f3af 8000 	nop.w
 80066e6:	4607      	mov	r7, r0
 80066e8:	1c78      	adds	r0, r7, #1
 80066ea:	d1d6      	bne.n	800669a <_vfiprintf_r+0x19a>
 80066ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	d405      	bmi.n	80066fe <_vfiprintf_r+0x1fe>
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	059a      	lsls	r2, r3, #22
 80066f6:	d402      	bmi.n	80066fe <_vfiprintf_r+0x1fe>
 80066f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066fa:	f7ff fc77 	bl	8005fec <__retarget_lock_release_recursive>
 80066fe:	89ab      	ldrh	r3, [r5, #12]
 8006700:	065b      	lsls	r3, r3, #25
 8006702:	f53f af1f 	bmi.w	8006544 <_vfiprintf_r+0x44>
 8006706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006708:	e71e      	b.n	8006548 <_vfiprintf_r+0x48>
 800670a:	ab03      	add	r3, sp, #12
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	462a      	mov	r2, r5
 8006710:	4b05      	ldr	r3, [pc, #20]	@ (8006728 <_vfiprintf_r+0x228>)
 8006712:	a904      	add	r1, sp, #16
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f879 	bl	800680c <_printf_i>
 800671a:	e7e4      	b.n	80066e6 <_vfiprintf_r+0x1e6>
 800671c:	0800d249 	.word	0x0800d249
 8006720:	0800d253 	.word	0x0800d253
 8006724:	00000000 	.word	0x00000000
 8006728:	080064db 	.word	0x080064db
 800672c:	0800d24f 	.word	0x0800d24f

08006730 <_printf_common>:
 8006730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006734:	4616      	mov	r6, r2
 8006736:	4698      	mov	r8, r3
 8006738:	688a      	ldr	r2, [r1, #8]
 800673a:	690b      	ldr	r3, [r1, #16]
 800673c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006740:	4293      	cmp	r3, r2
 8006742:	bfb8      	it	lt
 8006744:	4613      	movlt	r3, r2
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800674c:	4607      	mov	r7, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b10a      	cbz	r2, 8006756 <_printf_common+0x26>
 8006752:	3301      	adds	r3, #1
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0699      	lsls	r1, r3, #26
 800675a:	bf42      	ittt	mi
 800675c:	6833      	ldrmi	r3, [r6, #0]
 800675e:	3302      	addmi	r3, #2
 8006760:	6033      	strmi	r3, [r6, #0]
 8006762:	6825      	ldr	r5, [r4, #0]
 8006764:	f015 0506 	ands.w	r5, r5, #6
 8006768:	d106      	bne.n	8006778 <_printf_common+0x48>
 800676a:	f104 0a19 	add.w	sl, r4, #25
 800676e:	68e3      	ldr	r3, [r4, #12]
 8006770:	6832      	ldr	r2, [r6, #0]
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc26      	bgt.n	80067c6 <_printf_common+0x96>
 8006778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	3b00      	subs	r3, #0
 8006780:	bf18      	it	ne
 8006782:	2301      	movne	r3, #1
 8006784:	0692      	lsls	r2, r2, #26
 8006786:	d42b      	bmi.n	80067e0 <_printf_common+0xb0>
 8006788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800678c:	4641      	mov	r1, r8
 800678e:	4638      	mov	r0, r7
 8006790:	47c8      	blx	r9
 8006792:	3001      	adds	r0, #1
 8006794:	d01e      	beq.n	80067d4 <_printf_common+0xa4>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	f003 0306 	and.w	r3, r3, #6
 800679e:	2b04      	cmp	r3, #4
 80067a0:	bf02      	ittt	eq
 80067a2:	68e5      	ldreq	r5, [r4, #12]
 80067a4:	6833      	ldreq	r3, [r6, #0]
 80067a6:	1aed      	subeq	r5, r5, r3
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	bf0c      	ite	eq
 80067ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b0:	2500      	movne	r5, #0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	bfc4      	itt	gt
 80067b6:	1a9b      	subgt	r3, r3, r2
 80067b8:	18ed      	addgt	r5, r5, r3
 80067ba:	2600      	movs	r6, #0
 80067bc:	341a      	adds	r4, #26
 80067be:	42b5      	cmp	r5, r6
 80067c0:	d11a      	bne.n	80067f8 <_printf_common+0xc8>
 80067c2:	2000      	movs	r0, #0
 80067c4:	e008      	b.n	80067d8 <_printf_common+0xa8>
 80067c6:	2301      	movs	r3, #1
 80067c8:	4652      	mov	r2, sl
 80067ca:	4641      	mov	r1, r8
 80067cc:	4638      	mov	r0, r7
 80067ce:	47c8      	blx	r9
 80067d0:	3001      	adds	r0, #1
 80067d2:	d103      	bne.n	80067dc <_printf_common+0xac>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	3501      	adds	r5, #1
 80067de:	e7c6      	b.n	800676e <_printf_common+0x3e>
 80067e0:	18e1      	adds	r1, r4, r3
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	2030      	movs	r0, #48	@ 0x30
 80067e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ea:	4422      	add	r2, r4
 80067ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067f4:	3302      	adds	r3, #2
 80067f6:	e7c7      	b.n	8006788 <_printf_common+0x58>
 80067f8:	2301      	movs	r3, #1
 80067fa:	4622      	mov	r2, r4
 80067fc:	4641      	mov	r1, r8
 80067fe:	4638      	mov	r0, r7
 8006800:	47c8      	blx	r9
 8006802:	3001      	adds	r0, #1
 8006804:	d0e6      	beq.n	80067d4 <_printf_common+0xa4>
 8006806:	3601      	adds	r6, #1
 8006808:	e7d9      	b.n	80067be <_printf_common+0x8e>
	...

0800680c <_printf_i>:
 800680c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	7e0f      	ldrb	r7, [r1, #24]
 8006812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006814:	2f78      	cmp	r7, #120	@ 0x78
 8006816:	4691      	mov	r9, r2
 8006818:	4680      	mov	r8, r0
 800681a:	460c      	mov	r4, r1
 800681c:	469a      	mov	sl, r3
 800681e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006822:	d807      	bhi.n	8006834 <_printf_i+0x28>
 8006824:	2f62      	cmp	r7, #98	@ 0x62
 8006826:	d80a      	bhi.n	800683e <_printf_i+0x32>
 8006828:	2f00      	cmp	r7, #0
 800682a:	f000 80d2 	beq.w	80069d2 <_printf_i+0x1c6>
 800682e:	2f58      	cmp	r7, #88	@ 0x58
 8006830:	f000 80b9 	beq.w	80069a6 <_printf_i+0x19a>
 8006834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800683c:	e03a      	b.n	80068b4 <_printf_i+0xa8>
 800683e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006842:	2b15      	cmp	r3, #21
 8006844:	d8f6      	bhi.n	8006834 <_printf_i+0x28>
 8006846:	a101      	add	r1, pc, #4	@ (adr r1, 800684c <_printf_i+0x40>)
 8006848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800684c:	080068a5 	.word	0x080068a5
 8006850:	080068b9 	.word	0x080068b9
 8006854:	08006835 	.word	0x08006835
 8006858:	08006835 	.word	0x08006835
 800685c:	08006835 	.word	0x08006835
 8006860:	08006835 	.word	0x08006835
 8006864:	080068b9 	.word	0x080068b9
 8006868:	08006835 	.word	0x08006835
 800686c:	08006835 	.word	0x08006835
 8006870:	08006835 	.word	0x08006835
 8006874:	08006835 	.word	0x08006835
 8006878:	080069b9 	.word	0x080069b9
 800687c:	080068e3 	.word	0x080068e3
 8006880:	08006973 	.word	0x08006973
 8006884:	08006835 	.word	0x08006835
 8006888:	08006835 	.word	0x08006835
 800688c:	080069db 	.word	0x080069db
 8006890:	08006835 	.word	0x08006835
 8006894:	080068e3 	.word	0x080068e3
 8006898:	08006835 	.word	0x08006835
 800689c:	08006835 	.word	0x08006835
 80068a0:	0800697b 	.word	0x0800697b
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6032      	str	r2, [r6, #0]
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068b4:	2301      	movs	r3, #1
 80068b6:	e09d      	b.n	80069f4 <_printf_i+0x1e8>
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	6820      	ldr	r0, [r4, #0]
 80068bc:	1d19      	adds	r1, r3, #4
 80068be:	6031      	str	r1, [r6, #0]
 80068c0:	0606      	lsls	r6, r0, #24
 80068c2:	d501      	bpl.n	80068c8 <_printf_i+0xbc>
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	e003      	b.n	80068d0 <_printf_i+0xc4>
 80068c8:	0645      	lsls	r5, r0, #25
 80068ca:	d5fb      	bpl.n	80068c4 <_printf_i+0xb8>
 80068cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	da03      	bge.n	80068dc <_printf_i+0xd0>
 80068d4:	232d      	movs	r3, #45	@ 0x2d
 80068d6:	426d      	negs	r5, r5
 80068d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068dc:	4859      	ldr	r0, [pc, #356]	@ (8006a44 <_printf_i+0x238>)
 80068de:	230a      	movs	r3, #10
 80068e0:	e011      	b.n	8006906 <_printf_i+0xfa>
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	6833      	ldr	r3, [r6, #0]
 80068e6:	0608      	lsls	r0, r1, #24
 80068e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068ec:	d402      	bmi.n	80068f4 <_printf_i+0xe8>
 80068ee:	0649      	lsls	r1, r1, #25
 80068f0:	bf48      	it	mi
 80068f2:	b2ad      	uxthmi	r5, r5
 80068f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068f6:	4853      	ldr	r0, [pc, #332]	@ (8006a44 <_printf_i+0x238>)
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	bf14      	ite	ne
 80068fc:	230a      	movne	r3, #10
 80068fe:	2308      	moveq	r3, #8
 8006900:	2100      	movs	r1, #0
 8006902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006906:	6866      	ldr	r6, [r4, #4]
 8006908:	60a6      	str	r6, [r4, #8]
 800690a:	2e00      	cmp	r6, #0
 800690c:	bfa2      	ittt	ge
 800690e:	6821      	ldrge	r1, [r4, #0]
 8006910:	f021 0104 	bicge.w	r1, r1, #4
 8006914:	6021      	strge	r1, [r4, #0]
 8006916:	b90d      	cbnz	r5, 800691c <_printf_i+0x110>
 8006918:	2e00      	cmp	r6, #0
 800691a:	d04b      	beq.n	80069b4 <_printf_i+0x1a8>
 800691c:	4616      	mov	r6, r2
 800691e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006922:	fb03 5711 	mls	r7, r3, r1, r5
 8006926:	5dc7      	ldrb	r7, [r0, r7]
 8006928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800692c:	462f      	mov	r7, r5
 800692e:	42bb      	cmp	r3, r7
 8006930:	460d      	mov	r5, r1
 8006932:	d9f4      	bls.n	800691e <_printf_i+0x112>
 8006934:	2b08      	cmp	r3, #8
 8006936:	d10b      	bne.n	8006950 <_printf_i+0x144>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07df      	lsls	r7, r3, #31
 800693c:	d508      	bpl.n	8006950 <_printf_i+0x144>
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	6861      	ldr	r1, [r4, #4]
 8006942:	4299      	cmp	r1, r3
 8006944:	bfde      	ittt	le
 8006946:	2330      	movle	r3, #48	@ 0x30
 8006948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800694c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006950:	1b92      	subs	r2, r2, r6
 8006952:	6122      	str	r2, [r4, #16]
 8006954:	f8cd a000 	str.w	sl, [sp]
 8006958:	464b      	mov	r3, r9
 800695a:	aa03      	add	r2, sp, #12
 800695c:	4621      	mov	r1, r4
 800695e:	4640      	mov	r0, r8
 8006960:	f7ff fee6 	bl	8006730 <_printf_common>
 8006964:	3001      	adds	r0, #1
 8006966:	d14a      	bne.n	80069fe <_printf_i+0x1f2>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	b004      	add	sp, #16
 800696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	4833      	ldr	r0, [pc, #204]	@ (8006a48 <_printf_i+0x23c>)
 800697c:	2778      	movs	r7, #120	@ 0x78
 800697e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	6831      	ldr	r1, [r6, #0]
 8006986:	061f      	lsls	r7, r3, #24
 8006988:	f851 5b04 	ldr.w	r5, [r1], #4
 800698c:	d402      	bmi.n	8006994 <_printf_i+0x188>
 800698e:	065f      	lsls	r7, r3, #25
 8006990:	bf48      	it	mi
 8006992:	b2ad      	uxthmi	r5, r5
 8006994:	6031      	str	r1, [r6, #0]
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	bf44      	itt	mi
 800699a:	f043 0320 	orrmi.w	r3, r3, #32
 800699e:	6023      	strmi	r3, [r4, #0]
 80069a0:	b11d      	cbz	r5, 80069aa <_printf_i+0x19e>
 80069a2:	2310      	movs	r3, #16
 80069a4:	e7ac      	b.n	8006900 <_printf_i+0xf4>
 80069a6:	4827      	ldr	r0, [pc, #156]	@ (8006a44 <_printf_i+0x238>)
 80069a8:	e7e9      	b.n	800697e <_printf_i+0x172>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f023 0320 	bic.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	e7f6      	b.n	80069a2 <_printf_i+0x196>
 80069b4:	4616      	mov	r6, r2
 80069b6:	e7bd      	b.n	8006934 <_printf_i+0x128>
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	6825      	ldr	r5, [r4, #0]
 80069bc:	6961      	ldr	r1, [r4, #20]
 80069be:	1d18      	adds	r0, r3, #4
 80069c0:	6030      	str	r0, [r6, #0]
 80069c2:	062e      	lsls	r6, r5, #24
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0x1c0>
 80069c8:	6019      	str	r1, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0x1c6>
 80069cc:	0668      	lsls	r0, r5, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0x1bc>
 80069d0:	8019      	strh	r1, [r3, #0]
 80069d2:	2300      	movs	r3, #0
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	4616      	mov	r6, r2
 80069d8:	e7bc      	b.n	8006954 <_printf_i+0x148>
 80069da:	6833      	ldr	r3, [r6, #0]
 80069dc:	1d1a      	adds	r2, r3, #4
 80069de:	6032      	str	r2, [r6, #0]
 80069e0:	681e      	ldr	r6, [r3, #0]
 80069e2:	6862      	ldr	r2, [r4, #4]
 80069e4:	2100      	movs	r1, #0
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7f9 fc1a 	bl	8000220 <memchr>
 80069ec:	b108      	cbz	r0, 80069f2 <_printf_i+0x1e6>
 80069ee:	1b80      	subs	r0, r0, r6
 80069f0:	6060      	str	r0, [r4, #4]
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	2300      	movs	r3, #0
 80069f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069fc:	e7aa      	b.n	8006954 <_printf_i+0x148>
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d0ad      	beq.n	8006968 <_printf_i+0x15c>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	079b      	lsls	r3, r3, #30
 8006a10:	d413      	bmi.n	8006a3a <_printf_i+0x22e>
 8006a12:	68e0      	ldr	r0, [r4, #12]
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	4298      	cmp	r0, r3
 8006a18:	bfb8      	it	lt
 8006a1a:	4618      	movlt	r0, r3
 8006a1c:	e7a6      	b.n	800696c <_printf_i+0x160>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4632      	mov	r2, r6
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	47d0      	blx	sl
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d09d      	beq.n	8006968 <_printf_i+0x15c>
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	9903      	ldr	r1, [sp, #12]
 8006a32:	1a5b      	subs	r3, r3, r1
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dcf2      	bgt.n	8006a1e <_printf_i+0x212>
 8006a38:	e7eb      	b.n	8006a12 <_printf_i+0x206>
 8006a3a:	2500      	movs	r5, #0
 8006a3c:	f104 0619 	add.w	r6, r4, #25
 8006a40:	e7f5      	b.n	8006a2e <_printf_i+0x222>
 8006a42:	bf00      	nop
 8006a44:	0800d25a 	.word	0x0800d25a
 8006a48:	0800d26b 	.word	0x0800d26b

08006a4c <__sflush_r>:
 8006a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a54:	0716      	lsls	r6, r2, #28
 8006a56:	4605      	mov	r5, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	d454      	bmi.n	8006b06 <__sflush_r+0xba>
 8006a5c:	684b      	ldr	r3, [r1, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	dc02      	bgt.n	8006a68 <__sflush_r+0x1c>
 8006a62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd48      	ble.n	8006afa <__sflush_r+0xae>
 8006a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d045      	beq.n	8006afa <__sflush_r+0xae>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a74:	682f      	ldr	r7, [r5, #0]
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	d030      	beq.n	8006ade <__sflush_r+0x92>
 8006a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	0759      	lsls	r1, r3, #29
 8006a82:	d505      	bpl.n	8006a90 <__sflush_r+0x44>
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	1ad2      	subs	r2, r2, r3
 8006a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a8a:	b10b      	cbz	r3, 8006a90 <__sflush_r+0x44>
 8006a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a94:	6a21      	ldr	r1, [r4, #32]
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b0      	blx	r6
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	d106      	bne.n	8006aae <__sflush_r+0x62>
 8006aa0:	6829      	ldr	r1, [r5, #0]
 8006aa2:	291d      	cmp	r1, #29
 8006aa4:	d82b      	bhi.n	8006afe <__sflush_r+0xb2>
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b50 <__sflush_r+0x104>)
 8006aa8:	410a      	asrs	r2, r1
 8006aaa:	07d6      	lsls	r6, r2, #31
 8006aac:	d427      	bmi.n	8006afe <__sflush_r+0xb2>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	6062      	str	r2, [r4, #4]
 8006ab2:	04d9      	lsls	r1, r3, #19
 8006ab4:	6922      	ldr	r2, [r4, #16]
 8006ab6:	6022      	str	r2, [r4, #0]
 8006ab8:	d504      	bpl.n	8006ac4 <__sflush_r+0x78>
 8006aba:	1c42      	adds	r2, r0, #1
 8006abc:	d101      	bne.n	8006ac2 <__sflush_r+0x76>
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	b903      	cbnz	r3, 8006ac4 <__sflush_r+0x78>
 8006ac2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ac6:	602f      	str	r7, [r5, #0]
 8006ac8:	b1b9      	cbz	r1, 8006afa <__sflush_r+0xae>
 8006aca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ace:	4299      	cmp	r1, r3
 8006ad0:	d002      	beq.n	8006ad8 <__sflush_r+0x8c>
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f7ff fa9a 	bl	800600c <_free_r>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6363      	str	r3, [r4, #52]	@ 0x34
 8006adc:	e00d      	b.n	8006afa <__sflush_r+0xae>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b0      	blx	r6
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	1c50      	adds	r0, r2, #1
 8006ae8:	d1c9      	bne.n	8006a7e <__sflush_r+0x32>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0c6      	beq.n	8006a7e <__sflush_r+0x32>
 8006af0:	2b1d      	cmp	r3, #29
 8006af2:	d001      	beq.n	8006af8 <__sflush_r+0xac>
 8006af4:	2b16      	cmp	r3, #22
 8006af6:	d11e      	bne.n	8006b36 <__sflush_r+0xea>
 8006af8:	602f      	str	r7, [r5, #0]
 8006afa:	2000      	movs	r0, #0
 8006afc:	e022      	b.n	8006b44 <__sflush_r+0xf8>
 8006afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b02:	b21b      	sxth	r3, r3
 8006b04:	e01b      	b.n	8006b3e <__sflush_r+0xf2>
 8006b06:	690f      	ldr	r7, [r1, #16]
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	d0f6      	beq.n	8006afa <__sflush_r+0xae>
 8006b0c:	0793      	lsls	r3, r2, #30
 8006b0e:	680e      	ldr	r6, [r1, #0]
 8006b10:	bf08      	it	eq
 8006b12:	694b      	ldreq	r3, [r1, #20]
 8006b14:	600f      	str	r7, [r1, #0]
 8006b16:	bf18      	it	ne
 8006b18:	2300      	movne	r3, #0
 8006b1a:	eba6 0807 	sub.w	r8, r6, r7
 8006b1e:	608b      	str	r3, [r1, #8]
 8006b20:	f1b8 0f00 	cmp.w	r8, #0
 8006b24:	dde9      	ble.n	8006afa <__sflush_r+0xae>
 8006b26:	6a21      	ldr	r1, [r4, #32]
 8006b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b2a:	4643      	mov	r3, r8
 8006b2c:	463a      	mov	r2, r7
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b0      	blx	r6
 8006b32:	2800      	cmp	r0, #0
 8006b34:	dc08      	bgt.n	8006b48 <__sflush_r+0xfc>
 8006b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b48:	4407      	add	r7, r0
 8006b4a:	eba8 0800 	sub.w	r8, r8, r0
 8006b4e:	e7e7      	b.n	8006b20 <__sflush_r+0xd4>
 8006b50:	dfbffffe 	.word	0xdfbffffe

08006b54 <_fflush_r>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	690b      	ldr	r3, [r1, #16]
 8006b58:	4605      	mov	r5, r0
 8006b5a:	460c      	mov	r4, r1
 8006b5c:	b913      	cbnz	r3, 8006b64 <_fflush_r+0x10>
 8006b5e:	2500      	movs	r5, #0
 8006b60:	4628      	mov	r0, r5
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	b118      	cbz	r0, 8006b6e <_fflush_r+0x1a>
 8006b66:	6a03      	ldr	r3, [r0, #32]
 8006b68:	b90b      	cbnz	r3, 8006b6e <_fflush_r+0x1a>
 8006b6a:	f7ff f919 	bl	8005da0 <__sinit>
 8006b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f3      	beq.n	8006b5e <_fflush_r+0xa>
 8006b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d404      	bmi.n	8006b86 <_fflush_r+0x32>
 8006b7c:	0599      	lsls	r1, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_fflush_r+0x32>
 8006b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b82:	f7ff fa32 	bl	8005fea <__retarget_lock_acquire_recursive>
 8006b86:	4628      	mov	r0, r5
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f7ff ff5f 	bl	8006a4c <__sflush_r>
 8006b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b90:	07da      	lsls	r2, r3, #31
 8006b92:	4605      	mov	r5, r0
 8006b94:	d4e4      	bmi.n	8006b60 <_fflush_r+0xc>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	059b      	lsls	r3, r3, #22
 8006b9a:	d4e1      	bmi.n	8006b60 <_fflush_r+0xc>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b9e:	f7ff fa25 	bl	8005fec <__retarget_lock_release_recursive>
 8006ba2:	e7dd      	b.n	8006b60 <_fflush_r+0xc>

08006ba4 <__swbuf_r>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4614      	mov	r4, r2
 8006baa:	4605      	mov	r5, r0
 8006bac:	b118      	cbz	r0, 8006bb6 <__swbuf_r+0x12>
 8006bae:	6a03      	ldr	r3, [r0, #32]
 8006bb0:	b90b      	cbnz	r3, 8006bb6 <__swbuf_r+0x12>
 8006bb2:	f7ff f8f5 	bl	8005da0 <__sinit>
 8006bb6:	69a3      	ldr	r3, [r4, #24]
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	071a      	lsls	r2, r3, #28
 8006bbe:	d501      	bpl.n	8006bc4 <__swbuf_r+0x20>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	b943      	cbnz	r3, 8006bd6 <__swbuf_r+0x32>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f82a 	bl	8006c20 <__swsetup_r>
 8006bcc:	b118      	cbz	r0, 8006bd6 <__swbuf_r+0x32>
 8006bce:	f04f 37ff 	mov.w	r7, #4294967295
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	1a98      	subs	r0, r3, r2
 8006bdc:	6963      	ldr	r3, [r4, #20]
 8006bde:	b2f6      	uxtb	r6, r6
 8006be0:	4283      	cmp	r3, r0
 8006be2:	4637      	mov	r7, r6
 8006be4:	dc05      	bgt.n	8006bf2 <__swbuf_r+0x4e>
 8006be6:	4621      	mov	r1, r4
 8006be8:	4628      	mov	r0, r5
 8006bea:	f7ff ffb3 	bl	8006b54 <_fflush_r>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d1ed      	bne.n	8006bce <__swbuf_r+0x2a>
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	60a3      	str	r3, [r4, #8]
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	701e      	strb	r6, [r3, #0]
 8006c00:	6962      	ldr	r2, [r4, #20]
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d004      	beq.n	8006c12 <__swbuf_r+0x6e>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	07db      	lsls	r3, r3, #31
 8006c0c:	d5e1      	bpl.n	8006bd2 <__swbuf_r+0x2e>
 8006c0e:	2e0a      	cmp	r6, #10
 8006c10:	d1df      	bne.n	8006bd2 <__swbuf_r+0x2e>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	f7ff ff9d 	bl	8006b54 <_fflush_r>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0d9      	beq.n	8006bd2 <__swbuf_r+0x2e>
 8006c1e:	e7d6      	b.n	8006bce <__swbuf_r+0x2a>

08006c20 <__swsetup_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4b29      	ldr	r3, [pc, #164]	@ (8006cc8 <__swsetup_r+0xa8>)
 8006c24:	4605      	mov	r5, r0
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	460c      	mov	r4, r1
 8006c2a:	b118      	cbz	r0, 8006c34 <__swsetup_r+0x14>
 8006c2c:	6a03      	ldr	r3, [r0, #32]
 8006c2e:	b90b      	cbnz	r3, 8006c34 <__swsetup_r+0x14>
 8006c30:	f7ff f8b6 	bl	8005da0 <__sinit>
 8006c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c38:	0719      	lsls	r1, r3, #28
 8006c3a:	d422      	bmi.n	8006c82 <__swsetup_r+0x62>
 8006c3c:	06da      	lsls	r2, r3, #27
 8006c3e:	d407      	bmi.n	8006c50 <__swsetup_r+0x30>
 8006c40:	2209      	movs	r2, #9
 8006c42:	602a      	str	r2, [r5, #0]
 8006c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	e033      	b.n	8006cb8 <__swsetup_r+0x98>
 8006c50:	0758      	lsls	r0, r3, #29
 8006c52:	d512      	bpl.n	8006c7a <__swsetup_r+0x5a>
 8006c54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c56:	b141      	cbz	r1, 8006c6a <__swsetup_r+0x4a>
 8006c58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c5c:	4299      	cmp	r1, r3
 8006c5e:	d002      	beq.n	8006c66 <__swsetup_r+0x46>
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff f9d3 	bl	800600c <_free_r>
 8006c66:	2300      	movs	r3, #0
 8006c68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	2300      	movs	r3, #0
 8006c74:	6063      	str	r3, [r4, #4]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f043 0308 	orr.w	r3, r3, #8
 8006c80:	81a3      	strh	r3, [r4, #12]
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	b94b      	cbnz	r3, 8006c9a <__swsetup_r+0x7a>
 8006c86:	89a3      	ldrh	r3, [r4, #12]
 8006c88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c90:	d003      	beq.n	8006c9a <__swsetup_r+0x7a>
 8006c92:	4621      	mov	r1, r4
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f897 	bl	8006dc8 <__smakebuf_r>
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	f013 0201 	ands.w	r2, r3, #1
 8006ca2:	d00a      	beq.n	8006cba <__swsetup_r+0x9a>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	60a2      	str	r2, [r4, #8]
 8006ca8:	6962      	ldr	r2, [r4, #20]
 8006caa:	4252      	negs	r2, r2
 8006cac:	61a2      	str	r2, [r4, #24]
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	b942      	cbnz	r2, 8006cc4 <__swsetup_r+0xa4>
 8006cb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cb6:	d1c5      	bne.n	8006c44 <__swsetup_r+0x24>
 8006cb8:	bd38      	pop	{r3, r4, r5, pc}
 8006cba:	0799      	lsls	r1, r3, #30
 8006cbc:	bf58      	it	pl
 8006cbe:	6962      	ldrpl	r2, [r4, #20]
 8006cc0:	60a2      	str	r2, [r4, #8]
 8006cc2:	e7f4      	b.n	8006cae <__swsetup_r+0x8e>
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	e7f7      	b.n	8006cb8 <__swsetup_r+0x98>
 8006cc8:	200000d0 	.word	0x200000d0

08006ccc <memmove>:
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	eb01 0402 	add.w	r4, r1, r2
 8006cd4:	d902      	bls.n	8006cdc <memmove+0x10>
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	4623      	mov	r3, r4
 8006cda:	d807      	bhi.n	8006cec <memmove+0x20>
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	42a1      	cmp	r1, r4
 8006ce0:	d008      	beq.n	8006cf4 <memmove+0x28>
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cea:	e7f8      	b.n	8006cde <memmove+0x12>
 8006cec:	4402      	add	r2, r0
 8006cee:	4601      	mov	r1, r0
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d100      	bne.n	8006cf6 <memmove+0x2a>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cfe:	e7f7      	b.n	8006cf0 <memmove+0x24>

08006d00 <_sbrk_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d06      	ldr	r5, [pc, #24]	@ (8006d1c <_sbrk_r+0x1c>)
 8006d04:	2300      	movs	r3, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fe f986 	bl	800501c <_sbrk>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_sbrk_r+0x1a>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_sbrk_r+0x1a>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20024e20 	.word	0x20024e20

08006d20 <_realloc_r>:
 8006d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4680      	mov	r8, r0
 8006d26:	4615      	mov	r5, r2
 8006d28:	460c      	mov	r4, r1
 8006d2a:	b921      	cbnz	r1, 8006d36 <_realloc_r+0x16>
 8006d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4611      	mov	r1, r2
 8006d32:	f7ff b9d7 	b.w	80060e4 <_malloc_r>
 8006d36:	b92a      	cbnz	r2, 8006d44 <_realloc_r+0x24>
 8006d38:	f7ff f968 	bl	800600c <_free_r>
 8006d3c:	2400      	movs	r4, #0
 8006d3e:	4620      	mov	r0, r4
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	f000 f89e 	bl	8006e84 <_malloc_usable_size_r>
 8006d48:	4285      	cmp	r5, r0
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	d802      	bhi.n	8006d54 <_realloc_r+0x34>
 8006d4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d52:	d8f4      	bhi.n	8006d3e <_realloc_r+0x1e>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4640      	mov	r0, r8
 8006d58:	f7ff f9c4 	bl	80060e4 <_malloc_r>
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0ec      	beq.n	8006d3c <_realloc_r+0x1c>
 8006d62:	42b5      	cmp	r5, r6
 8006d64:	462a      	mov	r2, r5
 8006d66:	4621      	mov	r1, r4
 8006d68:	bf28      	it	cs
 8006d6a:	4632      	movcs	r2, r6
 8006d6c:	f7ff f93f 	bl	8005fee <memcpy>
 8006d70:	4621      	mov	r1, r4
 8006d72:	4640      	mov	r0, r8
 8006d74:	f7ff f94a 	bl	800600c <_free_r>
 8006d78:	463c      	mov	r4, r7
 8006d7a:	e7e0      	b.n	8006d3e <_realloc_r+0x1e>

08006d7c <__swhatbuf_r>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	460c      	mov	r4, r1
 8006d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d84:	2900      	cmp	r1, #0
 8006d86:	b096      	sub	sp, #88	@ 0x58
 8006d88:	4615      	mov	r5, r2
 8006d8a:	461e      	mov	r6, r3
 8006d8c:	da0d      	bge.n	8006daa <__swhatbuf_r+0x2e>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d94:	f04f 0100 	mov.w	r1, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2340      	movne	r3, #64	@ 0x40
 8006d9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006da0:	2000      	movs	r0, #0
 8006da2:	6031      	str	r1, [r6, #0]
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	b016      	add	sp, #88	@ 0x58
 8006da8:	bd70      	pop	{r4, r5, r6, pc}
 8006daa:	466a      	mov	r2, sp
 8006dac:	f000 f848 	bl	8006e40 <_fstat_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	dbec      	blt.n	8006d8e <__swhatbuf_r+0x12>
 8006db4:	9901      	ldr	r1, [sp, #4]
 8006db6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006dba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dbe:	4259      	negs	r1, r3
 8006dc0:	4159      	adcs	r1, r3
 8006dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dc6:	e7eb      	b.n	8006da0 <__swhatbuf_r+0x24>

08006dc8 <__smakebuf_r>:
 8006dc8:	898b      	ldrh	r3, [r1, #12]
 8006dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dcc:	079d      	lsls	r5, r3, #30
 8006dce:	4606      	mov	r6, r0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	d507      	bpl.n	8006de4 <__smakebuf_r+0x1c>
 8006dd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	6123      	str	r3, [r4, #16]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	6163      	str	r3, [r4, #20]
 8006de0:	b003      	add	sp, #12
 8006de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de4:	ab01      	add	r3, sp, #4
 8006de6:	466a      	mov	r2, sp
 8006de8:	f7ff ffc8 	bl	8006d7c <__swhatbuf_r>
 8006dec:	9f00      	ldr	r7, [sp, #0]
 8006dee:	4605      	mov	r5, r0
 8006df0:	4639      	mov	r1, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7ff f976 	bl	80060e4 <_malloc_r>
 8006df8:	b948      	cbnz	r0, 8006e0e <__smakebuf_r+0x46>
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	059a      	lsls	r2, r3, #22
 8006e00:	d4ee      	bmi.n	8006de0 <__smakebuf_r+0x18>
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	f043 0302 	orr.w	r3, r3, #2
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	e7e2      	b.n	8006dd4 <__smakebuf_r+0xc>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	6020      	str	r0, [r4, #0]
 8006e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e1e:	b15b      	cbz	r3, 8006e38 <__smakebuf_r+0x70>
 8006e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e24:	4630      	mov	r0, r6
 8006e26:	f000 f81d 	bl	8006e64 <_isatty_r>
 8006e2a:	b128      	cbz	r0, 8006e38 <__smakebuf_r+0x70>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	f023 0303 	bic.w	r3, r3, #3
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	431d      	orrs	r5, r3
 8006e3c:	81a5      	strh	r5, [r4, #12]
 8006e3e:	e7cf      	b.n	8006de0 <__smakebuf_r+0x18>

08006e40 <_fstat_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	@ (8006e60 <_fstat_r+0x20>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	f7fe f902 	bl	8005056 <_fstat>
 8006e52:	1c43      	adds	r3, r0, #1
 8006e54:	d102      	bne.n	8006e5c <_fstat_r+0x1c>
 8006e56:	682b      	ldr	r3, [r5, #0]
 8006e58:	b103      	cbz	r3, 8006e5c <_fstat_r+0x1c>
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	bd38      	pop	{r3, r4, r5, pc}
 8006e5e:	bf00      	nop
 8006e60:	20024e20 	.word	0x20024e20

08006e64 <_isatty_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d06      	ldr	r5, [pc, #24]	@ (8006e80 <_isatty_r+0x1c>)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	f7fe f8f6 	bl	8005060 <_isatty>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_isatty_r+0x1a>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_isatty_r+0x1a>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	20024e20 	.word	0x20024e20

08006e84 <_malloc_usable_size_r>:
 8006e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e88:	1f18      	subs	r0, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfbc      	itt	lt
 8006e8e:	580b      	ldrlt	r3, [r1, r0]
 8006e90:	18c0      	addlt	r0, r0, r3
 8006e92:	4770      	bx	lr

08006e94 <_init>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr

08006ea0 <_fini>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr
